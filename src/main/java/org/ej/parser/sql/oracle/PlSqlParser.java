// Generated from org\ej\parser\sql\oracle\PlSqlParser.g4 by ANTLR 4.7
package org.ej.parser.sql.oracle;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PlSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ADD=1, AFTER=2, AGENT=3, AGGREGATE=4, A_LETTER=5, ALL=6, ALTER=7, ANALYZE=8, 
		AND=9, ANY=10, ARCHIVE=11, ARRAY=12, AS=13, ASC=14, ASSOCIATE=15, AT=16, 
		ATTRIBUTE=17, AUDIT=18, AUTHID=19, AUTO=20, AUTOMATIC=21, AUTONOMOUS_TRANSACTION=22, 
		BASIC=23, BATCH=24, BEFORE=25, BEGIN=26, BETWEEN=27, BFILE=28, BINARY_DOUBLE=29, 
		BINARY_FLOAT=30, BINARY_INTEGER=31, BLOB=32, BLOCK=33, BODY=34, BOOLEAN=35, 
		BOTH=36, BREADTH=37, BUFFER_POOL=38, BULK=39, BY=40, BYTE=41, CACHE=42, 
		CALL=43, CANONICAL=44, CASCADE=45, CASE=46, CAST=47, CHARACTER=48, CHAR=49, 
		CHAR_CS=50, CHECK=51, CHR=52, C_LETTER=53, CLOB=54, CLOSE=55, CLUSTER=56, 
		COALESCE=57, COLLECT=58, COLUMN=59, COLUMNS=60, COMMENT=61, COMMIT=62, 
		COMMITTED=63, COMPATIBILITY=64, COMPILE=65, COMPOUND=66, COMPRESS=67, 
		COMPUTE=68, CONNECT_BY_ROOT=69, CONNECT=70, CONSTANT=71, CONSTRAINT=72, 
		CONSTRAINTS=73, CONSTRUCTOR=74, CONTENT=75, CONTEXT=76, CONTINUE=77, CONVERT=78, 
		CORRUPT_XID_ALL=79, CORRUPT_XID=80, COST=81, COUNT=82, CREATE=83, CREATION=84, 
		CROSS=85, CUBE=86, CURRENT=87, CURRENT_USER=88, CURSOR=89, CUSTOMDATUM=90, 
		CYCLE=91, DATABASE=92, DATA=93, DATE=94, DAY=95, DB_ROLE_CHANGE=96, DBTIMEZONE=97, 
		DDL=98, DEBUG=99, DEC=100, DECIMAL=101, DECLARE=102, DECOMPOSE=103, DECREMENT=104, 
		DEFAULT=105, DEFAULTS=106, DEFERRED=107, DEFINER=108, DELETE=109, DEPTH=110, 
		DESC=111, DETERMINISTIC=112, DIMENSION=113, DISABLE=114, DISASSOCIATE=115, 
		DISTINCT=116, DOCUMENT=117, DOUBLE=118, DROP=119, DSINTERVAL_UNCONSTRAINED=120, 
		EACH=121, ELEMENT=122, ELSE=123, ELSIF=124, EMPTY=125, ENABLE=126, ENCODING=127, 
		ENCRYPT=128, END=129, ENTITYESCAPING=130, ERR=131, ERRORS=132, ESCAPE=133, 
		EVALNAME=134, EXCEPTION=135, EXCEPTION_INIT=136, EXCEPTIONS=137, EXCLUDE=138, 
		EXCLUSIVE=139, EXECUTE=140, EXISTS=141, EXIT=142, EXPLAIN=143, EXTERNAL=144, 
		EXTRACT=145, FAILURE=146, FALSE=147, FETCH=148, FILESYSTEM_LIKE_LOGGING=149, 
		FINAL=150, FIRST=151, FIRST_VALUE=152, FLASH_CACHE=153, FLOAT=154, FOLLOWING=155, 
		FOLLOWS=156, FORALL=157, FORCE=158, FOREIGN=159, FOR=160, FREELIST=161, 
		FREELISTS=162, FROM=163, FULL=164, FUNCTION=165, GLOBAL=166, GOTO=167, 
		GRANT=168, GROUP=169, GROUPING=170, GROUPS=171, HASH=172, HAVING=173, 
		HIDE=174, HIGH=175, HOUR=176, IF=177, IGNORE=178, IMMEDIATE=179, INCLUDE=180, 
		INCLUDING=181, INCREMENT=182, INDENT=183, INDEXED=184, INDEX=185, INDICATOR=186, 
		INDICES=187, INFINITE=188, IN=189, INITIAL=190, INITRANS=191, INLINE=192, 
		INNER=193, INOUT=194, INSERT=195, INSTANTIABLE=196, INSTEAD=197, INTEGER=198, 
		INTERSECT=199, INTERVAL=200, INT=201, INTO=202, INVALIDATE=203, IS=204, 
		ISOLATION=205, ITERATE=206, JAVA=207, JOIN=208, KEEP=209, KEY=210, LANGUAGE=211, 
		LAST=212, LAST_VALUE=213, LEADING=214, LEFT=215, LEVEL=216, LIBRARY=217, 
		LIKE2=218, LIKE4=219, LIKEC=220, LIKE=221, LIMIT=222, LIST=223, LOCAL=224, 
		LOCKED=225, LOCK=226, LOGGING=227, LOG=228, LOGOFF=229, LOGON=230, LONG=231, 
		LOOP=232, LOW=233, MAIN=234, MAP=235, MATCHED=236, MAXVALUE=237, MEASURES=238, 
		MEMBER=239, MERGE=240, MINEXTENTS=241, MINUS=242, MINUTE=243, MINVALUE=244, 
		MLSLABEL=245, MODEL=246, MODE=247, MODIFY=248, MONTH=249, MULTISET=250, 
		NAME=251, NAN=252, NATURAL=253, NATURALN=254, NAV=255, NCHAR_CS=256, NCHAR=257, 
		NCLOB=258, NESTED=259, NEW=260, NEXT=261, NOAUDIT=262, NOCACHE=263, NOCOMPRESS=264, 
		NOCOPY=265, NOCYCLE=266, NOENTITYESCAPING=267, NOLOGGING=268, NOMAXVALUE=269, 
		NOMINVALUE=270, NONE=271, NO=272, NOORDER=273, NOSCHEMACHECK=274, NOT=275, 
		NOWAIT=276, NULL=277, NULLS=278, NUMBER=279, NUMERIC=280, NVARCHAR2=281, 
		OBJECT=282, OFF=283, OF=284, OID=285, OLD=286, OLTP=287, ONLY=288, ON=289, 
		OPEN=290, OPTIMAL=291, OPTION=292, ORADATA=293, ORDER=294, ORDINALITY=295, 
		OR=296, OSERROR=297, OUTER=298, OUT=299, OVER=300, OVERRIDING=301, PACKAGE=302, 
		PARALLEL_ENABLE=303, PARAMETERS=304, PARENT=305, PARTITION=306, PASSING=307, 
		PATH=308, PCTFREE=309, PCTINCREASE=310, PCTUSED=311, PERCENT_FOUND=312, 
		PERCENT_ISOPEN=313, PERCENT_NOTFOUND=314, PERCENT_ROWCOUNT=315, PERCENT_ROWTYPE=316, 
		PERCENT_TYPE=317, PIPELINED=318, PIPE=319, PIVOT=320, PLAN=321, PLS_INTEGER=322, 
		POSITIVEN=323, POSITIVE=324, PRAGMA=325, PRECEDING=326, PRECISION=327, 
		PRESENT=328, PRESERVE=329, PRIMARY=330, PRIOR=331, PROCEDURE=332, PUBLIC=333, 
		QUERY=334, RAISE=335, RANGE=336, RAW=337, READ=338, REAL=339, RECORD=340, 
		RECYCLE=341, REFERENCE=342, REFERENCES=343, REFERENCING=344, REF=345, 
		REJECT=346, RELIES_ON=347, RENAME=348, REPLACE=349, RESPECT=350, RESTRICT_REFERENCES=351, 
		RESULT_CACHE=352, RESULT=353, RETURNING=354, RETURN=355, REUSE=356, REVERSE=357, 
		REVOKE=358, RIGHT=359, ROLLBACK=360, ROLLUP=361, ROWID=362, ROW=363, ROWS=364, 
		RULES=365, SAMPLE=366, SAVEPOINT=367, SAVE=368, SCHEMACHECK=369, SCHEMA=370, 
		SCN=371, SEARCH=372, SECOND=373, SEED=374, SEGMENT=375, SELECT=376, SELF=377, 
		SEQUENCE=378, SEQUENTIAL=379, SERIALIZABLE=380, SERIALLY_REUSABLE=381, 
		SERVERERROR=382, SESSIONTIMEZONE=383, SET=384, SETS=385, SETTINGS=386, 
		SHARE=387, SHOW=388, SHUTDOWN=389, SIBLINGS=390, SIGNTYPE=391, SIMPLE_INTEGER=392, 
		SINGLE=393, SIZE=394, SKIP_=395, SMALLINT=396, SNAPSHOT=397, SOME=398, 
		SPECIFICATION=399, SQLDATA=400, SQLERROR=401, STANDALONE=402, START=403, 
		STARTUP=404, STATEMENT_ID=405, STATEMENT=406, STATIC=407, STATISTICS=408, 
		STORAGE=409, STRING=410, SUBMULTISET=411, SUBPARTITION=412, SUBSTITUTABLE=413, 
		SUBTYPE=414, SUCCESS=415, SUSPEND=416, SYNONYM=417, TABLESPACE=418, TABLE=419, 
		TEMPORARY=420, THEN=421, THE=422, TIMESTAMP_LTZ_UNCONSTRAINED=423, TIMESTAMP=424, 
		TIMESTAMP_TZ_UNCONSTRAINED=425, TIMESTAMP_UNCONSTRAINED=426, TIME=427, 
		TIMEZONE_ABBR=428, TIMEZONE_HOUR=429, TIMEZONE_MINUTE=430, TIMEZONE_REGION=431, 
		TO=432, TRAILING=433, TRANSACTION=434, TRANSLATE=435, TREAT=436, TRIGGER=437, 
		TRUE=438, TRUNCATE=439, TYPE=440, UNBOUNDED=441, UNDER=442, UNION=443, 
		UNIQUE=444, UNLIMITED=445, UNPIVOT=446, UNTIL=447, UPDATED=448, UPDATE=449, 
		UPSERT=450, UROWID=451, USE=452, USING=453, VALIDATE=454, VALUES=455, 
		VALUE=456, VARCHAR2=457, VARCHAR=458, VARIABLE=459, VARRAY=460, VARYING=461, 
		VERSIONS=462, VERSION=463, WAIT=464, WARNING=465, WELLFORMED=466, WHENEVER=467, 
		WHEN=468, WHERE=469, WHILE=470, WITHIN=471, WITH=472, WORK=473, WRITE=474, 
		XMLAGG=475, XMLATTRIBUTES=476, XMLCAST=477, XMLCOLATTVAL=478, XMLELEMENT=479, 
		XMLEXISTS=480, XMLFOREST=481, XMLNAMESPACES=482, XMLPARSE=483, XMLPI=484, 
		XMLQUERY=485, XMLROOT=486, XMLSERIALIZE=487, XMLTABLE=488, XML=489, YEAR=490, 
		YES=491, YMINTERVAL_UNCONSTRAINED=492, ZONE=493, PREDICTION=494, PREDICTION_BOUNDS=495, 
		PREDICTION_COST=496, PREDICTION_DETAILS=497, PREDICTION_PROBABILITY=498, 
		PREDICTION_SET=499, CUME_DIST=500, DENSE_RANK=501, LISTAGG=502, PERCENT_RANK=503, 
		PERCENTILE_CONT=504, PERCENTILE_DISC=505, RANK=506, AVG=507, CORR=508, 
		COVAR_=509, DECODE=510, LAG=511, LEAD=512, MAX=513, MEDIAN=514, MIN=515, 
		NTILE=516, NVL=517, RATIO_TO_REPORT=518, REGR_=519, ROUND=520, ROW_NUMBER=521, 
		SUBSTR=522, TO_CHAR=523, TRIM=524, SUM=525, STDDEV=526, VAR_=527, VARIANCE=528, 
		LEAST=529, GREATEST=530, TO_DATE=531, NATIONAL_CHAR_STRING_LIT=532, BIT_STRING_LIT=533, 
		HEX_STRING_LIT=534, DOUBLE_PERIOD=535, PERIOD=536, UNSIGNED_INTEGER=537, 
		APPROXIMATE_NUM_LIT=538, CHAR_STRING=539, DELIMITED_ID=540, PERCENT=541, 
		AMPERSAND=542, LEFT_PAREN=543, RIGHT_PAREN=544, DOUBLE_ASTERISK=545, ASTERISK=546, 
		PLUS_SIGN=547, MINUS_SIGN=548, COMMA=549, SOLIDUS=550, AT_SIGN=551, ASSIGN_OP=552, 
		BINDVAR=553, NOT_EQUAL_OP=554, CARRET_OPERATOR_PART=555, TILDE_OPERATOR_PART=556, 
		EXCLAMATION_OPERATOR_PART=557, GREATER_THAN_OP=558, LESS_THAN_OP=559, 
		COLON=560, SEMICOLON=561, BAR=562, EQUALS_OP=563, LEFT_BRACKET=564, RIGHT_BRACKET=565, 
		INTRODUCER=566, SPACES=567, SINGLE_LINE_COMMENT=568, MULTI_LINE_COMMENT=569, 
		PROMPT=570, START_CMD=571, REGULAR_ID=572, ZV=573;
	public static final int
		RULE_sql_script = 0, RULE_unit_statement = 1, RULE_drop_function = 2, 
		RULE_alter_function = 3, RULE_create_function_body = 4, RULE_parallel_enable_clause = 5, 
		RULE_partition_by_clause = 6, RULE_result_cache_clause = 7, RULE_relies_on_part = 8, 
		RULE_streaming_clause = 9, RULE_drop_package = 10, RULE_alter_package = 11, 
		RULE_create_package = 12, RULE_create_package_body = 13, RULE_package_obj_spec = 14, 
		RULE_procedure_spec = 15, RULE_function_spec = 16, RULE_package_obj_body = 17, 
		RULE_drop_procedure = 18, RULE_alter_procedure = 19, RULE_function_body = 20, 
		RULE_procedure_body = 21, RULE_create_procedure_body = 22, RULE_drop_trigger = 23, 
		RULE_alter_trigger = 24, RULE_create_trigger = 25, RULE_trigger_follows_clause = 26, 
		RULE_trigger_when_clause = 27, RULE_simple_dml_trigger = 28, RULE_for_each_row = 29, 
		RULE_compound_dml_trigger = 30, RULE_non_dml_trigger = 31, RULE_trigger_body = 32, 
		RULE_routine_clause = 33, RULE_compound_trigger_block = 34, RULE_timing_point_section = 35, 
		RULE_non_dml_event = 36, RULE_dml_event_clause = 37, RULE_dml_event_element = 38, 
		RULE_dml_event_nested_clause = 39, RULE_referencing_clause = 40, RULE_referencing_element = 41, 
		RULE_drop_type = 42, RULE_alter_type = 43, RULE_compile_type_clause = 44, 
		RULE_replace_type_clause = 45, RULE_alter_method_spec = 46, RULE_alter_method_element = 47, 
		RULE_alter_attribute_definition = 48, RULE_attribute_definition = 49, 
		RULE_alter_collection_clauses = 50, RULE_dependent_handling_clause = 51, 
		RULE_dependent_exceptions_part = 52, RULE_create_type = 53, RULE_type_definition = 54, 
		RULE_object_type_def = 55, RULE_object_as_part = 56, RULE_object_under_part = 57, 
		RULE_nested_table_type_def = 58, RULE_sqlj_object_type = 59, RULE_type_body = 60, 
		RULE_type_body_elements = 61, RULE_map_order_func_declaration = 62, RULE_subprog_decl_in_type = 63, 
		RULE_proc_decl_in_type = 64, RULE_func_decl_in_type = 65, RULE_constructor_declaration = 66, 
		RULE_modifier_clause = 67, RULE_object_member_spec = 68, RULE_sqlj_object_type_attr = 69, 
		RULE_element_spec = 70, RULE_element_spec_options = 71, RULE_subprogram_spec = 72, 
		RULE_type_procedure_spec = 73, RULE_type_function_spec = 74, RULE_constructor_spec = 75, 
		RULE_map_order_function_spec = 76, RULE_pragma_clause = 77, RULE_pragma_elements = 78, 
		RULE_type_elements_parameter = 79, RULE_drop_sequence = 80, RULE_alter_sequence = 81, 
		RULE_create_sequence = 82, RULE_sequence_spec = 83, RULE_sequence_start_clause = 84, 
		RULE_create_index = 85, RULE_alter_index = 86, RULE_drop_index = 87, RULE_create_table = 88, 
		RULE_size_clause = 89, RULE_drop_table = 90, RULE_comment_on_column = 91, 
		RULE_create_synonym = 92, RULE_comment_on_table = 93, RULE_alter_table = 94, 
		RULE_add_constraint = 95, RULE_check_constraint = 96, RULE_drop_constraint = 97, 
		RULE_enable_constraint = 98, RULE_disable_constraint = 99, RULE_foreign_key_clause = 100, 
		RULE_references_clause = 101, RULE_on_delete_clause = 102, RULE_unique_key_clause = 103, 
		RULE_primary_key_clause = 104, RULE_anonymous_block = 105, RULE_invoker_rights_clause = 106, 
		RULE_compiler_parameters_clause = 107, RULE_call_spec = 108, RULE_java_spec = 109, 
		RULE_c_spec = 110, RULE_c_agent_in_clause = 111, RULE_c_parameters_clause = 112, 
		RULE_parameter = 113, RULE_default_value_part = 114, RULE_declare_spec = 115, 
		RULE_variable_declaration = 116, RULE_subtype_declaration = 117, RULE_cursor_declaration = 118, 
		RULE_parameter_spec = 119, RULE_exception_declaration = 120, RULE_pragma_declaration = 121, 
		RULE_record_type_def = 122, RULE_field_spec = 123, RULE_ref_cursor_type_def = 124, 
		RULE_type_declaration = 125, RULE_table_type_def = 126, RULE_table_indexed_by_part = 127, 
		RULE_varray_type_def = 128, RULE_seq_of_statements = 129, RULE_label_declaration = 130, 
		RULE_statement = 131, RULE_swallow_to_semi = 132, RULE_assignment_statement = 133, 
		RULE_continue_statement = 134, RULE_exit_statement = 135, RULE_goto_statement = 136, 
		RULE_if_statement = 137, RULE_elsif_part = 138, RULE_else_part = 139, 
		RULE_loop_statement = 140, RULE_cursor_loop_param = 141, RULE_forall_statement = 142, 
		RULE_bounds_clause = 143, RULE_between_bound = 144, RULE_lower_bound = 145, 
		RULE_upper_bound = 146, RULE_null_statement = 147, RULE_raise_statement = 148, 
		RULE_return_statement = 149, RULE_function_call = 150, RULE_pipe_row_statement = 151, 
		RULE_body = 152, RULE_exception_handler = 153, RULE_trigger_block = 154, 
		RULE_block = 155, RULE_sql_statement = 156, RULE_execute_immediate = 157, 
		RULE_dynamic_returning_clause = 158, RULE_data_manipulation_language_statements = 159, 
		RULE_cursor_manipulation_statements = 160, RULE_close_statement = 161, 
		RULE_open_statement = 162, RULE_fetch_statement = 163, RULE_open_for_statement = 164, 
		RULE_transaction_control_statements = 165, RULE_set_transaction_command = 166, 
		RULE_set_constraint_command = 167, RULE_commit_statement = 168, RULE_write_clause = 169, 
		RULE_rollback_statement = 170, RULE_savepoint_statement = 171, RULE_compilation_unit = 172, 
		RULE_explain_statement = 173, RULE_select_statement = 174, RULE_subquery_factoring_clause = 175, 
		RULE_factoring_element = 176, RULE_search_clause = 177, RULE_cycle_clause = 178, 
		RULE_subquery = 179, RULE_subquery_basic_elements = 180, RULE_subquery_operation_part = 181, 
		RULE_query_block = 182, RULE_selected_element = 183, RULE_from_clause = 184, 
		RULE_select_list_elements = 185, RULE_table_ref_list = 186, RULE_table_ref = 187, 
		RULE_table_ref_aux = 188, RULE_table_ref_aux_internal = 189, RULE_join_clause = 190, 
		RULE_join_on_part = 191, RULE_join_using_part = 192, RULE_outer_join_type = 193, 
		RULE_query_partition_clause = 194, RULE_flashback_query_clause = 195, 
		RULE_pivot_clause = 196, RULE_pivot_element = 197, RULE_pivot_for_clause = 198, 
		RULE_pivot_in_clause = 199, RULE_pivot_in_clause_element = 200, RULE_pivot_in_clause_elements = 201, 
		RULE_unpivot_clause = 202, RULE_unpivot_in_clause = 203, RULE_unpivot_in_elements = 204, 
		RULE_hierarchical_query_clause = 205, RULE_start_part = 206, RULE_group_by_clause = 207, 
		RULE_group_by_elements = 208, RULE_rollup_cube_clause = 209, RULE_grouping_sets_clause = 210, 
		RULE_grouping_sets_elements = 211, RULE_having_clause = 212, RULE_model_clause = 213, 
		RULE_cell_reference_options = 214, RULE_return_rows_clause = 215, RULE_reference_model = 216, 
		RULE_main_model = 217, RULE_model_column_clauses = 218, RULE_model_column_partition_part = 219, 
		RULE_model_column_list = 220, RULE_model_column = 221, RULE_model_rules_clause = 222, 
		RULE_model_rules_part = 223, RULE_model_rules_element = 224, RULE_cell_assignment = 225, 
		RULE_model_iterate_clause = 226, RULE_until_part = 227, RULE_order_by_clause = 228, 
		RULE_order_by_elements = 229, RULE_for_update_clause = 230, RULE_for_update_of_part = 231, 
		RULE_for_update_options = 232, RULE_update_statement = 233, RULE_update_set_clause = 234, 
		RULE_column_based_update_set_clause = 235, RULE_delete_statement = 236, 
		RULE_insert_statement = 237, RULE_single_table_insert = 238, RULE_multi_table_insert = 239, 
		RULE_multi_table_element = 240, RULE_conditional_insert_clause = 241, 
		RULE_conditional_insert_when_part = 242, RULE_conditional_insert_else_part = 243, 
		RULE_insert_into_clause = 244, RULE_values_clause = 245, RULE_merge_statement = 246, 
		RULE_merge_update_clause = 247, RULE_merge_element = 248, RULE_merge_update_delete_part = 249, 
		RULE_merge_insert_clause = 250, RULE_selected_tableview = 251, RULE_lock_table_statement = 252, 
		RULE_wait_nowait_part = 253, RULE_lock_table_element = 254, RULE_lock_mode = 255, 
		RULE_general_table_ref = 256, RULE_static_returning_clause = 257, RULE_error_logging_clause = 258, 
		RULE_error_logging_into_part = 259, RULE_error_logging_reject_part = 260, 
		RULE_dml_table_expression_clause = 261, RULE_table_collection_expression = 262, 
		RULE_subquery_restriction_clause = 263, RULE_sample_clause = 264, RULE_seed_part = 265, 
		RULE_condition = 266, RULE_expressions = 267, RULE_expression = 268, RULE_cursor_expression = 269, 
		RULE_logical_expression = 270, RULE_multiset_expression = 271, RULE_relational_expression = 272, 
		RULE_compound_expression = 273, RULE_relational_operator = 274, RULE_in_elements = 275, 
		RULE_between_elements = 276, RULE_concatenation = 277, RULE_interval_expression = 278, 
		RULE_model_expression = 279, RULE_model_expression_element = 280, RULE_single_column_for_loop = 281, 
		RULE_multi_column_for_loop = 282, RULE_unary_expression = 283, RULE_case_statement = 284, 
		RULE_simple_case_statement = 285, RULE_simple_case_when_part = 286, RULE_searched_case_statement = 287, 
		RULE_searched_case_when_part = 288, RULE_case_else_part = 289, RULE_atom = 290, 
		RULE_quantified_expression = 291, RULE_string_function = 292, RULE_standard_function = 293, 
		RULE_numeric_function_wrapper = 294, RULE_numeric_function = 295, RULE_other_function = 296, 
		RULE_over_clause_keyword = 297, RULE_within_or_over_clause_keyword = 298, 
		RULE_standard_prediction_function_keyword = 299, RULE_over_clause = 300, 
		RULE_windowing_clause = 301, RULE_windowing_type = 302, RULE_windowing_elements = 303, 
		RULE_using_clause = 304, RULE_using_element = 305, RULE_collect_order_by_part = 306, 
		RULE_within_or_over_part = 307, RULE_cost_matrix_clause = 308, RULE_xml_passing_clause = 309, 
		RULE_xml_attributes_clause = 310, RULE_xml_namespaces_clause = 311, RULE_xml_table_column = 312, 
		RULE_xml_general_default_part = 313, RULE_xml_multiuse_expression_element = 314, 
		RULE_xmlroot_param_version_part = 315, RULE_xmlroot_param_standalone_part = 316, 
		RULE_xmlserialize_param_enconding_part = 317, RULE_xmlserialize_param_version_part = 318, 
		RULE_xmlserialize_param_ident_part = 319, RULE_sql_plus_command = 320, 
		RULE_whenever_command = 321, RULE_set_command = 322, RULE_partition_extension_clause = 323, 
		RULE_column_alias = 324, RULE_table_alias = 325, RULE_where_clause = 326, 
		RULE_into_clause = 327, RULE_xml_column_name = 328, RULE_cost_class_name = 329, 
		RULE_attribute_name = 330, RULE_savepoint_name = 331, RULE_rollback_segment_name = 332, 
		RULE_table_var_name = 333, RULE_schema_name = 334, RULE_routine_name = 335, 
		RULE_package_name = 336, RULE_implementation_type_name = 337, RULE_parameter_name = 338, 
		RULE_reference_model_name = 339, RULE_main_model_name = 340, RULE_aggregate_function_name = 341, 
		RULE_query_name = 342, RULE_constraint_name = 343, RULE_label_name = 344, 
		RULE_type_name = 345, RULE_sequence_name = 346, RULE_exception_name = 347, 
		RULE_function_name = 348, RULE_procedure_name = 349, RULE_trigger_name = 350, 
		RULE_variable_name = 351, RULE_index_name = 352, RULE_cursor_name = 353, 
		RULE_record_name = 354, RULE_collection_name = 355, RULE_link_name = 356, 
		RULE_column_name = 357, RULE_tableview_name = 358, RULE_char_set_name = 359, 
		RULE_synonym_name = 360, RULE_schema_object_name = 361, RULE_keep_clause = 362, 
		RULE_function_argument = 363, RULE_function_argument_analytic = 364, RULE_function_argument_modeling = 365, 
		RULE_respect_or_ignore_nulls = 366, RULE_argument = 367, RULE_type_spec = 368, 
		RULE_datatype = 369, RULE_precision_part = 370, RULE_native_datatype_element = 371, 
		RULE_bind_variable = 372, RULE_general_element = 373, RULE_general_element_part = 374, 
		RULE_table_element = 375, RULE_constant = 376, RULE_numeric = 377, RULE_numeric_negative = 378, 
		RULE_quoted_string = 379, RULE_identifier = 380, RULE_id_expression = 381, 
		RULE_outer_join_sign = 382, RULE_regular_id = 383, RULE_string_function_name = 384, 
		RULE_numeric_function_name = 385;
	public static final String[] ruleNames = {
		"sql_script", "unit_statement", "drop_function", "alter_function", "create_function_body", 
		"parallel_enable_clause", "partition_by_clause", "result_cache_clause", 
		"relies_on_part", "streaming_clause", "drop_package", "alter_package", 
		"create_package", "create_package_body", "package_obj_spec", "procedure_spec", 
		"function_spec", "package_obj_body", "drop_procedure", "alter_procedure", 
		"function_body", "procedure_body", "create_procedure_body", "drop_trigger", 
		"alter_trigger", "create_trigger", "trigger_follows_clause", "trigger_when_clause", 
		"simple_dml_trigger", "for_each_row", "compound_dml_trigger", "non_dml_trigger", 
		"trigger_body", "routine_clause", "compound_trigger_block", "timing_point_section", 
		"non_dml_event", "dml_event_clause", "dml_event_element", "dml_event_nested_clause", 
		"referencing_clause", "referencing_element", "drop_type", "alter_type", 
		"compile_type_clause", "replace_type_clause", "alter_method_spec", "alter_method_element", 
		"alter_attribute_definition", "attribute_definition", "alter_collection_clauses", 
		"dependent_handling_clause", "dependent_exceptions_part", "create_type", 
		"type_definition", "object_type_def", "object_as_part", "object_under_part", 
		"nested_table_type_def", "sqlj_object_type", "type_body", "type_body_elements", 
		"map_order_func_declaration", "subprog_decl_in_type", "proc_decl_in_type", 
		"func_decl_in_type", "constructor_declaration", "modifier_clause", "object_member_spec", 
		"sqlj_object_type_attr", "element_spec", "element_spec_options", "subprogram_spec", 
		"type_procedure_spec", "type_function_spec", "constructor_spec", "map_order_function_spec", 
		"pragma_clause", "pragma_elements", "type_elements_parameter", "drop_sequence", 
		"alter_sequence", "create_sequence", "sequence_spec", "sequence_start_clause", 
		"create_index", "alter_index", "drop_index", "create_table", "size_clause", 
		"drop_table", "comment_on_column", "create_synonym", "comment_on_table", 
		"alter_table", "add_constraint", "check_constraint", "drop_constraint", 
		"enable_constraint", "disable_constraint", "foreign_key_clause", "references_clause", 
		"on_delete_clause", "unique_key_clause", "primary_key_clause", "anonymous_block", 
		"invoker_rights_clause", "compiler_parameters_clause", "call_spec", "java_spec", 
		"c_spec", "c_agent_in_clause", "c_parameters_clause", "parameter", "default_value_part", 
		"declare_spec", "variable_declaration", "subtype_declaration", "cursor_declaration", 
		"parameter_spec", "exception_declaration", "pragma_declaration", "record_type_def", 
		"field_spec", "ref_cursor_type_def", "type_declaration", "table_type_def", 
		"table_indexed_by_part", "varray_type_def", "seq_of_statements", "label_declaration", 
		"statement", "swallow_to_semi", "assignment_statement", "continue_statement", 
		"exit_statement", "goto_statement", "if_statement", "elsif_part", "else_part", 
		"loop_statement", "cursor_loop_param", "forall_statement", "bounds_clause", 
		"between_bound", "lower_bound", "upper_bound", "null_statement", "raise_statement", 
		"return_statement", "function_call", "pipe_row_statement", "body", "exception_handler", 
		"trigger_block", "block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
		"data_manipulation_language_statements", "cursor_manipulation_statements", 
		"close_statement", "open_statement", "fetch_statement", "open_for_statement", 
		"transaction_control_statements", "set_transaction_command", "set_constraint_command", 
		"commit_statement", "write_clause", "rollback_statement", "savepoint_statement", 
		"compilation_unit", "explain_statement", "select_statement", "subquery_factoring_clause", 
		"factoring_element", "search_clause", "cycle_clause", "subquery", "subquery_basic_elements", 
		"subquery_operation_part", "query_block", "selected_element", "from_clause", 
		"select_list_elements", "table_ref_list", "table_ref", "table_ref_aux", 
		"table_ref_aux_internal", "join_clause", "join_on_part", "join_using_part", 
		"outer_join_type", "query_partition_clause", "flashback_query_clause", 
		"pivot_clause", "pivot_element", "pivot_for_clause", "pivot_in_clause", 
		"pivot_in_clause_element", "pivot_in_clause_elements", "unpivot_clause", 
		"unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
		"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
		"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
		"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
		"model_column_clauses", "model_column_partition_part", "model_column_list", 
		"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
		"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
		"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
		"update_statement", "update_set_clause", "column_based_update_set_clause", 
		"delete_statement", "insert_statement", "single_table_insert", "multi_table_insert", 
		"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
		"conditional_insert_else_part", "insert_into_clause", "values_clause", 
		"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
		"merge_insert_clause", "selected_tableview", "lock_table_statement", "wait_nowait_part", 
		"lock_table_element", "lock_mode", "general_table_ref", "static_returning_clause", 
		"error_logging_clause", "error_logging_into_part", "error_logging_reject_part", 
		"dml_table_expression_clause", "table_collection_expression", "subquery_restriction_clause", 
		"sample_clause", "seed_part", "condition", "expressions", "expression", 
		"cursor_expression", "logical_expression", "multiset_expression", "relational_expression", 
		"compound_expression", "relational_operator", "in_elements", "between_elements", 
		"concatenation", "interval_expression", "model_expression", "model_expression_element", 
		"single_column_for_loop", "multi_column_for_loop", "unary_expression", 
		"case_statement", "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
		"searched_case_when_part", "case_else_part", "atom", "quantified_expression", 
		"string_function", "standard_function", "numeric_function_wrapper", "numeric_function", 
		"other_function", "over_clause_keyword", "within_or_over_clause_keyword", 
		"standard_prediction_function_keyword", "over_clause", "windowing_clause", 
		"windowing_type", "windowing_elements", "using_clause", "using_element", 
		"collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
		"xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
		"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
		"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
		"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "sql_plus_command", 
		"whenever_command", "set_command", "partition_extension_clause", "column_alias", 
		"table_alias", "where_clause", "into_clause", "xml_column_name", "cost_class_name", 
		"attribute_name", "savepoint_name", "rollback_segment_name", "table_var_name", 
		"schema_name", "routine_name", "package_name", "implementation_type_name", 
		"parameter_name", "reference_model_name", "main_model_name", "aggregate_function_name", 
		"query_name", "constraint_name", "label_name", "type_name", "sequence_name", 
		"exception_name", "function_name", "procedure_name", "trigger_name", "variable_name", 
		"index_name", "cursor_name", "record_name", "collection_name", "link_name", 
		"column_name", "tableview_name", "char_set_name", "synonym_name", "schema_object_name", 
		"keep_clause", "function_argument", "function_argument_analytic", "function_argument_modeling", 
		"respect_or_ignore_nulls", "argument", "type_spec", "datatype", "precision_part", 
		"native_datatype_element", "bind_variable", "general_element", "general_element_part", 
		"table_element", "constant", "numeric", "numeric_negative", "quoted_string", 
		"identifier", "id_expression", "outer_join_sign", "regular_id", "string_function_name", 
		"numeric_function_name"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'ADD'", "'AFTER'", "'AGENT'", "'AGGREGATE'", "'A'", "'ALL'", "'ALTER'", 
		"'ANALYZE'", "'AND'", "'ANY'", "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", 
		"'ASSOCIATE'", "'AT'", "'ATTRIBUTE'", "'AUDIT'", "'AUTHID'", "'AUTO'", 
		"'AUTOMATIC'", "'AUTONOMOUS_TRANSACTION'", "'BASIC'", "'BATCH'", "'BEFORE'", 
		"'BEGIN'", "'BETWEEN'", "'BFILE'", "'BINARY_DOUBLE'", "'BINARY_FLOAT'", 
		"'BINARY_INTEGER'", "'BLOB'", "'BLOCK'", "'BODY'", "'BOOLEAN'", "'BOTH'", 
		"'BREADTH'", "'BUFFER_POOL'", "'BULK'", "'BY'", "'BYTE'", "'CACHE'", "'CALL'", 
		"'CANONICAL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHARACTER'", "'CHAR'", 
		"'CHAR_CS'", "'CHECK'", "'CHR'", "'C'", "'CLOB'", "'CLOSE'", "'CLUSTER'", 
		"'COALESCE'", "'COLLECT'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", 
		"'COMMITTED'", "'COMPATIBILITY'", "'COMPILE'", "'COMPOUND'", "'COMPRESS'", 
		"'COMPUTE'", "'CONNECT_BY_ROOT'", "'CONNECT'", "'CONSTANT'", "'CONSTRAINT'", 
		"'CONSTRAINTS'", "'CONSTRUCTOR'", "'CONTENT'", "'CONTEXT'", "'CONTINUE'", 
		"'CONVERT'", "'CORRUPT_XID_ALL'", "'CORRUPT_XID'", "'COST'", "'COUNT'", 
		"'CREATE'", "'CREATION'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_USER'", 
		"'CURSOR'", "'CUSTOMDATUM'", "'CYCLE'", "'DATABASE'", "'DATA'", "'DATE'", 
		"'DAY'", "'DB_ROLE_CHANGE'", "'DBTIMEZONE'", "'DDL'", "'DEBUG'", "'DEC'", 
		"'DECIMAL'", "'DECLARE'", "'DECOMPOSE'", "'DECREMENT'", "'DEFAULT'", "'DEFAULTS'", 
		"'DEFERRED'", "'DEFINER'", "'DELETE'", "'DEPTH'", "'DESC'", "'DETERMINISTIC'", 
		"'DIMENSION'", "'DISABLE'", "'DISASSOCIATE'", "'DISTINCT'", "'DOCUMENT'", 
		"'DOUBLE'", "'DROP'", "'DSINTERVAL_UNCONSTRAINED'", "'EACH'", "'ELEMENT'", 
		"'ELSE'", "'ELSIF'", "'EMPTY'", "'ENABLE'", "'ENCODING'", "'ENCRYPT'", 
		"'END'", "'ENTITYESCAPING'", "'ERR'", "'ERRORS'", "'ESCAPE'", "'EVALNAME'", 
		"'EXCEPTION'", "'EXCEPTION_INIT'", "'EXCEPTIONS'", "'EXCLUDE'", "'EXCLUSIVE'", 
		"'EXECUTE'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'EXTERNAL'", "'EXTRACT'", 
		"'FAILURE'", "'FALSE'", "'FETCH'", "'FILESYSTEM_LIKE_LOGGING'", "'FINAL'", 
		"'FIRST'", "'FIRST_VALUE'", "'FLASH_CACHE'", "'FLOAT'", "'FOLLOWING'", 
		"'FOLLOWS'", "'FORALL'", "'FORCE'", "'FOREIGN'", "'FOR'", "'FREELIST'", 
		"'FREELISTS'", "'FROM'", "'FULL'", "'FUNCTION'", "'GLOBAL'", "'GOTO'", 
		"'GRANT'", "'GROUP'", "'GROUPING'", "'GROUPS'", "'HASH'", "'HAVING'", 
		"'HIDE'", "'HIGH'", "'HOUR'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'INCLUDE'", 
		"'INCLUDING'", "'INCREMENT'", "'INDENT'", "'INDEXED'", "'INDEX'", "'INDICATOR'", 
		"'INDICES'", "'INFINITE'", "'IN'", "'INITIAL'", "'INITRANS'", "'INLINE'", 
		"'INNER'", "'INOUT'", "'INSERT'", "'INSTANTIABLE'", "'INSTEAD'", "'INTEGER'", 
		"'INTERSECT'", "'INTERVAL'", "'INT'", "'INTO'", "'INVALIDATE'", "'IS'", 
		"'ISOLATION'", "'ITERATE'", "'JAVA'", "'JOIN'", "'KEEP'", "'KEY'", "'LANGUAGE'", 
		"'LAST'", "'LAST_VALUE'", "'LEADING'", "'LEFT'", "'LEVEL'", "'LIBRARY'", 
		"'LIKE2'", "'LIKE4'", "'LIKEC'", "'LIKE'", "'LIMIT'", "'LIST'", "'LOCAL'", 
		"'LOCKED'", "'LOCK'", "'LOGGING'", "'LOG'", "'LOGOFF'", "'LOGON'", "'LONG'", 
		"'LOOP'", "'LOW'", "'MAIN'", "'MAP'", "'MATCHED'", "'MAXVALUE'", "'MEASURES'", 
		"'MEMBER'", "'MERGE'", "'MINEXTENTS'", "'MINUS'", "'MINUTE'", "'MINVALUE'", 
		"'MLSLABEL'", "'MODEL'", "'MODE'", "'MODIFY'", "'MONTH'", "'MULTISET'", 
		"'NAME'", "'NAN'", "'NATURAL'", "'NATURALN'", "'NAV'", "'NCHAR_CS'", "'NCHAR'", 
		"'NCLOB'", "'NESTED'", "'NEW'", "'NEXT'", "'NOAUDIT'", "'NOCACHE'", "'NOCOMPRESS'", 
		"'NOCOPY'", "'NOCYCLE'", "'NOENTITYESCAPING'", "'NOLOGGING'", "'NOMAXVALUE'", 
		"'NOMINVALUE'", "'NONE'", "'NO'", "'NOORDER'", "'NOSCHEMACHECK'", "'NOT'", 
		"'NOWAIT'", "'NULL'", "'NULLS'", "'NUMBER'", "'NUMERIC'", "'NVARCHAR2'", 
		"'OBJECT'", "'OFF'", "'OF'", "'OID'", "'OLD'", "'OLTP'", "'ONLY'", "'ON'", 
		"'OPEN'", "'OPTIMAL'", "'OPTION'", "'ORADATA'", "'ORDER'", "'ORDINALITY'", 
		"'OR'", "'OSERROR'", "'OUTER'", "'OUT'", "'OVER'", "'OVERRIDING'", "'PACKAGE'", 
		"'PARALLEL_ENABLE'", "'PARAMETERS'", "'PARENT'", "'PARTITION'", "'PASSING'", 
		"'PATH'", "'PCTFREE'", "'PCTINCREASE'", "'PCTUSED'", "'%FOUND'", "'%ISOPEN'", 
		"'%NOTFOUND'", "'%ROWCOUNT'", "'%ROWTYPE'", "'%TYPE'", "'PIPELINED'", 
		"'PIPE'", "'PIVOT'", "'PLAN'", "'PLS_INTEGER'", "'POSITIVEN'", "'POSITIVE'", 
		"'PRAGMA'", "'PRECEDING'", "'PRECISION'", "'PRESENT'", "'PRESERVE'", "'PRIMARY'", 
		"'PRIOR'", "'PROCEDURE'", "'PUBLIC'", "'QUERY'", "'RAISE'", "'RANGE'", 
		"'RAW'", "'READ'", "'REAL'", "'RECORD'", "'RECYCLE'", "'REFERENCE'", "'REFERENCES'", 
		"'REFERENCING'", "'REF'", "'REJECT'", "'RELIES_ON'", "'RENAME'", "'REPLACE'", 
		"'RESPECT'", "'RESTRICT_REFERENCES'", "'RESULT_CACHE'", "'RESULT'", "'RETURNING'", 
		"'RETURN'", "'REUSE'", "'REVERSE'", "'REVOKE'", "'RIGHT'", "'ROLLBACK'", 
		"'ROLLUP'", "'ROWID'", "'ROW'", "'ROWS'", "'RULES'", "'SAMPLE'", "'SAVEPOINT'", 
		"'SAVE'", "'SCHEMACHECK'", "'SCHEMA'", "'SCN'", "'SEARCH'", "'SECOND'", 
		"'SEED'", "'SEGMENT'", "'SELECT'", "'SELF'", "'SEQUENCE'", "'SEQUENTIAL'", 
		"'SERIALIZABLE'", "'SERIALLY_REUSABLE'", "'SERVERERROR'", "'SESSIONTIMEZONE'", 
		"'SET'", "'SETS'", "'SETTINGS'", "'SHARE'", "'SHOW'", "'SHUTDOWN'", "'SIBLINGS'", 
		"'SIGNTYPE'", "'SIMPLE_INTEGER'", "'SINGLE'", "'SIZE'", "'SKIP'", "'SMALLINT'", 
		"'SNAPSHOT'", "'SOME'", "'SPECIFICATION'", "'SQLDATA'", "'SQLERROR'", 
		"'STANDALONE'", "'START'", "'STARTUP'", "'STATEMENT_ID'", "'STATEMENT'", 
		"'STATIC'", "'STATISTICS'", "'STORAGE'", "'STRING'", "'SUBMULTISET'", 
		"'SUBPARTITION'", "'SUBSTITUTABLE'", "'SUBTYPE'", "'SUCCESS'", "'SUSPEND'", 
		"'SYNONYM'", "'TABLESPACE'", "'TABLE'", "'TEMPORARY'", "'THEN'", "'THE'", 
		"'TIMESTAMP_LTZ_UNCONSTRAINED'", "'TIMESTAMP'", "'TIMESTAMP_TZ_UNCONSTRAINED'", 
		"'TIMESTAMP_UNCONSTRAINED'", "'TIME'", "'TIMEZONE_ABBR'", "'TIMEZONE_HOUR'", 
		"'TIMEZONE_MINUTE'", "'TIMEZONE_REGION'", "'TO'", "'TRAILING'", "'TRANSACTION'", 
		"'TRANSLATE'", "'TREAT'", "'TRIGGER'", "'TRUE'", "'TRUNCATE'", "'TYPE'", 
		"'UNBOUNDED'", "'UNDER'", "'UNION'", "'UNIQUE'", "'UNLIMITED'", "'UNPIVOT'", 
		"'UNTIL'", "'UPDATED'", "'UPDATE'", "'UPSERT'", "'UROWID'", "'USE'", "'USING'", 
		"'VALIDATE'", "'VALUES'", "'VALUE'", "'VARCHAR2'", "'VARCHAR'", "'VARIABLE'", 
		"'VARRAY'", "'VARYING'", "'VERSIONS'", "'VERSION'", "'WAIT'", "'WARNING'", 
		"'WELLFORMED'", "'WHENEVER'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITHIN'", 
		"'WITH'", "'WORK'", "'WRITE'", "'XMLAGG'", "'XMLATTRIBUTES'", "'XMLCAST'", 
		"'XMLCOLATTVAL'", "'XMLELEMENT'", "'XMLEXISTS'", "'XMLFOREST'", "'XMLNAMESPACES'", 
		"'XMLPARSE'", "'XMLPI'", "'XMLQUERY'", "'XMLROOT'", "'XMLSERIALIZE'", 
		"'XMLTABLE'", "'XML'", "'YEAR'", "'YES'", "'YMINTERVAL_UNCONSTRAINED'", 
		"'ZONE'", "'PREDICTION'", "'PREDICTION_BOUNDS'", "'PREDICTION_COST'", 
		"'PREDICTION_DETAILS'", "'PREDICTION_PROBABILITY'", "'PREDICTION_SET'", 
		"'CUME_DIST'", "'DENSE_RANK'", "'LISTAGG'", "'PERCENT_RANK'", "'PERCENTILE_CONT'", 
		"'PERCENTILE_DISC'", "'RANK'", "'AVG'", "'CORR'", "'COVAR_'", "'DECODE'", 
		"'LAG'", "'LEAD'", "'MAX'", "'MEDIAN'", "'MIN'", "'NTILE'", "'NVL'", "'RATIO_TO_REPORT'", 
		"'REGR_'", "'ROUND'", "'ROW_NUMBER'", "'SUBSTR'", "'TO_CHAR'", "'TRIM'", 
		"'SUM'", "'STDDEV'", "'VAR_'", "'VARIANCE'", "'LEAST'", "'GREATEST'", 
		"'TO_DATE'", null, null, null, "'..'", "'.'", null, null, null, null, 
		"'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", "'/'", 
		"'@'", "':='", null, null, "'^'", "'~'", "'!'", "'>'", "'<'", "':'", "';'", 
		"'|'", "'='", "'['", "']'", "'_'", null, null, null, null, null, null, 
		"'@!'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "ADD", "AFTER", "AGENT", "AGGREGATE", "A_LETTER", "ALL", "ALTER", 
		"ANALYZE", "AND", "ANY", "ARCHIVE", "ARRAY", "AS", "ASC", "ASSOCIATE", 
		"AT", "ATTRIBUTE", "AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", 
		"BASIC", "BATCH", "BEFORE", "BEGIN", "BETWEEN", "BFILE", "BINARY_DOUBLE", 
		"BINARY_FLOAT", "BINARY_INTEGER", "BLOB", "BLOCK", "BODY", "BOOLEAN", 
		"BOTH", "BREADTH", "BUFFER_POOL", "BULK", "BY", "BYTE", "CACHE", "CALL", 
		"CANONICAL", "CASCADE", "CASE", "CAST", "CHARACTER", "CHAR", "CHAR_CS", 
		"CHECK", "CHR", "C_LETTER", "CLOB", "CLOSE", "CLUSTER", "COALESCE", "COLLECT", 
		"COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPATIBILITY", 
		"COMPILE", "COMPOUND", "COMPRESS", "COMPUTE", "CONNECT_BY_ROOT", "CONNECT", 
		"CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", "CONTENT", "CONTEXT", 
		"CONTINUE", "CONVERT", "CORRUPT_XID_ALL", "CORRUPT_XID", "COST", "COUNT", 
		"CREATE", "CREATION", "CROSS", "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", 
		"CUSTOMDATUM", "CYCLE", "DATABASE", "DATA", "DATE", "DAY", "DB_ROLE_CHANGE", 
		"DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", 
		"DECREMENT", "DEFAULT", "DEFAULTS", "DEFERRED", "DEFINER", "DELETE", "DEPTH", 
		"DESC", "DETERMINISTIC", "DIMENSION", "DISABLE", "DISASSOCIATE", "DISTINCT", 
		"DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", "EACH", "ELEMENT", 
		"ELSE", "ELSIF", "EMPTY", "ENABLE", "ENCODING", "ENCRYPT", "END", "ENTITYESCAPING", 
		"ERR", "ERRORS", "ESCAPE", "EVALNAME", "EXCEPTION", "EXCEPTION_INIT", 
		"EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", 
		"EXTERNAL", "EXTRACT", "FAILURE", "FALSE", "FETCH", "FILESYSTEM_LIKE_LOGGING", 
		"FINAL", "FIRST", "FIRST_VALUE", "FLASH_CACHE", "FLOAT", "FOLLOWING", 
		"FOLLOWS", "FORALL", "FORCE", "FOREIGN", "FOR", "FREELIST", "FREELISTS", 
		"FROM", "FULL", "FUNCTION", "GLOBAL", "GOTO", "GRANT", "GROUP", "GROUPING", 
		"GROUPS", "HASH", "HAVING", "HIDE", "HIGH", "HOUR", "IF", "IGNORE", "IMMEDIATE", 
		"INCLUDE", "INCLUDING", "INCREMENT", "INDENT", "INDEXED", "INDEX", "INDICATOR", 
		"INDICES", "INFINITE", "IN", "INITIAL", "INITRANS", "INLINE", "INNER", 
		"INOUT", "INSERT", "INSTANTIABLE", "INSTEAD", "INTEGER", "INTERSECT", 
		"INTERVAL", "INT", "INTO", "INVALIDATE", "IS", "ISOLATION", "ITERATE", 
		"JAVA", "JOIN", "KEEP", "KEY", "LANGUAGE", "LAST", "LAST_VALUE", "LEADING", 
		"LEFT", "LEVEL", "LIBRARY", "LIKE2", "LIKE4", "LIKEC", "LIKE", "LIMIT", 
		"LIST", "LOCAL", "LOCKED", "LOCK", "LOGGING", "LOG", "LOGOFF", "LOGON", 
		"LONG", "LOOP", "LOW", "MAIN", "MAP", "MATCHED", "MAXVALUE", "MEASURES", 
		"MEMBER", "MERGE", "MINEXTENTS", "MINUS", "MINUTE", "MINVALUE", "MLSLABEL", 
		"MODEL", "MODE", "MODIFY", "MONTH", "MULTISET", "NAME", "NAN", "NATURAL", 
		"NATURALN", "NAV", "NCHAR_CS", "NCHAR", "NCLOB", "NESTED", "NEW", "NEXT", 
		"NOAUDIT", "NOCACHE", "NOCOMPRESS", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", 
		"NOLOGGING", "NOMAXVALUE", "NOMINVALUE", "NONE", "NO", "NOORDER", "NOSCHEMACHECK", 
		"NOT", "NOWAIT", "NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR2", "OBJECT", 
		"OFF", "OF", "OID", "OLD", "OLTP", "ONLY", "ON", "OPEN", "OPTIMAL", "OPTION", 
		"ORADATA", "ORDER", "ORDINALITY", "OR", "OSERROR", "OUTER", "OUT", "OVER", 
		"OVERRIDING", "PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", "PARENT", "PARTITION", 
		"PASSING", "PATH", "PCTFREE", "PCTINCREASE", "PCTUSED", "PERCENT_FOUND", 
		"PERCENT_ISOPEN", "PERCENT_NOTFOUND", "PERCENT_ROWCOUNT", "PERCENT_ROWTYPE", 
		"PERCENT_TYPE", "PIPELINED", "PIPE", "PIVOT", "PLAN", "PLS_INTEGER", "POSITIVEN", 
		"POSITIVE", "PRAGMA", "PRECEDING", "PRECISION", "PRESENT", "PRESERVE", 
		"PRIMARY", "PRIOR", "PROCEDURE", "PUBLIC", "QUERY", "RAISE", "RANGE", 
		"RAW", "READ", "REAL", "RECORD", "RECYCLE", "REFERENCE", "REFERENCES", 
		"REFERENCING", "REF", "REJECT", "RELIES_ON", "RENAME", "REPLACE", "RESPECT", 
		"RESTRICT_REFERENCES", "RESULT_CACHE", "RESULT", "RETURNING", "RETURN", 
		"REUSE", "REVERSE", "REVOKE", "RIGHT", "ROLLBACK", "ROLLUP", "ROWID", 
		"ROW", "ROWS", "RULES", "SAMPLE", "SAVEPOINT", "SAVE", "SCHEMACHECK", 
		"SCHEMA", "SCN", "SEARCH", "SECOND", "SEED", "SEGMENT", "SELECT", "SELF", 
		"SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", "SERIALLY_REUSABLE", "SERVERERROR", 
		"SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", "SHARE", "SHOW", "SHUTDOWN", 
		"SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", "SINGLE", "SIZE", "SKIP_", "SMALLINT", 
		"SNAPSHOT", "SOME", "SPECIFICATION", "SQLDATA", "SQLERROR", "STANDALONE", 
		"START", "STARTUP", "STATEMENT_ID", "STATEMENT", "STATIC", "STATISTICS", 
		"STORAGE", "STRING", "SUBMULTISET", "SUBPARTITION", "SUBSTITUTABLE", "SUBTYPE", 
		"SUCCESS", "SUSPEND", "SYNONYM", "TABLESPACE", "TABLE", "TEMPORARY", "THEN", 
		"THE", "TIMESTAMP_LTZ_UNCONSTRAINED", "TIMESTAMP", "TIMESTAMP_TZ_UNCONSTRAINED", 
		"TIMESTAMP_UNCONSTRAINED", "TIME", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
		"TIMEZONE_REGION", "TO", "TRAILING", "TRANSACTION", "TRANSLATE", "TREAT", 
		"TRIGGER", "TRUE", "TRUNCATE", "TYPE", "UNBOUNDED", "UNDER", "UNION", 
		"UNIQUE", "UNLIMITED", "UNPIVOT", "UNTIL", "UPDATED", "UPDATE", "UPSERT", 
		"UROWID", "USE", "USING", "VALIDATE", "VALUES", "VALUE", "VARCHAR2", "VARCHAR", 
		"VARIABLE", "VARRAY", "VARYING", "VERSIONS", "VERSION", "WAIT", "WARNING", 
		"WELLFORMED", "WHENEVER", "WHEN", "WHERE", "WHILE", "WITHIN", "WITH", 
		"WORK", "WRITE", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", 
		"XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
		"XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "XML", "YEAR", "YES", 
		"YMINTERVAL_UNCONSTRAINED", "ZONE", "PREDICTION", "PREDICTION_BOUNDS", 
		"PREDICTION_COST", "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
		"CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", 
		"PERCENTILE_DISC", "RANK", "AVG", "CORR", "COVAR_", "DECODE", "LAG", "LEAD", 
		"MAX", "MEDIAN", "MIN", "NTILE", "NVL", "RATIO_TO_REPORT", "REGR_", "ROUND", 
		"ROW_NUMBER", "SUBSTR", "TO_CHAR", "TRIM", "SUM", "STDDEV", "VAR_", "VARIANCE", 
		"LEAST", "GREATEST", "TO_DATE", "NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", 
		"HEX_STRING_LIT", "DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
		"CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", "LEFT_PAREN", "RIGHT_PAREN", 
		"DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", 
		"AT_SIGN", "ASSIGN_OP", "BINDVAR", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", 
		"TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", "GREATER_THAN_OP", 
		"LESS_THAN_OP", "COLON", "SEMICOLON", "BAR", "EQUALS_OP", "LEFT_BRACKET", 
		"RIGHT_BRACKET", "INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
		"PROMPT", "START_CMD", "REGULAR_ID", "ZV"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PlSqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PlSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(PlSqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public List<Sql_plus_commandContext> sql_plus_command() {
			return getRuleContexts(Sql_plus_commandContext.class);
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return getRuleContext(Sql_plus_commandContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PlSqlParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PlSqlParser.SEMICOLON, i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSql_script(this);
		}
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_sql_script);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << COMMENT))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (CREATE - 83)) | (1L << (DELETE - 83)) | (1L << (DROP - 83)) | (1L << (EXIT - 83)) | (1L << (EXPLAIN - 83)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (INSERT - 195)) | (1L << (LOCK - 195)) | (1L << (MERGE - 195)))) != 0) || ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & ((1L << (SELECT - 376)) | (1L << (SET - 376)) | (1L << (SHOW - 376)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (UPDATE - 449)) | (1L << (WHENEVER - 449)) | (1L << (WITH - 449)))) != 0) || ((((_la - 543)) & ~0x3f) == 0 && ((1L << (_la - 543)) & ((1L << (LEFT_PAREN - 543)) | (1L << (SOLIDUS - 543)) | (1L << (PROMPT - 543)) | (1L << (START_CMD - 543)))) != 0)) {
				{
				{
				setState(774);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALTER:
				case BEGIN:
				case COMMENT:
				case CREATE:
				case DELETE:
				case DROP:
				case EXPLAIN:
				case INSERT:
				case LOCK:
				case MERGE:
				case SELECT:
				case UPDATE:
				case WITH:
				case LEFT_PAREN:
					{
					setState(772);
					unit_statement();
					}
					break;
				case EXIT:
				case SET:
				case SHOW:
				case WHENEVER:
				case SOLIDUS:
				case PROMPT:
				case START_CMD:
					{
					setState(773);
					sql_plus_command();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMICOLON) {
					{
					setState(776);
					match(SEMICOLON);
					}
				}

				}
				}
				setState(783);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(784);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unit_statementContext extends ParserRuleContext {
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Alter_packageContext alter_package() {
			return getRuleContext(Alter_packageContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_triggerContext alter_trigger() {
			return getRuleContext(Alter_triggerContext.class,0);
		}
		public Alter_typeContext alter_type() {
			return getRuleContext(Alter_typeContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Alter_indexContext alter_index() {
			return getRuleContext(Alter_indexContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_packageContext create_package() {
			return getRuleContext(Create_packageContext.class,0);
		}
		public Create_package_bodyContext create_package_body() {
			return getRuleContext(Create_package_bodyContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Create_synonymContext create_synonym() {
			return getRuleContext(Create_synonymContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_packageContext drop_package() {
			return getRuleContext(Drop_packageContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Drop_indexContext drop_index() {
			return getRuleContext(Drop_indexContext.class,0);
		}
		public Comment_on_columnContext comment_on_column() {
			return getRuleContext(Comment_on_columnContext.class,0);
		}
		public Comment_on_tableContext comment_on_table() {
			return getRuleContext(Comment_on_tableContext.class,0);
		}
		public Anonymous_blockContext anonymous_block() {
			return getRuleContext(Anonymous_blockContext.class,0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnit_statement(this);
		}
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_unit_statement);
		try {
			setState(816);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(786);
				alter_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(787);
				alter_package();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(788);
				alter_procedure();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(789);
				alter_sequence();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(790);
				alter_trigger();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(791);
				alter_type();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(792);
				alter_table();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(793);
				alter_index();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(794);
				create_function_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(795);
				create_procedure_body();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(796);
				create_package();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(797);
				create_package_body();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(798);
				create_index();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(799);
				create_table();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(800);
				create_sequence();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(801);
				create_trigger();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(802);
				create_type();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(803);
				create_synonym();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(804);
				drop_function();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(805);
				drop_package();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(806);
				drop_procedure();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(807);
				drop_sequence();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(808);
				drop_trigger();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(809);
				drop_type();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(810);
				data_manipulation_language_statements();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(811);
				drop_table();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(812);
				drop_index();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(813);
				comment_on_column();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(814);
				comment_on_table();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(815);
				anonymous_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_function(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_drop_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(818);
			match(DROP);
			setState(819);
			match(FUNCTION);
			setState(820);
			function_name();
			setState(821);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_functionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_function(this);
		}
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_alter_function);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(823);
			match(ALTER);
			setState(824);
			match(FUNCTION);
			setState(825);
			function_name();
			setState(826);
			match(COMPILE);
			setState(828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				setState(827);
				match(DEBUG);
				}
				break;
			}
			setState(833);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(830);
					compiler_parameters_clause();
					}
					} 
				}
				setState(835);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(836);
				match(REUSE);
				setState(837);
				match(SETTINGS);
				}
			}

			setState(840);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(PlSqlParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(PlSqlParser.DETERMINISTIC, i);
		}
		public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_function_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_function_body(this);
		}
	}

	public final Create_function_bodyContext create_function_body() throws RecognitionException {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_create_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(842);
			match(CREATE);
			setState(845);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(843);
				match(OR);
				setState(844);
				match(REPLACE);
				}
			}

			setState(847);
			match(FUNCTION);
			setState(848);
			function_name();
			setState(860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(849);
				match(LEFT_PAREN);
				setState(850);
				parameter();
				setState(855);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(851);
					match(COMMA);
					setState(852);
					parameter();
					}
					}
					setState(857);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(858);
				match(RIGHT_PAREN);
				}
			}

			setState(862);
			match(RETURN);
			setState(863);
			type_spec();
			setState(870);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(868);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(864);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(865);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(866);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(867);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(872);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(893);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				{
				setState(874);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(873);
					match(PIPELINED);
					}
				}

				setState(876);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					setState(878);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(877);
						match(DECLARE);
						}
					}

					setState(883);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PROCEDURE - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
						{
						{
						setState(880);
						declare_spec();
						}
						}
						setState(885);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(886);
					body();
					}
					break;
				case 2:
					{
					setState(887);
					call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(890);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(891);
				match(USING);
				setState(892);
				implementation_type_name();
				}
				break;
			}
			setState(895);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_enable_clauseContext extends ParserRuleContext {
		public TerminalNode PARALLEL_ENABLE() { return getToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return getRuleContext(Partition_by_clauseContext.class,0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_enable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParallel_enable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParallel_enable_clause(this);
		}
	}

	public final Parallel_enable_clauseContext parallel_enable_clause() throws RecognitionException {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_parallel_enable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(897);
			match(PARALLEL_ENABLE);
			setState(899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(898);
				partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_by_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public TerminalNode LIST() { return getToken(PlSqlParser.LIST, 0); }
		public Streaming_clauseContext streaming_clause() {
			return getRuleContext(Streaming_clauseContext.class,0);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPartition_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPartition_by_clause(this);
		}
	}

	public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(901);
			match(LEFT_PAREN);
			setState(902);
			match(PARTITION);
			setState(903);
			expression();
			setState(904);
			match(BY);
			setState(918);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANY:
				{
				setState(905);
				match(ANY);
				}
				break;
			case HASH:
			case LIST:
			case RANGE:
				{
				setState(906);
				_la = _input.LA(1);
				if ( !(_la==HASH || _la==LIST || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(907);
				match(LEFT_PAREN);
				setState(908);
				column_name();
				setState(913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(909);
					match(COMMA);
					setState(910);
					column_name();
					}
					}
					setState(915);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(916);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				setState(920);
				streaming_clause();
				}
			}

			setState(923);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_cache_clauseContext extends ParserRuleContext {
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return getRuleContext(Relies_on_partContext.class,0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_cache_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterResult_cache_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitResult_cache_clause(this);
		}
	}

	public final Result_cache_clauseContext result_cache_clause() throws RecognitionException {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_result_cache_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(925);
			match(RESULT_CACHE);
			setState(927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RELIES_ON) {
				{
				setState(926);
				relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relies_on_partContext extends ParserRuleContext {
		public TerminalNode RELIES_ON() { return getToken(PlSqlParser.RELIES_ON, 0); }
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relies_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRelies_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRelies_on_part(this);
		}
	}

	public final Relies_on_partContext relies_on_part() throws RecognitionException {
		Relies_on_partContext _localctx = new Relies_on_partContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_relies_on_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(929);
			match(RELIES_ON);
			setState(930);
			match(LEFT_PAREN);
			setState(931);
			tableview_name();
			setState(936);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(932);
				match(COMMA);
				setState(933);
				tableview_name();
				}
				}
				setState(938);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(939);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Streaming_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streaming_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStreaming_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStreaming_clause(this);
		}
	}

	public final Streaming_clauseContext streaming_clause() throws RecognitionException {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_streaming_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(941);
			_la = _input.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(942);
			expression();
			setState(943);
			match(BY);
			setState(944);
			match(LEFT_PAREN);
			setState(945);
			column_name();
			setState(950);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(946);
				match(COMMA);
				setState(947);
				column_name();
				}
				}
				setState(952);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(953);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_packageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public Drop_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_package(this);
		}
	}

	public final Drop_packageContext drop_package() throws RecognitionException {
		Drop_packageContext _localctx = new Drop_packageContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_drop_package);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(955);
			match(DROP);
			setState(956);
			match(PACKAGE);
			setState(958);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				setState(957);
				match(BODY);
				}
				break;
			}
			setState(963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(960);
				schema_object_name();
				setState(961);
				match(PERIOD);
				}
				break;
			}
			setState(965);
			package_name();
			setState(966);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_packageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public List<TerminalNode> PACKAGE() { return getTokens(PlSqlParser.PACKAGE); }
		public TerminalNode PACKAGE(int i) {
			return getToken(PlSqlParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_package(this);
		}
	}

	public final Alter_packageContext alter_package() throws RecognitionException {
		Alter_packageContext _localctx = new Alter_packageContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alter_package);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(968);
			match(ALTER);
			setState(969);
			match(PACKAGE);
			setState(970);
			package_name();
			setState(971);
			match(COMPILE);
			setState(973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(972);
				match(DEBUG);
				}
				break;
			}
			setState(976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				setState(975);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(981);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(978);
					compiler_parameters_clause();
					}
					} 
				}
				setState(983);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			}
			setState(986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(984);
				match(REUSE);
				setState(985);
				match(SETTINGS);
				}
			}

			setState(988);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_packageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<Package_obj_specContext> package_obj_spec() {
			return getRuleContexts(Package_obj_specContext.class);
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return getRuleContext(Package_obj_specContext.class,i);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_package(this);
		}
	}

	public final Create_packageContext create_package() throws RecognitionException {
		Create_packageContext _localctx = new Create_packageContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_create_package);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(990);
			match(CREATE);
			setState(993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(991);
				match(OR);
				setState(992);
				match(REPLACE);
				}
			}

			setState(995);
			match(PACKAGE);
			setState(999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				setState(996);
				schema_object_name();
				setState(997);
				match(PERIOD);
				}
				break;
			}
			setState(1001);
			package_name();
			setState(1003);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1002);
				invoker_rights_clause();
				}
			}

			setState(1005);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PROCEDURE - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				{
				setState(1006);
				package_obj_spec();
				}
				}
				setState(1011);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1012);
			match(END);
			setState(1014);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(1013);
				package_name();
				}
			}

			setState(1016);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_package_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public List<Package_obj_bodyContext> package_obj_body() {
			return getRuleContexts(Package_obj_bodyContext.class);
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return getRuleContext(Package_obj_bodyContext.class,i);
		}
		public Create_package_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_package_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_package_body(this);
		}
	}

	public final Create_package_bodyContext create_package_body() throws RecognitionException {
		Create_package_bodyContext _localctx = new Create_package_bodyContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_create_package_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1018);
			match(CREATE);
			setState(1021);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1019);
				match(OR);
				setState(1020);
				match(REPLACE);
				}
			}

			setState(1023);
			match(PACKAGE);
			setState(1024);
			match(BODY);
			setState(1028);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				setState(1025);
				schema_object_name();
				setState(1026);
				match(PERIOD);
				}
				break;
			}
			setState(1030);
			package_name();
			setState(1031);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PROCEDURE - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				{
				setState(1032);
				package_obj_body();
				}
				}
				setState(1037);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1044);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN:
				{
				setState(1038);
				match(BEGIN);
				setState(1039);
				seq_of_statements();
				}
				break;
			case END:
				{
				setState(1040);
				match(END);
				setState(1042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
					{
					setState(1041);
					package_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1046);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPackage_obj_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPackage_obj_spec(this);
		}
	}

	public final Package_obj_specContext package_obj_spec() throws RecognitionException {
		Package_obj_specContext _localctx = new Package_obj_specContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_package_obj_spec);
		try {
			setState(1056);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1048);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1049);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1050);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1051);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1052);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1053);
				type_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1054);
				procedure_spec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1055);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterProcedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitProcedure_spec(this);
		}
	}

	public final Procedure_specContext procedure_spec() throws RecognitionException {
		Procedure_specContext _localctx = new Procedure_specContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1058);
			match(PROCEDURE);
			setState(1059);
			identifier();
			setState(1071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1060);
				match(LEFT_PAREN);
				setState(1061);
				parameter();
				setState(1066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1062);
					match(COMMA);
					setState(1063);
					parameter();
					}
					}
					setState(1068);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1069);
				match(RIGHT_PAREN);
				}
			}

			setState(1073);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode DETERMINISTIC() { return getToken(PlSqlParser.DETERMINISTIC, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public Function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_spec(this);
		}
	}

	public final Function_specContext function_spec() throws RecognitionException {
		Function_specContext _localctx = new Function_specContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1075);
			match(FUNCTION);
			setState(1076);
			identifier();
			setState(1088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1077);
				match(LEFT_PAREN);
				setState(1078);
				parameter();
				setState(1083);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1079);
					match(COMMA);
					setState(1080);
					parameter();
					}
					}
					setState(1085);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1086);
				match(RIGHT_PAREN);
				}
			}

			setState(1090);
			match(RETURN);
			setState(1091);
			type_spec();
			setState(1093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DETERMINISTIC) {
				{
				setState(1092);
				match(DETERMINISTIC);
				}
			}

			setState(1096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT_CACHE) {
				{
				setState(1095);
				match(RESULT_CACHE);
				}
			}

			setState(1098);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_bodyContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Procedure_bodyContext procedure_body() {
			return getRuleContext(Procedure_bodyContext.class,0);
		}
		public Function_bodyContext function_body() {
			return getRuleContext(Function_bodyContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPackage_obj_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPackage_obj_body(this);
		}
	}

	public final Package_obj_bodyContext package_obj_body() throws RecognitionException {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_package_obj_body);
		try {
			setState(1109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1100);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1101);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1102);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1103);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1104);
				type_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1105);
				procedure_body();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1106);
				function_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1107);
				procedure_spec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1108);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_procedure(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1111);
			match(DROP);
			setState(1112);
			match(PROCEDURE);
			setState(1113);
			procedure_name();
			setState(1114);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_procedure(this);
		}
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1116);
			match(ALTER);
			setState(1117);
			match(PROCEDURE);
			setState(1118);
			procedure_name();
			setState(1119);
			match(COMPILE);
			setState(1121);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				setState(1120);
				match(DEBUG);
				}
				break;
			}
			setState(1126);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1123);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1128);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			}
			setState(1131);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1129);
				match(REUSE);
				setState(1130);
				match(SETTINGS);
				}
			}

			setState(1133);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_bodyContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(PlSqlParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(PlSqlParser.DETERMINISTIC, i);
		}
		public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_body(this);
		}
	}

	public final Function_bodyContext function_body() throws RecognitionException {
		Function_bodyContext _localctx = new Function_bodyContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1135);
			match(FUNCTION);
			setState(1136);
			identifier();
			setState(1148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1137);
				match(LEFT_PAREN);
				setState(1138);
				parameter();
				setState(1143);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1139);
					match(COMMA);
					setState(1140);
					parameter();
					}
					}
					setState(1145);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1146);
				match(RIGHT_PAREN);
				}
			}

			setState(1150);
			match(RETURN);
			setState(1151);
			type_spec();
			setState(1158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(1156);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(1152);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(1153);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(1154);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(1155);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1160);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1181);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				{
				setState(1162);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(1161);
					match(PIPELINED);
					}
				}

				setState(1164);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1176);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					setState(1166);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(1165);
						match(DECLARE);
						}
					}

					setState(1171);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PROCEDURE - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
						{
						{
						setState(1168);
						declare_spec();
						}
						}
						setState(1173);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1174);
					body();
					}
					break;
				case 2:
					{
					setState(1175);
					call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(1178);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1179);
				match(USING);
				setState(1180);
				implementation_type_name();
				}
				break;
			}
			setState(1183);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_bodyContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterProcedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitProcedure_body(this);
		}
	}

	public final Procedure_bodyContext procedure_body() throws RecognitionException {
		Procedure_bodyContext _localctx = new Procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1185);
			match(PROCEDURE);
			setState(1186);
			identifier();
			setState(1198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1187);
				match(LEFT_PAREN);
				setState(1188);
				parameter();
				setState(1193);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1189);
					match(COMMA);
					setState(1190);
					parameter();
					}
					}
					setState(1195);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1196);
				match(RIGHT_PAREN);
				}
			}

			setState(1200);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1213);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				setState(1202);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1201);
					match(DECLARE);
					}
				}

				setState(1207);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PROCEDURE - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
					{
					{
					setState(1204);
					declare_spec();
					}
					}
					setState(1209);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1210);
				body();
				}
				break;
			case 2:
				{
				setState(1211);
				call_spec();
				}
				break;
			case 3:
				{
				setState(1212);
				match(EXTERNAL);
				}
				break;
			}
			setState(1215);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_procedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_procedure_body(this);
		}
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1217);
			match(CREATE);
			setState(1220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1218);
				match(OR);
				setState(1219);
				match(REPLACE);
				}
			}

			setState(1222);
			match(PROCEDURE);
			setState(1223);
			procedure_name();
			setState(1235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1224);
				match(LEFT_PAREN);
				setState(1225);
				parameter();
				setState(1230);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1226);
					match(COMMA);
					setState(1227);
					parameter();
					}
					}
					setState(1232);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1233);
				match(RIGHT_PAREN);
				}
			}

			setState(1238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1237);
				invoker_rights_clause();
				}
			}

			setState(1240);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1253);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				setState(1242);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1241);
					match(DECLARE);
					}
				}

				setState(1247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PROCEDURE - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
					{
					{
					setState(1244);
					declare_spec();
					}
					}
					setState(1249);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1250);
				body();
				}
				break;
			case 2:
				{
				setState(1251);
				call_spec();
				}
				break;
			case 3:
				{
				setState(1252);
				match(EXTERNAL);
				}
				break;
			}
			setState(1255);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_trigger(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_drop_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1257);
			match(DROP);
			setState(1258);
			match(TRIGGER);
			setState(1259);
			trigger_name();
			setState(1260);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_triggerContext extends ParserRuleContext {
		public Trigger_nameContext alter_trigger_name;
		public Trigger_nameContext rename_trigger_name;
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_trigger(this);
		}
	}

	public final Alter_triggerContext alter_trigger() throws RecognitionException {
		Alter_triggerContext _localctx = new Alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1262);
			match(ALTER);
			setState(1263);
			match(TRIGGER);
			setState(1264);
			((Alter_triggerContext)_localctx).alter_trigger_name = trigger_name();
			setState(1283);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				setState(1265);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case RENAME:
				{
				setState(1266);
				match(RENAME);
				setState(1267);
				match(TO);
				setState(1268);
				((Alter_triggerContext)_localctx).rename_trigger_name = trigger_name();
				}
				break;
			case COMPILE:
				{
				setState(1269);
				match(COMPILE);
				setState(1271);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					setState(1270);
					match(DEBUG);
					}
					break;
				}
				setState(1276);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,73,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1273);
						compiler_parameters_clause();
						}
						} 
					}
					setState(1278);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,73,_ctx);
				}
				setState(1281);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REUSE) {
					{
					setState(1279);
					match(REUSE);
					setState(1280);
					match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1285);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_triggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Trigger_bodyContext trigger_body() {
			return getRuleContext(Trigger_bodyContext.class,0);
		}
		public Simple_dml_triggerContext simple_dml_trigger() {
			return getRuleContext(Simple_dml_triggerContext.class,0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return getRuleContext(Compound_dml_triggerContext.class,0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return getRuleContext(Non_dml_triggerContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return getRuleContext(Trigger_follows_clauseContext.class,0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return getRuleContext(Trigger_when_clauseContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_trigger(this);
		}
	}

	public final Create_triggerContext create_trigger() throws RecognitionException {
		Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_create_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1287);
			match(CREATE);
			setState(1290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1288);
				match(OR);
				setState(1289);
				match(REPLACE);
				}
			}

			setState(1292);
			match(TRIGGER);
			setState(1293);
			trigger_name();
			setState(1297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				setState(1294);
				simple_dml_trigger();
				}
				break;
			case 2:
				{
				setState(1295);
				compound_dml_trigger();
				}
				break;
			case 3:
				{
				setState(1296);
				non_dml_trigger();
				}
				break;
			}
			setState(1300);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				setState(1299);
				trigger_follows_clause();
				}
				break;
			}
			setState(1303);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				setState(1302);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1305);
				trigger_when_clause();
				}
			}

			setState(1308);
			trigger_body();
			setState(1309);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_follows_clauseContext extends ParserRuleContext {
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_follows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTrigger_follows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTrigger_follows_clause(this);
		}
	}

	public final Trigger_follows_clauseContext trigger_follows_clause() throws RecognitionException {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_trigger_follows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1311);
			match(FOLLOWS);
			setState(1312);
			trigger_name();
			setState(1317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1313);
				match(COMMA);
				setState(1314);
				trigger_name();
				}
				}
				setState(1319);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_when_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTrigger_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTrigger_when_clause(this);
		}
	}

	public final Trigger_when_clauseContext trigger_when_clause() throws RecognitionException {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_trigger_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1320);
			match(WHEN);
			setState(1321);
			match(LEFT_PAREN);
			setState(1322);
			condition();
			setState(1323);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_dml_triggerContext extends ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(PlSqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public For_each_rowContext for_each_row() {
			return getRuleContext(For_each_rowContext.class,0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSimple_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSimple_dml_trigger(this);
		}
	}

	public final Simple_dml_triggerContext simple_dml_trigger() throws RecognitionException {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_simple_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1329);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(1325);
				match(BEFORE);
				}
				break;
			case AFTER:
				{
				setState(1326);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(1327);
				match(INSTEAD);
				setState(1328);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1331);
			dml_event_clause();
			setState(1333);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				setState(1332);
				referencing_clause();
				}
				break;
			}
			setState(1336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1335);
				for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_each_rowContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(PlSqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_each_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFor_each_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFor_each_row(this);
		}
	}

	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1338);
			match(FOR);
			setState(1339);
			match(EACH);
			setState(1340);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_dml_triggerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompound_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompound_dml_trigger(this);
		}
	}

	public final Compound_dml_triggerContext compound_dml_trigger() throws RecognitionException {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_compound_dml_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1342);
			match(FOR);
			setState(1343);
			dml_event_clause();
			setState(1345);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				setState(1344);
				referencing_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_triggerContext extends ParserRuleContext {
		public List<Non_dml_eventContext> non_dml_event() {
			return getRuleContexts(Non_dml_eventContext.class);
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return getRuleContext(Non_dml_eventContext.class,i);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNon_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNon_dml_trigger(this);
		}
	}

	public final Non_dml_triggerContext non_dml_trigger() throws RecognitionException {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_non_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1347);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1348);
			non_dml_event();
			setState(1353);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1349);
				match(OR);
				setState(1350);
				non_dml_event();
				}
				}
				setState(1355);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1356);
			match(ON);
			setState(1364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				setState(1357);
				match(DATABASE);
				}
				break;
			case 2:
				{
				setState(1361);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
				case 1:
					{
					setState(1358);
					schema_name();
					setState(1359);
					match(PERIOD);
					}
					break;
				}
				setState(1363);
				match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_bodyContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTrigger_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTrigger_body(this);
		}
	}

	public final Trigger_bodyContext trigger_body() throws RecognitionException {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_trigger_body);
		try {
			setState(1371);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1366);
				match(COMPOUND);
				setState(1367);
				match(TRIGGER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1368);
				match(CALL);
				setState(1369);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1370);
				trigger_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_clauseContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRoutine_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRoutine_clause(this);
		}
	}

	public final Routine_clauseContext routine_clause() throws RecognitionException {
		Routine_clauseContext _localctx = new Routine_clauseContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_routine_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1373);
			routine_name();
			setState(1375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1374);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_trigger_blockContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<Timing_point_sectionContext> timing_point_section() {
			return getRuleContexts(Timing_point_sectionContext.class);
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return getRuleContext(Timing_point_sectionContext.class,i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompound_trigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompound_trigger_block(this);
		}
	}

	public final Compound_trigger_blockContext compound_trigger_block() throws RecognitionException {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_compound_trigger_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1377);
			match(COMPOUND);
			setState(1378);
			match(TRIGGER);
			setState(1382);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,91,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1379);
					declare_spec();
					}
					} 
				}
				setState(1384);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,91,_ctx);
			}
			setState(1386); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1385);
				timing_point_section();
				}
				}
				setState(1388); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			setState(1390);
			match(END);
			setState(1391);
			trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timing_point_sectionContext extends ParserRuleContext {
		public Token bk;
		public Token ak;
		public List<TerminalNode> STATEMENT() { return getTokens(PlSqlParser.STATEMENT); }
		public TerminalNode STATEMENT(int i) {
			return getToken(PlSqlParser.STATEMENT, i);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public List<TerminalNode> BEFORE() { return getTokens(PlSqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(PlSqlParser.BEFORE, i);
		}
		public List<TerminalNode> EACH() { return getTokens(PlSqlParser.EACH); }
		public TerminalNode EACH(int i) {
			return getToken(PlSqlParser.EACH, i);
		}
		public List<TerminalNode> ROW() { return getTokens(PlSqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(PlSqlParser.ROW, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(PlSqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(PlSqlParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timing_point_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTiming_point_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTiming_point_section(this);
		}
	}

	public final Timing_point_sectionContext timing_point_section() throws RecognitionException {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_timing_point_section);
		try {
			setState(1429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1393);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1394);
				match(STATEMENT);
				setState(1395);
				match(IS);
				setState(1396);
				trigger_block();
				setState(1397);
				match(BEFORE);
				setState(1398);
				match(STATEMENT);
				setState(1399);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1401);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1402);
				match(EACH);
				setState(1403);
				match(ROW);
				setState(1404);
				match(IS);
				setState(1405);
				trigger_block();
				setState(1406);
				match(BEFORE);
				setState(1407);
				match(EACH);
				setState(1408);
				match(ROW);
				setState(1409);
				match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1411);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1412);
				match(STATEMENT);
				setState(1413);
				match(IS);
				setState(1414);
				trigger_block();
				setState(1415);
				match(AFTER);
				setState(1416);
				match(STATEMENT);
				setState(1417);
				match(SEMICOLON);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1419);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1420);
				match(EACH);
				setState(1421);
				match(ROW);
				setState(1422);
				match(IS);
				setState(1423);
				trigger_block();
				setState(1424);
				match(AFTER);
				setState(1425);
				match(EACH);
				setState(1426);
				match(ROW);
				setState(1427);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_eventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PlSqlParser.ASSOCIATE, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(PlSqlParser.DISASSOCIATE, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
		public TerminalNode NOAUDIT() { return getToken(PlSqlParser.NOAUDIT, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode REVOKE() { return getToken(PlSqlParser.REVOKE, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode DDL() { return getToken(PlSqlParser.DDL, 0); }
		public TerminalNode STARTUP() { return getToken(PlSqlParser.STARTUP, 0); }
		public TerminalNode SHUTDOWN() { return getToken(PlSqlParser.SHUTDOWN, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode LOGON() { return getToken(PlSqlParser.LOGON, 0); }
		public TerminalNode LOGOFF() { return getToken(PlSqlParser.LOGOFF, 0); }
		public TerminalNode SERVERERROR() { return getToken(PlSqlParser.SERVERERROR, 0); }
		public TerminalNode SUSPEND() { return getToken(PlSqlParser.SUSPEND, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNon_dml_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNon_dml_event(this);
		}
	}

	public final Non_dml_eventContext non_dml_event() throws RecognitionException {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_non_dml_event);
		try {
			setState(1457);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1431);
				match(ALTER);
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1432);
				match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1433);
				match(ASSOCIATE);
				setState(1434);
				match(STATISTICS);
				}
				break;
			case AUDIT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1435);
				match(AUDIT);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1436);
				match(COMMENT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1437);
				match(CREATE);
				}
				break;
			case DISASSOCIATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1438);
				match(DISASSOCIATE);
				setState(1439);
				match(STATISTICS);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 8);
				{
				setState(1440);
				match(DROP);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1441);
				match(GRANT);
				}
				break;
			case NOAUDIT:
				enterOuterAlt(_localctx, 10);
				{
				setState(1442);
				match(NOAUDIT);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 11);
				{
				setState(1443);
				match(RENAME);
				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 12);
				{
				setState(1444);
				match(REVOKE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 13);
				{
				setState(1445);
				match(TRUNCATE);
				}
				break;
			case DDL:
				enterOuterAlt(_localctx, 14);
				{
				setState(1446);
				match(DDL);
				}
				break;
			case STARTUP:
				enterOuterAlt(_localctx, 15);
				{
				setState(1447);
				match(STARTUP);
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 16);
				{
				setState(1448);
				match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				enterOuterAlt(_localctx, 17);
				{
				setState(1449);
				match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				enterOuterAlt(_localctx, 18);
				{
				setState(1450);
				match(LOGON);
				}
				break;
			case LOGOFF:
				enterOuterAlt(_localctx, 19);
				{
				setState(1451);
				match(LOGOFF);
				}
				break;
			case SERVERERROR:
				enterOuterAlt(_localctx, 20);
				{
				setState(1452);
				match(SERVERERROR);
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 21);
				{
				setState(1453);
				match(SUSPEND);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 22);
				{
				setState(1454);
				match(DATABASE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 23);
				{
				setState(1455);
				match(SCHEMA);
				}
				break;
			case FOLLOWS:
				enterOuterAlt(_localctx, 24);
				{
				setState(1456);
				match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_clauseContext extends ParserRuleContext {
		public List<Dml_event_elementContext> dml_event_element() {
			return getRuleContexts(Dml_event_elementContext.class);
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return getRuleContext(Dml_event_elementContext.class,i);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return getRuleContext(Dml_event_nested_clauseContext.class,0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDml_event_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDml_event_clause(this);
		}
	}

	public final Dml_event_clauseContext dml_event_clause() throws RecognitionException {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_dml_event_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1459);
			dml_event_element();
			setState(1464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1460);
				match(OR);
				setState(1461);
				dml_event_element();
				}
				}
				setState(1466);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1467);
			match(ON);
			setState(1469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
			case 1:
				{
				setState(1468);
				dml_event_nested_clause();
				}
				break;
			}
			setState(1471);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_elementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDml_event_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDml_event_element(this);
		}
	}

	public final Dml_event_elementContext dml_event_element() throws RecognitionException {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_dml_event_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1473);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1483);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(1474);
				match(OF);
				setState(1475);
				column_name();
				setState(1480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1476);
					match(COMMA);
					setState(1477);
					column_name();
					}
					}
					setState(1482);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_nested_clauseContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_nested_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDml_event_nested_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDml_event_nested_clause(this);
		}
	}

	public final Dml_event_nested_clauseContext dml_event_nested_clause() throws RecognitionException {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_dml_event_nested_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1485);
			match(NESTED);
			setState(1486);
			match(TABLE);
			setState(1487);
			tableview_name();
			setState(1488);
			match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(PlSqlParser.REFERENCING, 0); }
		public List<Referencing_elementContext> referencing_element() {
			return getRuleContexts(Referencing_elementContext.class);
		}
		public Referencing_elementContext referencing_element(int i) {
			return getRuleContext(Referencing_elementContext.class,i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReferencing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReferencing_clause(this);
		}
	}

	public final Referencing_clauseContext referencing_clause() throws RecognitionException {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_referencing_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1490);
			match(REFERENCING);
			setState(1492); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1491);
					referencing_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1494); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,99,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_elementContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(PlSqlParser.OLD, 0); }
		public TerminalNode PARENT() { return getToken(PlSqlParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReferencing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReferencing_element(this);
		}
	}

	public final Referencing_elementContext referencing_element() throws RecognitionException {
		Referencing_elementContext _localctx = new Referencing_elementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_referencing_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1496);
			_la = _input.LA(1);
			if ( !(((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (NEW - 260)) | (1L << (OLD - 260)) | (1L << (PARENT - 260)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1497);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_type(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1499);
			match(DROP);
			setState(1500);
			match(TYPE);
			setState(1502);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				setState(1501);
				match(BODY);
				}
				break;
			}
			setState(1504);
			type_name();
			setState(1506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				setState(1505);
				_la = _input.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1508);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_typeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Compile_type_clauseContext compile_type_clause() {
			return getRuleContext(Compile_type_clauseContext.class,0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return getRuleContext(Replace_type_clauseContext.class,0);
		}
		public Alter_method_specContext alter_method_spec() {
			return getRuleContext(Alter_method_specContext.class,0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return getRuleContext(Alter_collection_clausesContext.class,0);
		}
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return getRuleContext(Dependent_handling_clauseContext.class,0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_type(this);
		}
	}

	public final Alter_typeContext alter_type() throws RecognitionException {
		Alter_typeContext _localctx = new Alter_typeContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_alter_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1510);
			match(ALTER);
			setState(1511);
			match(TYPE);
			setState(1512);
			type_name();
			setState(1518);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPILE:
				{
				setState(1513);
				compile_type_clause();
				}
				break;
			case REPLACE:
				{
				setState(1514);
				replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				setState(1515);
				alter_method_spec();
				}
				break;
			case MODIFY:
				{
				setState(1516);
				alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				setState(1517);
				modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				setState(1520);
				dependent_handling_clause();
				}
			}

			setState(1523);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compile_type_clauseContext extends ParserRuleContext {
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compile_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompile_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompile_type_clause(this);
		}
	}

	public final Compile_type_clauseContext compile_type_clause() throws RecognitionException {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1525);
			match(COMPILE);
			setState(1527);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				setState(1526);
				match(DEBUG);
				}
				break;
			}
			setState(1530);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				setState(1529);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1535);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,106,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1532);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1537);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,106,_ctx);
			}
			setState(1540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1538);
				match(REUSE);
				setState(1539);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_type_clauseContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReplace_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReplace_type_clause(this);
		}
	}

	public final Replace_type_clauseContext replace_type_clause() throws RecognitionException {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_replace_type_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1542);
			match(REPLACE);
			setState(1544);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1543);
				invoker_rights_clause();
				}
			}

			setState(1546);
			match(AS);
			setState(1547);
			match(OBJECT);
			setState(1548);
			match(LEFT_PAREN);
			setState(1549);
			object_member_spec();
			setState(1554);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1550);
				match(COMMA);
				setState(1551);
				object_member_spec();
				}
				}
				setState(1556);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1557);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_specContext extends ParserRuleContext {
		public List<Alter_method_elementContext> alter_method_element() {
			return getRuleContexts(Alter_method_elementContext.class);
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return getRuleContext(Alter_method_elementContext.class,i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_method_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_method_spec(this);
		}
	}

	public final Alter_method_specContext alter_method_spec() throws RecognitionException {
		Alter_method_specContext _localctx = new Alter_method_specContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_alter_method_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1559);
			alter_method_element();
			setState(1564);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1560);
				match(COMMA);
				setState(1561);
				alter_method_element();
				}
				}
				setState(1566);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_elementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_method_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_method_element(this);
		}
	}

	public final Alter_method_elementContext alter_method_element() throws RecognitionException {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_alter_method_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1567);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1570);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				{
				setState(1568);
				map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				setState(1569);
				subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE() { return getToken(PlSqlParser.ATTRIBUTE, 0); }
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_attribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_attribute_definition(this);
		}
	}

	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1572);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1573);
			match(ATTRIBUTE);
			setState(1586);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1574);
				attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(1575);
				match(LEFT_PAREN);
				setState(1576);
				attribute_definition();
				setState(1581);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1577);
					match(COMMA);
					setState(1578);
					attribute_definition();
					}
					}
					setState(1583);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1584);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_definitionContext extends ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAttribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAttribute_definition(this);
		}
	}

	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1588);
			attribute_name();
			setState(1590);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(1589);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_collection_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_collection_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_collection_clauses(this);
		}
	}

	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1592);
			match(MODIFY);
			setState(1598);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(1593);
				match(LIMIT);
				setState(1594);
				expression();
				}
				break;
			case ELEMENT:
				{
				setState(1595);
				match(ELEMENT);
				setState(1596);
				match(TYPE);
				setState(1597);
				type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		public TerminalNode INVALIDATE() { return getToken(PlSqlParser.INVALIDATE, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode CONVERT() { return getToken(PlSqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDependent_handling_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDependent_handling_clause(this);
		}
	}

	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(1616);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1600);
				match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1601);
				match(CASCADE);
				setState(1611);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(1602);
					match(CONVERT);
					setState(1603);
					match(TO);
					setState(1604);
					match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(1606);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(1605);
						match(NOT);
						}
					}

					setState(1608);
					match(INCLUDING);
					setState(1609);
					match(TABLE);
					setState(1610);
					match(DATA);
					}
					break;
				case EXCEPTIONS:
				case FORCE:
				case SEMICOLON:
					break;
				default:
					break;
				}
				setState(1614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(1613);
					dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDependent_exceptions_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDependent_exceptions_part(this);
		}
	}

	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1619);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(1618);
				match(FORCE);
				}
			}

			setState(1621);
			match(EXCEPTIONS);
			setState(1622);
			match(INTO);
			setState(1623);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return getRuleContext(Type_definitionContext.class,0);
		}
		public Type_bodyContext type_body() {
			return getRuleContext(Type_bodyContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_type(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1625);
			match(CREATE);
			setState(1628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1626);
				match(OR);
				setState(1627);
				match(REPLACE);
				}
			}

			setState(1630);
			match(TYPE);
			setState(1633);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				{
				setState(1631);
				type_definition();
				}
				break;
			case 2:
				{
				setState(1632);
				type_body();
				}
				break;
			}
			setState(1635);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_definitionContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_definition(this);
		}
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1637);
			type_name();
			setState(1640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(1638);
				match(OID);
				setState(1639);
				match(CHAR_STRING);
				}
			}

			setState(1643);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(1642);
				object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_defContext extends ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterObject_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitObject_type_def(this);
		}
	}

	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1646);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1645);
				invoker_rights_clause();
				}
			}

			setState(1650);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1648);
				object_as_part();
				}
				break;
			case UNDER:
				{
				setState(1649);
				object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(1652);
				sqlj_object_type();
				}
			}

			setState(1666);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1655);
				match(LEFT_PAREN);
				setState(1656);
				object_member_spec();
				setState(1661);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1657);
					match(COMMA);
					setState(1658);
					object_member_spec();
					}
					}
					setState(1663);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1664);
				match(RIGHT_PAREN);
				}
			}

			setState(1671);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(1668);
				modifier_clause();
				}
				}
				setState(1673);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_as_partContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_as_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterObject_as_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitObject_as_part(this);
		}
	}

	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_object_as_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1674);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1678);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(1675);
				match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(1676);
				varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(1677);
				nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_under_partContext extends ParserRuleContext {
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_under_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterObject_under_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitObject_under_part(this);
		}
	}

	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1680);
			match(UNDER);
			setState(1681);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNested_table_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNested_table_type_def(this);
		}
	}

	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1683);
			match(TABLE);
			setState(1684);
			match(OF);
			setState(1685);
			type_spec();
			setState(1688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				setState(1686);
				match(NOT);
				setState(1687);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_typeContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode SQLDATA() { return getToken(PlSqlParser.SQLDATA, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(PlSqlParser.CUSTOMDATUM, 0); }
		public TerminalNode ORADATA() { return getToken(PlSqlParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSqlj_object_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSqlj_object_type(this);
		}
	}

	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1690);
			match(EXTERNAL);
			setState(1691);
			match(NAME);
			setState(1692);
			expression();
			setState(1693);
			match(LANGUAGE);
			setState(1694);
			match(JAVA);
			setState(1695);
			match(USING);
			setState(1696);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_body(this);
		}
	}

	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1698);
			match(BODY);
			setState(1699);
			type_name();
			setState(1700);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1702); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1701);
				type_body_elements();
				}
				}
				setState(1704); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 235)) & ~0x3f) == 0 && ((1L << (_la - 235)) & ((1L << (MAP - 235)) | (1L << (MEMBER - 235)) | (1L << (ORDER - 235)))) != 0) || _la==STATIC );
			setState(1706);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_body_elementsContext extends ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_body_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_body_elements(this);
		}
	}

	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_type_body_elements);
		try {
			setState(1710);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1708);
				map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(1709);
				subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_func_declarationContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMap_order_func_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMap_order_func_declaration(this);
		}
	}

	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1712);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1713);
			match(MEMBER);
			setState(1714);
			func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubprog_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubprog_decl_in_type(this);
		}
	}

	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1716);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1720);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1717);
				proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(1718);
				func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(1719);
				constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterProc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitProc_decl_in_type(this);
		}
	}

	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_proc_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1722);
			match(PROCEDURE);
			setState(1723);
			procedure_name();
			setState(1724);
			match(LEFT_PAREN);
			setState(1725);
			type_elements_parameter();
			setState(1730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1726);
				match(COMMA);
				setState(1727);
				type_elements_parameter();
				}
				}
				setState(1732);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1733);
			match(RIGHT_PAREN);
			setState(1734);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1748);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
			case 1:
				{
				setState(1735);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1737);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1736);
					match(DECLARE);
					}
				}

				setState(1742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PROCEDURE - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
					{
					{
					setState(1739);
					declare_spec();
					}
					}
					setState(1744);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1745);
				body();
				setState(1746);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunc_decl_in_type(this);
		}
	}

	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_func_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1750);
			match(FUNCTION);
			setState(1751);
			function_name();
			setState(1763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1752);
				match(LEFT_PAREN);
				setState(1753);
				type_elements_parameter();
				setState(1758);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1754);
					match(COMMA);
					setState(1755);
					type_elements_parameter();
					}
					}
					setState(1760);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1761);
				match(RIGHT_PAREN);
				}
			}

			setState(1765);
			match(RETURN);
			setState(1766);
			type_spec();
			setState(1767);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				setState(1768);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1770);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1769);
					match(DECLARE);
					}
				}

				setState(1775);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PROCEDURE - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
					{
					{
					setState(1772);
					declare_spec();
					}
					}
					setState(1777);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1778);
				body();
				setState(1779);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declarationContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(PlSqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(PlSqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(PlSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PlSqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConstructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConstructor_declaration(this);
		}
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1783);
				match(FINAL);
				}
			}

			setState(1787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1786);
				match(INSTANTIABLE);
				}
			}

			setState(1789);
			match(CONSTRUCTOR);
			setState(1790);
			match(FUNCTION);
			setState(1791);
			type_spec();
			setState(1809);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1792);
				match(LEFT_PAREN);
				{
				setState(1793);
				match(SELF);
				setState(1794);
				match(IN);
				setState(1795);
				match(OUT);
				setState(1796);
				type_spec();
				setState(1797);
				match(COMMA);
				}
				setState(1799);
				type_elements_parameter();
				setState(1804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1800);
					match(COMMA);
					setState(1801);
					type_elements_parameter();
					}
					}
					setState(1806);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1807);
				match(RIGHT_PAREN);
				}
			}

			setState(1811);
			match(RETURN);
			setState(1812);
			match(SELF);
			setState(1813);
			match(AS);
			setState(1814);
			match(RESULT);
			setState(1815);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				setState(1816);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1818);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1817);
					match(DECLARE);
					}
				}

				setState(1823);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PROCEDURE - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
					{
					{
					setState(1820);
					declare_spec();
					}
					}
					setState(1825);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1826);
				body();
				setState(1827);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modifier_clauseContext extends ParserRuleContext {
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode OVERRIDING() { return getToken(PlSqlParser.OVERRIDING, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModifier_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModifier_clause(this);
		}
	}

	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1831);
				match(NOT);
				}
			}

			setState(1834);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_member_specContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterObject_member_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitObject_member_spec(this);
		}
	}

	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_object_member_spec);
		int _la;
		try {
			setState(1842);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1836);
				identifier();
				setState(1837);
				type_spec();
				setState(1839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(1838);
					sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1841);
				element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSqlj_object_type_attr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSqlj_object_type_attr(this);
		}
	}

	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1844);
			match(EXTERNAL);
			setState(1845);
			match(NAME);
			setState(1846);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_specContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterElement_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitElement_spec(this);
		}
	}

	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1849);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				setState(1848);
				modifier_clause();
				}
				break;
			}
			setState(1852); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1851);
				element_spec_options();
				}
				}
				setState(1854); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || ((((_la - 235)) & ~0x3f) == 0 && ((1L << (_la - 235)) & ((1L << (MAP - 235)) | (1L << (MEMBER - 235)) | (1L << (ORDER - 235)))) != 0) || _la==STATIC );
			setState(1858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				{
				setState(1856);
				match(COMMA);
				setState(1857);
				pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_spec_optionsContext extends ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterElement_spec_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitElement_spec_options(this);
		}
	}

	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_element_spec_options);
		try {
			setState(1863);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1860);
				subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1861);
				constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1862);
				map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprogram_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubprogram_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubprogram_spec(this);
		}
	}

	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1865);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1868);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1866);
				type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(1867);
				type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_procedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_procedure_spec(this);
		}
	}

	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1870);
			match(PROCEDURE);
			setState(1871);
			procedure_name();
			setState(1872);
			match(LEFT_PAREN);
			setState(1873);
			type_elements_parameter();
			setState(1878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1874);
				match(COMMA);
				setState(1875);
				type_elements_parameter();
				}
				}
				setState(1880);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1881);
			match(RIGHT_PAREN);
			setState(1884);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1882);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1883);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SELF() { return getToken(PlSqlParser.SELF, 0); }
		public List<TerminalNode> AS() { return getTokens(PlSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PlSqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode VARIABLE() { return getToken(PlSqlParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_function_spec(this);
		}
	}

	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1886);
			match(FUNCTION);
			setState(1887);
			function_name();
			setState(1899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1888);
				match(LEFT_PAREN);
				setState(1889);
				type_elements_parameter();
				setState(1894);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1890);
					match(COMMA);
					setState(1891);
					type_elements_parameter();
					}
					}
					setState(1896);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1897);
				match(RIGHT_PAREN);
				}
			}

			setState(1901);
			match(RETURN);
			setState(1906);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				setState(1902);
				type_spec();
				}
				break;
			case 2:
				{
				setState(1903);
				match(SELF);
				setState(1904);
				match(AS);
				setState(1905);
				match(RESULT);
				}
				break;
			}
			setState(1916);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1908);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1909);
				call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(1910);
				match(EXTERNAL);
				setState(1912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(1911);
					match(VARIABLE);
					}
				}

				setState(1914);
				match(NAME);
				setState(1915);
				expression();
				}
				break;
			case CASCADE:
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case INVALIDATE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_specContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(PlSqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(PlSqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(PlSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PlSqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConstructor_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConstructor_spec(this);
		}
	}

	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1918);
				match(FINAL);
				}
			}

			setState(1922);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1921);
				match(INSTANTIABLE);
				}
			}

			setState(1924);
			match(CONSTRUCTOR);
			setState(1925);
			match(FUNCTION);
			setState(1926);
			type_spec();
			setState(1944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1927);
				match(LEFT_PAREN);
				{
				setState(1928);
				match(SELF);
				setState(1929);
				match(IN);
				setState(1930);
				match(OUT);
				setState(1931);
				type_spec();
				setState(1932);
				match(COMMA);
				}
				setState(1934);
				type_elements_parameter();
				setState(1939);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1935);
					match(COMMA);
					setState(1936);
					type_elements_parameter();
					}
					}
					setState(1941);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1942);
				match(RIGHT_PAREN);
				}
			}

			setState(1946);
			match(RETURN);
			setState(1947);
			match(SELF);
			setState(1948);
			match(AS);
			setState(1949);
			match(RESULT);
			setState(1952);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1950);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1951);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_function_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMap_order_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMap_order_function_spec(this);
		}
	}

	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1954);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1955);
			match(MEMBER);
			setState(1956);
			type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_clauseContext extends ParserRuleContext {
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPragma_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPragma_clause(this);
		}
	}

	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1958);
			match(PRAGMA);
			setState(1959);
			match(RESTRICT_REFERENCES);
			setState(1960);
			match(LEFT_PAREN);
			setState(1961);
			pragma_elements();
			setState(1966);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1962);
				match(COMMA);
				setState(1963);
				pragma_elements();
				}
				}
				setState(1968);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1969);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_elementsContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPragma_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPragma_elements(this);
		}
	}

	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_pragma_elements);
		try {
			setState(1973);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1971);
				identifier();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1972);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_elements_parameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_elements_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_elements_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_elements_parameter(this);
		}
	}

	public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_type_elements_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1975);
			parameter_name();
			setState(1976);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_sequence(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_drop_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1978);
			match(DROP);
			setState(1979);
			match(SEQUENCE);
			setState(1980);
			sequence_name();
			setState(1981);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_sequence(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1983);
			match(ALTER);
			setState(1984);
			match(SEQUENCE);
			setState(1985);
			sequence_name();
			setState(1987); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1986);
				sequence_spec();
				}
				}
				setState(1989); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CACHE || _la==CYCLE || ((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (INCREMENT - 182)) | (1L << (MAXVALUE - 182)) | (1L << (MINVALUE - 182)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (NOCACHE - 263)) | (1L << (NOCYCLE - 263)) | (1L << (NOMAXVALUE - 263)) | (1L << (NOMINVALUE - 263)) | (1L << (NOORDER - 263)) | (1L << (ORDER - 263)))) != 0) );
			setState(1991);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_start_clauseContext> sequence_start_clause() {
			return getRuleContexts(Sequence_start_clauseContext.class);
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return getRuleContext(Sequence_start_clauseContext.class,i);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_sequence(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1993);
			match(CREATE);
			setState(1994);
			match(SEQUENCE);
			setState(1995);
			sequence_name();
			setState(2000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || ((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (INCREMENT - 182)) | (1L << (MAXVALUE - 182)) | (1L << (MINVALUE - 182)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (NOCACHE - 263)) | (1L << (NOCYCLE - 263)) | (1L << (NOMAXVALUE - 263)) | (1L << (NOMINVALUE - 263)) | (1L << (NOORDER - 263)) | (1L << (ORDER - 263)))) != 0) || _la==START) {
				{
				setState(1998);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case START:
					{
					setState(1996);
					sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					setState(1997);
					sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2002);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2003);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_specContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(PlSqlParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(PlSqlParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PlSqlParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(PlSqlParser.NOORDER, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSequence_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSequence_spec(this);
		}
	}

	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_sequence_spec);
		try {
			setState(2021);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2005);
				match(INCREMENT);
				setState(2006);
				match(BY);
				setState(2007);
				match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2008);
				match(MAXVALUE);
				setState(2009);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2010);
				match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2011);
				match(MINVALUE);
				setState(2012);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2013);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(2014);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2015);
				match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 8);
				{
				setState(2016);
				match(CACHE);
				setState(2017);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(2018);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(2019);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(2020);
				match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_start_clauseContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_start_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSequence_start_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSequence_start_clause(this);
		}
	}

	public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_sequence_start_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2023);
			match(START);
			setState(2024);
			match(WITH);
			setState(2025);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode COMPUTE() { return getToken(PlSqlParser.COMPUTE, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_index(this);
		}
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2027);
			match(CREATE);
			setState(2029);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(2028);
				match(UNIQUE);
				}
			}

			setState(2031);
			match(INDEX);
			setState(2032);
			index_name();
			setState(2033);
			match(ON);
			setState(2034);
			tableview_name();
			setState(2035);
			match(LEFT_PAREN);
			setState(2036);
			column_name();
			setState(2041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2037);
				match(COMMA);
				setState(2038);
				column_name();
				}
				}
				setState(2043);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2044);
			match(RIGHT_PAREN);
			setState(2047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPUTE) {
				{
				setState(2045);
				match(COMPUTE);
				setState(2046);
				match(STATISTICS);
				}
			}

			setState(2049);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_indexContext extends ParserRuleContext {
		public Index_nameContext old_index_name;
		public Index_nameContext new_index_name;
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<Index_nameContext> index_name() {
			return getRuleContexts(Index_nameContext.class);
		}
		public Index_nameContext index_name(int i) {
			return getRuleContext(Index_nameContext.class,i);
		}
		public Alter_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_index(this);
		}
	}

	public final Alter_indexContext alter_index() throws RecognitionException {
		Alter_indexContext _localctx = new Alter_indexContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_alter_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2051);
			match(ALTER);
			setState(2052);
			match(INDEX);
			setState(2053);
			((Alter_indexContext)_localctx).old_index_name = index_name();
			setState(2054);
			match(RENAME);
			setState(2055);
			match(TO);
			setState(2056);
			((Alter_indexContext)_localctx).new_index_name = index_name();
			setState(2057);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_indexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Drop_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_index(this);
		}
	}

	public final Drop_indexContext drop_index() throws RecognitionException {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_drop_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2059);
			match(DROP);
			setState(2060);
			match(INDEX);
			setState(2061);
			index_name();
			setState(2062);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public Token pctfree;
		public Token pctused;
		public Token inittrans;
		public Size_clauseContext initial;
		public Size_clauseContext next;
		public Token minextents;
		public Token pctincrease;
		public Token freelists;
		public Token freelist_groups;
		public Token tablespace_name;
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<DatatypeContext> datatype() {
			return getRuleContexts(DatatypeContext.class);
		}
		public DatatypeContext datatype(int i) {
			return getRuleContext(DatatypeContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode GLOBAL() { return getToken(PlSqlParser.GLOBAL, 0); }
		public TerminalNode TEMPORARY() { return getToken(PlSqlParser.TEMPORARY, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode CREATION() { return getToken(PlSqlParser.CREATION, 0); }
		public List<TerminalNode> PCTFREE() { return getTokens(PlSqlParser.PCTFREE); }
		public TerminalNode PCTFREE(int i) {
			return getToken(PlSqlParser.PCTFREE, i);
		}
		public List<TerminalNode> PCTUSED() { return getTokens(PlSqlParser.PCTUSED); }
		public TerminalNode PCTUSED(int i) {
			return getToken(PlSqlParser.PCTUSED, i);
		}
		public List<TerminalNode> INITRANS() { return getTokens(PlSqlParser.INITRANS); }
		public TerminalNode INITRANS(int i) {
			return getToken(PlSqlParser.INITRANS, i);
		}
		public TerminalNode STORAGE() { return getToken(PlSqlParser.STORAGE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlSqlParser.TABLESPACE, 0); }
		public TerminalNode COMPRESS() { return getToken(PlSqlParser.COMPRESS, 0); }
		public TerminalNode NOCOMPRESS() { return getToken(PlSqlParser.NOCOMPRESS, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode PRESERVE() { return getToken(PlSqlParser.PRESERVE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public TerminalNode LOGGING() { return getToken(PlSqlParser.LOGGING, 0); }
		public TerminalNode NOLOGGING() { return getToken(PlSqlParser.NOLOGGING, 0); }
		public TerminalNode FILESYSTEM_LIKE_LOGGING() { return getToken(PlSqlParser.FILESYSTEM_LIKE_LOGGING, 0); }
		public List<TerminalNode> INITIAL() { return getTokens(PlSqlParser.INITIAL); }
		public TerminalNode INITIAL(int i) {
			return getToken(PlSqlParser.INITIAL, i);
		}
		public List<TerminalNode> NEXT() { return getTokens(PlSqlParser.NEXT); }
		public TerminalNode NEXT(int i) {
			return getToken(PlSqlParser.NEXT, i);
		}
		public List<TerminalNode> MINEXTENTS() { return getTokens(PlSqlParser.MINEXTENTS); }
		public TerminalNode MINEXTENTS(int i) {
			return getToken(PlSqlParser.MINEXTENTS, i);
		}
		public List<TerminalNode> PCTINCREASE() { return getTokens(PlSqlParser.PCTINCREASE); }
		public TerminalNode PCTINCREASE(int i) {
			return getToken(PlSqlParser.PCTINCREASE, i);
		}
		public List<TerminalNode> FREELISTS() { return getTokens(PlSqlParser.FREELISTS); }
		public TerminalNode FREELISTS(int i) {
			return getToken(PlSqlParser.FREELISTS, i);
		}
		public List<TerminalNode> FREELIST() { return getTokens(PlSqlParser.FREELIST); }
		public TerminalNode FREELIST(int i) {
			return getToken(PlSqlParser.FREELIST, i);
		}
		public List<TerminalNode> GROUPS() { return getTokens(PlSqlParser.GROUPS); }
		public TerminalNode GROUPS(int i) {
			return getToken(PlSqlParser.GROUPS, i);
		}
		public List<TerminalNode> OPTIMAL() { return getTokens(PlSqlParser.OPTIMAL); }
		public TerminalNode OPTIMAL(int i) {
			return getToken(PlSqlParser.OPTIMAL, i);
		}
		public List<TerminalNode> BUFFER_POOL() { return getTokens(PlSqlParser.BUFFER_POOL); }
		public TerminalNode BUFFER_POOL(int i) {
			return getToken(PlSqlParser.BUFFER_POOL, i);
		}
		public List<TerminalNode> FLASH_CACHE() { return getTokens(PlSqlParser.FLASH_CACHE); }
		public TerminalNode FLASH_CACHE(int i) {
			return getToken(PlSqlParser.FLASH_CACHE, i);
		}
		public List<TerminalNode> ENCRYPT() { return getTokens(PlSqlParser.ENCRYPT); }
		public TerminalNode ENCRYPT(int i) {
			return getToken(PlSqlParser.ENCRYPT, i);
		}
		public TerminalNode BASIC() { return getToken(PlSqlParser.BASIC, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public List<Size_clauseContext> size_clause() {
			return getRuleContexts(Size_clauseContext.class);
		}
		public Size_clauseContext size_clause(int i) {
			return getRuleContext(Size_clauseContext.class,i);
		}
		public List<TerminalNode> KEEP() { return getTokens(PlSqlParser.KEEP); }
		public TerminalNode KEEP(int i) {
			return getToken(PlSqlParser.KEEP, i);
		}
		public List<TerminalNode> RECYCLE() { return getTokens(PlSqlParser.RECYCLE); }
		public TerminalNode RECYCLE(int i) {
			return getToken(PlSqlParser.RECYCLE, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PlSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PlSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> NONE() { return getTokens(PlSqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(PlSqlParser.NONE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(PlSqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(PlSqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PlSqlParser.NULL, i);
		}
		public TerminalNode OLTP() { return getToken(PlSqlParser.OLTP, 0); }
		public TerminalNode QUERY() { return getToken(PlSqlParser.QUERY, 0); }
		public TerminalNode ARCHIVE() { return getToken(PlSqlParser.ARCHIVE, 0); }
		public TerminalNode LOW() { return getToken(PlSqlParser.LOW, 0); }
		public TerminalNode HIGH() { return getToken(PlSqlParser.HIGH, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_table(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_create_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2064);
			match(CREATE);
			setState(2067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL) {
				{
				setState(2065);
				match(GLOBAL);
				setState(2066);
				match(TEMPORARY);
				}
			}

			setState(2069);
			match(TABLE);
			setState(2070);
			tableview_name();
			setState(2071);
			match(LEFT_PAREN);
			setState(2072);
			column_name();
			setState(2073);
			datatype();
			setState(2080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2074);
				match(COMMA);
				setState(2075);
				column_name();
				setState(2076);
				datatype();
				}
				}
				setState(2082);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2083);
			match(RIGHT_PAREN);
			setState(2088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2084);
				match(ON);
				setState(2085);
				match(COMMIT);
				setState(2086);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2087);
				match(ROWS);
				}
			}

			setState(2093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEGMENT) {
				{
				setState(2090);
				match(SEGMENT);
				setState(2091);
				match(CREATION);
				setState(2092);
				_la = _input.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INITRANS || _la==PCTFREE || _la==PCTUSED) {
				{
				setState(2101);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PCTFREE:
					{
					setState(2095);
					match(PCTFREE);
					setState(2096);
					((Create_tableContext)_localctx).pctfree = match(UNSIGNED_INTEGER);
					}
					break;
				case PCTUSED:
					{
					setState(2097);
					match(PCTUSED);
					setState(2098);
					((Create_tableContext)_localctx).pctused = match(UNSIGNED_INTEGER);
					}
					break;
				case INITRANS:
					{
					setState(2099);
					match(INITRANS);
					setState(2100);
					((Create_tableContext)_localctx).inittrans = match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2105);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2136);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORAGE) {
				{
				setState(2106);
				match(STORAGE);
				setState(2107);
				match(LEFT_PAREN);
				setState(2131); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2131);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INITIAL:
						{
						setState(2108);
						match(INITIAL);
						setState(2109);
						((Create_tableContext)_localctx).initial = size_clause();
						}
						break;
					case NEXT:
						{
						setState(2110);
						match(NEXT);
						setState(2111);
						((Create_tableContext)_localctx).next = size_clause();
						}
						break;
					case MINEXTENTS:
						{
						setState(2112);
						match(MINEXTENTS);
						setState(2113);
						((Create_tableContext)_localctx).minextents = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==UNLIMITED || _la==UNSIGNED_INTEGER) ) {
							((Create_tableContext)_localctx).minextents = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case PCTINCREASE:
						{
						setState(2114);
						match(PCTINCREASE);
						setState(2115);
						((Create_tableContext)_localctx).pctincrease = match(UNSIGNED_INTEGER);
						}
						break;
					case FREELISTS:
						{
						setState(2116);
						match(FREELISTS);
						setState(2117);
						((Create_tableContext)_localctx).freelists = match(UNSIGNED_INTEGER);
						}
						break;
					case FREELIST:
						{
						setState(2118);
						match(FREELIST);
						setState(2119);
						match(GROUPS);
						setState(2120);
						((Create_tableContext)_localctx).freelist_groups = match(UNSIGNED_INTEGER);
						}
						break;
					case OPTIMAL:
						{
						setState(2121);
						match(OPTIMAL);
						setState(2124);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(2122);
							size_clause();
							}
							break;
						case NULL:
							{
							setState(2123);
							match(NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case BUFFER_POOL:
						{
						setState(2126);
						match(BUFFER_POOL);
						setState(2127);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==KEEP || _la==RECYCLE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case FLASH_CACHE:
						{
						setState(2128);
						match(FLASH_CACHE);
						setState(2129);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==KEEP || _la==NONE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case ENCRYPT:
						{
						setState(2130);
						match(ENCRYPT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(2133); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==BUFFER_POOL || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCRYPT - 128)) | (1L << (FLASH_CACHE - 128)) | (1L << (FREELIST - 128)) | (1L << (FREELISTS - 128)) | (1L << (INITIAL - 128)))) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & ((1L << (MINEXTENTS - 241)) | (1L << (NEXT - 241)) | (1L << (OPTIMAL - 241)))) != 0) || _la==PCTINCREASE );
				setState(2135);
				match(RIGHT_PAREN);
				}
			}

			setState(2140);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(2138);
				match(TABLESPACE);
				setState(2139);
				((Create_tableContext)_localctx).tablespace_name = match(REGULAR_ID);
				}
			}

			setState(2143);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) {
				{
				setState(2142);
				_la = _input.LA(1);
				if ( !(_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2158);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPRESS:
				{
				setState(2145);
				match(COMPRESS);
				setState(2155);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BASIC:
					{
					setState(2146);
					match(BASIC);
					}
					break;
				case FOR:
					{
					setState(2147);
					match(FOR);
					setState(2153);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case OLTP:
						{
						setState(2148);
						match(OLTP);
						}
						break;
					case ARCHIVE:
					case QUERY:
						{
						setState(2149);
						_la = _input.LA(1);
						if ( !(_la==ARCHIVE || _la==QUERY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2151);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==HIGH || _la==LOW) {
							{
							setState(2150);
							_la = _input.LA(1);
							if ( !(_la==HIGH || _la==LOW) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case SEMICOLON:
					break;
				default:
					break;
				}
				}
				break;
			case NOCOMPRESS:
				{
				setState(2157);
				match(NOCOMPRESS);
				}
				break;
			case SEMICOLON:
				break;
			default:
				break;
			}
			setState(2160);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Size_clauseContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public Size_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_size_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSize_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSize_clause(this);
		}
	}

	public final Size_clauseContext size_clause() throws RecognitionException {
		Size_clauseContext _localctx = new Size_clauseContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_size_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2162);
			match(UNSIGNED_INTEGER);
			setState(2163);
			match(REGULAR_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_table(this);
		}
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_drop_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2165);
			match(DROP);
			setState(2166);
			match(TABLE);
			setState(2167);
			tableview_name();
			setState(2168);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_columnContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode COLUMN() { return getToken(PlSqlParser.COLUMN, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Comment_on_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterComment_on_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitComment_on_column(this);
		}
	}

	public final Comment_on_columnContext comment_on_column() throws RecognitionException {
		Comment_on_columnContext _localctx = new Comment_on_columnContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_comment_on_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2170);
			match(COMMENT);
			setState(2171);
			match(ON);
			setState(2172);
			match(COLUMN);
			setState(2173);
			tableview_name();
			setState(2174);
			match(PERIOD);
			setState(2175);
			column_name();
			setState(2176);
			match(IS);
			setState(2177);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_synonymContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PUBLIC() { return getToken(PlSqlParser.PUBLIC, 0); }
		public TerminalNode SYNONYM() { return getToken(PlSqlParser.SYNONYM, 0); }
		public Synonym_nameContext synonym_name() {
			return getRuleContext(Synonym_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public List<Schema_nameContext> schema_name() {
			return getRuleContexts(Schema_nameContext.class);
		}
		public Schema_nameContext schema_name(int i) {
			return getRuleContext(Schema_nameContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_synonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_synonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_synonym(this);
		}
	}

	public final Create_synonymContext create_synonym() throws RecognitionException {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_create_synonym);
		int _la;
		try {
			setState(2221);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2179);
				match(CREATE);
				setState(2182);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(2180);
					match(OR);
					setState(2181);
					match(REPLACE);
					}
				}

				setState(2184);
				match(PUBLIC);
				setState(2185);
				match(SYNONYM);
				setState(2186);
				synonym_name();
				setState(2187);
				match(FOR);
				setState(2191);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
				case 1:
					{
					setState(2188);
					schema_name();
					setState(2189);
					match(PERIOD);
					}
					break;
				}
				setState(2193);
				schema_object_name();
				setState(2196);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT_SIGN) {
					{
					setState(2194);
					match(AT_SIGN);
					setState(2195);
					link_name();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2198);
				match(CREATE);
				setState(2201);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(2199);
					match(OR);
					setState(2200);
					match(REPLACE);
					}
				}

				setState(2203);
				match(SYNONYM);
				setState(2207);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
				case 1:
					{
					setState(2204);
					schema_name();
					setState(2205);
					match(PERIOD);
					}
					break;
				}
				setState(2209);
				synonym_name();
				setState(2210);
				match(FOR);
				setState(2214);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
				case 1:
					{
					setState(2211);
					schema_name();
					setState(2212);
					match(PERIOD);
					}
					break;
				}
				setState(2216);
				schema_object_name();
				setState(2219);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT_SIGN) {
					{
					setState(2217);
					match(AT_SIGN);
					setState(2218);
					link_name();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_tableContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Comment_on_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterComment_on_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitComment_on_table(this);
		}
	}

	public final Comment_on_tableContext comment_on_table() throws RecognitionException {
		Comment_on_tableContext _localctx = new Comment_on_tableContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_comment_on_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2223);
			match(COMMENT);
			setState(2224);
			match(ON);
			setState(2225);
			match(TABLE);
			setState(2226);
			tableview_name();
			setState(2227);
			match(IS);
			setState(2228);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Add_constraintContext add_constraint() {
			return getRuleContext(Add_constraintContext.class,0);
		}
		public Drop_constraintContext drop_constraint() {
			return getRuleContext(Drop_constraintContext.class,0);
		}
		public Enable_constraintContext enable_constraint() {
			return getRuleContext(Enable_constraintContext.class,0);
		}
		public Disable_constraintContext disable_constraint() {
			return getRuleContext(Disable_constraintContext.class,0);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_table(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_alter_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2230);
			match(ALTER);
			setState(2231);
			match(TABLE);
			setState(2232);
			tableview_name();
			setState(2237);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				setState(2233);
				add_constraint();
				}
				break;
			case DROP:
				{
				setState(2234);
				drop_constraint();
				}
				break;
			case ENABLE:
				{
				setState(2235);
				enable_constraint();
				}
				break;
			case DISABLE:
				{
				setState(2236);
				disable_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_constraintContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public Primary_key_clauseContext primary_key_clause() {
			return getRuleContext(Primary_key_clauseContext.class,0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return getRuleContext(Foreign_key_clauseContext.class,0);
		}
		public Unique_key_clauseContext unique_key_clause() {
			return getRuleContext(Unique_key_clauseContext.class,0);
		}
		public Check_constraintContext check_constraint() {
			return getRuleContext(Check_constraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Add_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAdd_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAdd_constraint(this);
		}
	}

	public final Add_constraintContext add_constraint() throws RecognitionException {
		Add_constraintContext _localctx = new Add_constraintContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_add_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2239);
			match(ADD);
			setState(2242);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2240);
				match(CONSTRAINT);
				setState(2241);
				constraint_name();
				}
			}

			setState(2248);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
				{
				setState(2244);
				primary_key_clause();
				}
				break;
			case FOREIGN:
				{
				setState(2245);
				foreign_key_clause();
				}
				break;
			case UNIQUE:
				{
				setState(2246);
				unique_key_clause();
				}
				break;
			case CHECK:
				{
				setState(2247);
				check_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Check_constraintContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(PlSqlParser.CHECK, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public Check_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_check_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCheck_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCheck_constraint(this);
		}
	}

	public final Check_constraintContext check_constraint() throws RecognitionException {
		Check_constraintContext _localctx = new Check_constraintContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_check_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2250);
			match(CHECK);
			setState(2251);
			match(LEFT_PAREN);
			setState(2252);
			condition();
			setState(2253);
			match(RIGHT_PAREN);
			setState(2255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE) {
				{
				setState(2254);
				match(DISABLE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_constraintContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Drop_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_constraint(this);
		}
	}

	public final Drop_constraintContext drop_constraint() throws RecognitionException {
		Drop_constraintContext _localctx = new Drop_constraintContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_drop_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2257);
			match(DROP);
			setState(2258);
			match(CONSTRAINT);
			setState(2259);
			constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enable_constraintContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Enable_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterEnable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitEnable_constraint(this);
		}
	}

	public final Enable_constraintContext enable_constraint() throws RecognitionException {
		Enable_constraintContext _localctx = new Enable_constraintContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_enable_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2261);
			match(ENABLE);
			setState(2262);
			match(CONSTRAINT);
			setState(2263);
			constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disable_constraintContext extends ParserRuleContext {
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Disable_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disable_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDisable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDisable_constraint(this);
		}
	}

	public final Disable_constraintContext disable_constraint() throws RecognitionException {
		Disable_constraintContext _localctx = new Disable_constraintContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_disable_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2265);
			match(DISABLE);
			setState(2266);
			match(CONSTRAINT);
			setState(2267);
			constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreign_key_clauseContext extends ParserRuleContext {
		public TerminalNode FOREIGN() { return getToken(PlSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public On_delete_clauseContext on_delete_clause() {
			return getRuleContext(On_delete_clauseContext.class,0);
		}
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterForeign_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitForeign_key_clause(this);
		}
	}

	public final Foreign_key_clauseContext foreign_key_clause() throws RecognitionException {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_foreign_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2269);
			match(FOREIGN);
			setState(2270);
			match(KEY);
			setState(2271);
			match(LEFT_PAREN);
			setState(2272);
			column_name();
			setState(2277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2273);
				match(COMMA);
				setState(2274);
				column_name();
				}
				}
				setState(2279);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2280);
			match(RIGHT_PAREN);
			setState(2281);
			references_clause();
			setState(2283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2282);
				on_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class References_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(PlSqlParser.REFERENCES, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public References_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReferences_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReferences_clause(this);
		}
	}

	public final References_clauseContext references_clause() throws RecognitionException {
		References_clauseContext _localctx = new References_clauseContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_references_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2285);
			match(REFERENCES);
			setState(2286);
			tableview_name();
			setState(2287);
			match(LEFT_PAREN);
			setState(2288);
			column_name();
			setState(2293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2289);
				match(COMMA);
				setState(2290);
				column_name();
				}
				}
				setState(2295);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2296);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_delete_clauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public On_delete_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOn_delete_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOn_delete_clause(this);
		}
	}

	public final On_delete_clauseContext on_delete_clause() throws RecognitionException {
		On_delete_clauseContext _localctx = new On_delete_clauseContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_on_delete_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2298);
			match(ON);
			setState(2299);
			match(DELETE);
			setState(2303);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE:
				{
				setState(2300);
				match(CASCADE);
				}
				break;
			case SET:
				{
				setState(2301);
				match(SET);
				setState(2302);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unique_key_clauseContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Unique_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unique_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnique_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnique_key_clause(this);
		}
	}

	public final Unique_key_clauseContext unique_key_clause() throws RecognitionException {
		Unique_key_clauseContext _localctx = new Unique_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_unique_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2305);
			match(UNIQUE);
			setState(2306);
			match(LEFT_PAREN);
			setState(2307);
			column_name();
			setState(2312);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2308);
				match(COMMA);
				setState(2309);
				column_name();
				}
				}
				setState(2314);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2315);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primary_key_clauseContext extends ParserRuleContext {
		public TerminalNode PRIMARY() { return getToken(PlSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Primary_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPrimary_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPrimary_key_clause(this);
		}
	}

	public final Primary_key_clauseContext primary_key_clause() throws RecognitionException {
		Primary_key_clauseContext _localctx = new Primary_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_primary_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2317);
			match(PRIMARY);
			setState(2318);
			match(KEY);
			setState(2319);
			match(LEFT_PAREN);
			setState(2320);
			column_name();
			setState(2325);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2321);
				match(COMMA);
				setState(2322);
				column_name();
				}
				}
				setState(2327);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2328);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Anonymous_blockContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Anonymous_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anonymous_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAnonymous_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAnonymous_block(this);
		}
	}

	public final Anonymous_blockContext anonymous_block() throws RecognitionException {
		Anonymous_blockContext _localctx = new Anonymous_blockContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_anonymous_block);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2330);
			match(BEGIN);
			setState(2331);
			seq_of_statements();
			setState(2332);
			match(END);
			setState(2333);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		public TerminalNode AUTHID() { return getToken(PlSqlParser.AUTHID, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlSqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(PlSqlParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInvoker_rights_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInvoker_rights_clause(this);
		}
	}

	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2335);
			match(AUTHID);
			setState(2336);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompiler_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompiler_parameters_clause(this);
		}
	}

	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2338);
			identifier();
			setState(2339);
			match(EQUALS_OP);
			setState(2340);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_specContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCall_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCall_spec(this);
		}
	}

	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2342);
			match(LANGUAGE);
			setState(2345);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(2343);
				java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(2344);
				c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Java_specContext extends ParserRuleContext {
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_java_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterJava_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitJava_spec(this);
		}
	}

	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2347);
			match(JAVA);
			setState(2348);
			match(NAME);
			setState(2349);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_specContext extends ParserRuleContext {
		public TerminalNode C_LETTER() { return getToken(PlSqlParser.C_LETTER, 0); }
		public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterC_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitC_spec(this);
		}
	}

	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2351);
			match(C_LETTER);
			setState(2354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2352);
				match(NAME);
				setState(2353);
				match(CHAR_STRING);
				}
			}

			setState(2356);
			match(LIBRARY);
			setState(2357);
			identifier();
			setState(2359);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGENT) {
				{
				setState(2358);
				c_agent_in_clause();
				}
			}

			setState(2363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2361);
				match(WITH);
				setState(2362);
				match(CONTEXT);
				}
			}

			setState(2366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(2365);
				c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_agent_in_clauseContext extends ParserRuleContext {
		public TerminalNode AGENT() { return getToken(PlSqlParser.AGENT, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterC_agent_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitC_agent_in_clause(this);
		}
	}

	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_c_agent_in_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2368);
			match(AGENT);
			setState(2369);
			match(IN);
			setState(2370);
			match(LEFT_PAREN);
			setState(2371);
			expressions();
			setState(2372);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_parameters_clauseContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterC_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitC_parameters_clause(this);
		}
	}

	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_c_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2374);
			match(PARAMETERS);
			setState(2375);
			match(LEFT_PAREN);
			setState(2380);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2376);
				expressions();
				}
				break;
			case PERIOD:
				{
				setState(2377);
				match(PERIOD);
				setState(2378);
				match(PERIOD);
				setState(2379);
				match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2382);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(PlSqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PlSqlParser.IN, i);
		}
		public List<TerminalNode> OUT() { return getTokens(PlSqlParser.OUT); }
		public TerminalNode OUT(int i) {
			return getToken(PlSqlParser.OUT, i);
		}
		public List<TerminalNode> INOUT() { return getTokens(PlSqlParser.INOUT); }
		public TerminalNode INOUT(int i) {
			return getToken(PlSqlParser.INOUT, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(PlSqlParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(PlSqlParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParameter(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_parameter);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2384);
			parameter_name();
			setState(2388);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2385);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					} 
				}
				setState(2390);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
			}
			setState(2392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(2391);
				type_spec();
				}
			}

			setState(2395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2394);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_value_partContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDefault_value_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDefault_value_part(this);
		}
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2397);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2398);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Procedure_bodyContext procedure_body() {
			return getRuleContext(Procedure_bodyContext.class,0);
		}
		public Function_bodyContext function_body() {
			return getRuleContext(Function_bodyContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDeclare_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDeclare_spec(this);
		}
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_declare_spec);
		try {
			setState(2410);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2400);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2401);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2402);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2403);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2404);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2405);
				type_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2406);
				procedure_spec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2407);
				function_spec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2408);
				procedure_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2409);
				function_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_declarationContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterVariable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitVariable_declaration(this);
		}
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2412);
			identifier();
			setState(2414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				setState(2413);
				match(CONSTANT);
				}
				break;
			}
			setState(2416);
			type_spec();
			setState(2419);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2417);
				match(NOT);
				setState(2418);
				match(NULL);
				}
			}

			setState(2422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2421);
				default_value_part();
				}
			}

			setState(2424);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtype_declarationContext extends ParserRuleContext {
		public TerminalNode SUBTYPE() { return getToken(PlSqlParser.SUBTYPE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubtype_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubtype_declaration(this);
		}
	}

	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2426);
			match(SUBTYPE);
			setState(2427);
			identifier();
			setState(2428);
			match(IS);
			setState(2429);
			type_spec();
			setState(2435);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(2430);
				match(RANGE);
				setState(2431);
				expression();
				setState(2432);
				match(DOUBLE_PERIOD);
				setState(2433);
				expression();
				}
			}

			setState(2439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2437);
				match(NOT);
				setState(2438);
				match(NULL);
				}
			}

			setState(2441);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_declarationContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_declaration(this);
		}
	}

	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2443);
			match(CURSOR);
			setState(2444);
			identifier();
			setState(2456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2445);
				match(LEFT_PAREN);
				setState(2446);
				parameter_spec();
				setState(2451);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2447);
					match(COMMA);
					setState(2448);
					parameter_spec();
					}
					}
					setState(2453);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2454);
				match(RIGHT_PAREN);
				}
			}

			setState(2460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2458);
				match(RETURN);
				setState(2459);
				type_spec();
				}
			}

			setState(2464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(2462);
				match(IS);
				setState(2463);
				select_statement();
				}
			}

			setState(2466);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParameter_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParameter_spec(this);
		}
	}

	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2468);
			parameter_name();
			setState(2473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (IN - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(2470);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(2469);
					match(IN);
					}
				}

				setState(2472);
				type_spec();
				}
			}

			setState(2476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2475);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_declarationContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterException_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitException_declaration(this);
		}
	}

	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2478);
			identifier();
			setState(2479);
			match(EXCEPTION);
			setState(2480);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_declarationContext extends ParserRuleContext {
		public IdentifierContext id1;
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Numeric_negativeContext numeric_negative() {
			return getRuleContext(Numeric_negativeContext.class,0);
		}
		public TerminalNode INLINE() { return getToken(PlSqlParser.INLINE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPragma_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPragma_declaration(this);
		}
	}

	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2482);
			match(PRAGMA);
			setState(2513);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(2483);
				match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(2484);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(2485);
				match(EXCEPTION_INIT);
				setState(2486);
				match(LEFT_PAREN);
				setState(2487);
				exception_name();
				setState(2488);
				match(COMMA);
				setState(2489);
				numeric_negative();
				setState(2490);
				match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(2492);
				match(INLINE);
				setState(2493);
				match(LEFT_PAREN);
				setState(2494);
				((Pragma_declarationContext)_localctx).id1 = identifier();
				setState(2495);
				match(COMMA);
				setState(2496);
				expression();
				setState(2497);
				match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(2499);
				match(RESTRICT_REFERENCES);
				setState(2500);
				match(LEFT_PAREN);
				setState(2503);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2501);
					identifier();
					}
					break;
				case DEFAULT:
					{
					setState(2502);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2507); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2505);
					match(COMMA);
					setState(2506);
					identifier();
					}
					}
					setState(2509); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(2511);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2515);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_type_defContext extends ParserRuleContext {
		public TerminalNode RECORD() { return getToken(PlSqlParser.RECORD, 0); }
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public Record_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRecord_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRecord_type_def(this);
		}
	}

	public final Record_type_defContext record_type_def() throws RecognitionException {
		Record_type_defContext _localctx = new Record_type_defContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_record_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2517);
			match(RECORD);
			setState(2518);
			match(LEFT_PAREN);
			setState(2519);
			field_spec();
			setState(2524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2520);
				match(COMMA);
				setState(2521);
				field_spec();
				}
				}
				setState(2526);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2527);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_specContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterField_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitField_spec(this);
		}
	}

	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2529);
			column_name();
			setState(2531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(2530);
				type_spec();
				}
			}

			setState(2535);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2533);
				match(NOT);
				setState(2534);
				match(NULL);
				}
			}

			setState(2538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2537);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ref_cursor_type_defContext extends ParserRuleContext {
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Ref_cursor_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ref_cursor_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRef_cursor_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRef_cursor_type_def(this);
		}
	}

	public final Ref_cursor_type_defContext ref_cursor_type_def() throws RecognitionException {
		Ref_cursor_type_defContext _localctx = new Ref_cursor_type_defContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_ref_cursor_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2540);
			match(REF);
			setState(2541);
			match(CURSOR);
			setState(2544);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2542);
				match(RETURN);
				setState(2543);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_declarationContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Table_type_defContext table_type_def() {
			return getRuleContext(Table_type_defContext.class,0);
		}
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Record_type_defContext record_type_def() {
			return getRuleContext(Record_type_defContext.class,0);
		}
		public Ref_cursor_type_defContext ref_cursor_type_def() {
			return getRuleContext(Ref_cursor_type_defContext.class,0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_declaration(this);
		}
	}

	public final Type_declarationContext type_declaration() throws RecognitionException {
		Type_declarationContext _localctx = new Type_declarationContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_type_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2546);
			match(TYPE);
			setState(2547);
			identifier();
			setState(2548);
			match(IS);
			setState(2553);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(2549);
				table_type_def();
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(2550);
				varray_type_def();
				}
				break;
			case RECORD:
				{
				setState(2551);
				record_type_def();
				}
				break;
			case REF:
				{
				setState(2552);
				ref_cursor_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2555);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_type_def(this);
		}
	}

	public final Table_type_defContext table_type_def() throws RecognitionException {
		Table_type_defContext _localctx = new Table_type_defContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_table_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2557);
			match(TABLE);
			setState(2558);
			match(OF);
			setState(2559);
			type_spec();
			setState(2561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEXED || _la==INDEX) {
				{
				setState(2560);
				table_indexed_by_part();
				}
			}

			setState(2565);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2563);
				match(NOT);
				setState(2564);
				match(NULL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indexed_by_partContext extends ParserRuleContext {
		public Token idx1;
		public Token idx2;
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode INDEXED() { return getToken(PlSqlParser.INDEXED, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_indexed_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_indexed_by_part(this);
		}
	}

	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2569);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(2567);
				((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(2568);
				((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2571);
			match(BY);
			setState(2572);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_type_defContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(PlSqlParser.VARYING, 0); }
		public TerminalNode ARRAY() { return getToken(PlSqlParser.ARRAY, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterVarray_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitVarray_type_def(this);
		}
	}

	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2577);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(2574);
				match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(2575);
				match(VARYING);
				setState(2576);
				match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2579);
			match(LEFT_PAREN);
			setState(2580);
			expression();
			setState(2581);
			match(RIGHT_PAREN);
			setState(2582);
			match(OF);
			setState(2583);
			type_spec();
			setState(2586);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				{
				setState(2584);
				match(NOT);
				setState(2585);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seq_of_statementsContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		public List<TerminalNode> EOF() { return getTokens(PlSqlParser.EOF); }
		public TerminalNode EOF(int i) {
			return getToken(PlSqlParser.EOF, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSeq_of_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSeq_of_statements(this);
		}
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_seq_of_statements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2592); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2592);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ADD:
					case AFTER:
					case AGENT:
					case AGGREGATE:
					case A_LETTER:
					case ALTER:
					case ANALYZE:
					case ARRAY:
					case ASSOCIATE:
					case AT:
					case ATTRIBUTE:
					case AUDIT:
					case AUTHID:
					case AUTO:
					case AUTOMATIC:
					case AUTONOMOUS_TRANSACTION:
					case BATCH:
					case BEFORE:
					case BEGIN:
					case BFILE:
					case BINARY_DOUBLE:
					case BINARY_FLOAT:
					case BINARY_INTEGER:
					case BLOB:
					case BLOCK:
					case BODY:
					case BOOLEAN:
					case BOTH:
					case BULK:
					case BYTE:
					case CALL:
					case CANONICAL:
					case CASCADE:
					case CASE:
					case CAST:
					case CHARACTER:
					case CHAR:
					case CHAR_CS:
					case CHR:
					case C_LETTER:
					case CLOB:
					case CLOSE:
					case CLUSTER:
					case COLLECT:
					case COLUMNS:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case COMPATIBILITY:
					case COMPILE:
					case COMPOUND:
					case CONSTANT:
					case CONSTRAINT:
					case CONSTRAINTS:
					case CONSTRUCTOR:
					case CONTENT:
					case CONTEXT:
					case CONTINUE:
					case CONVERT:
					case CORRUPT_XID_ALL:
					case CORRUPT_XID:
					case COST:
					case COUNT:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT_USER:
					case CURSOR:
					case CUSTOMDATUM:
					case CYCLE:
					case DATABASE:
					case DATA:
					case DAY:
					case DB_ROLE_CHANGE:
					case DBTIMEZONE:
					case DDL:
					case DEBUG:
					case DEC:
					case DECIMAL:
					case DECLARE:
					case DECOMPOSE:
					case DECREMENT:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DETERMINISTIC:
					case DIMENSION:
					case DISABLE:
					case DISASSOCIATE:
					case DOCUMENT:
					case DOUBLE:
					case DSINTERVAL_UNCONSTRAINED:
					case EACH:
					case ELEMENT:
					case EMPTY:
					case ENABLE:
					case ENCODING:
					case ENTITYESCAPING:
					case ERR:
					case ERRORS:
					case ESCAPE:
					case EVALNAME:
					case EXCEPTION:
					case EXCEPTION_INIT:
					case EXCEPTIONS:
					case EXCLUDE:
					case EXECUTE:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case EXTRACT:
					case FAILURE:
					case FETCH:
					case FINAL:
					case FIRST:
					case FIRST_VALUE:
					case FLOAT:
					case FOLLOWING:
					case FOLLOWS:
					case FORALL:
					case FORCE:
					case FOR:
					case FULL:
					case FUNCTION:
					case GOTO:
					case GRANT:
					case GROUPING:
					case HASH:
					case HIDE:
					case HOUR:
					case IF:
					case IGNORE:
					case IMMEDIATE:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDENT:
					case INDEXED:
					case INDICATOR:
					case INDICES:
					case INFINITE:
					case INLINE:
					case INNER:
					case INOUT:
					case INSERT:
					case INSTANTIABLE:
					case INSTEAD:
					case INTEGER:
					case INTERVAL:
					case INT:
					case INVALIDATE:
					case ISOLATION:
					case ITERATE:
					case JAVA:
					case JOIN:
					case KEEP:
					case KEY:
					case LANGUAGE:
					case LAST:
					case LAST_VALUE:
					case LEADING:
					case LEFT:
					case LEVEL:
					case LIBRARY:
					case LIKE2:
					case LIKE4:
					case LIKEC:
					case LIMIT:
					case LOCAL:
					case LOCKED:
					case LOCK:
					case LOG:
					case LOGOFF:
					case LOGON:
					case LONG:
					case LOOP:
					case MAIN:
					case MAP:
					case MATCHED:
					case MAXVALUE:
					case MEASURES:
					case MEMBER:
					case MERGE:
					case MINUTE:
					case MINVALUE:
					case MLSLABEL:
					case MODEL:
					case MODIFY:
					case MONTH:
					case MULTISET:
					case NAME:
					case NAN:
					case NATURAL:
					case NATURALN:
					case NAV:
					case NCHAR_CS:
					case NCHAR:
					case NCLOB:
					case NESTED:
					case NEW:
					case NOAUDIT:
					case NOCOPY:
					case NOCYCLE:
					case NOENTITYESCAPING:
					case NONE:
					case NO:
					case NOSCHEMACHECK:
					case NULL:
					case NULLS:
					case NUMBER:
					case NUMERIC:
					case NVARCHAR2:
					case OBJECT:
					case OFF:
					case OID:
					case OLD:
					case ONLY:
					case OPEN:
					case ORADATA:
					case ORDINALITY:
					case OSERROR:
					case OUTER:
					case OUT:
					case OVER:
					case OVERRIDING:
					case PACKAGE:
					case PARALLEL_ENABLE:
					case PARAMETERS:
					case PARENT:
					case PARTITION:
					case PASSING:
					case PATH:
					case PIPELINED:
					case PIPE:
					case PLAN:
					case PLS_INTEGER:
					case POSITIVEN:
					case POSITIVE:
					case PRAGMA:
					case PRECEDING:
					case PRECISION:
					case PRESENT:
					case PROCEDURE:
					case RAISE:
					case RANGE:
					case RAW:
					case READ:
					case REAL:
					case RECORD:
					case REFERENCE:
					case REFERENCING:
					case REF:
					case REJECT:
					case RELIES_ON:
					case RENAME:
					case REPLACE:
					case RESPECT:
					case RESTRICT_REFERENCES:
					case RESULT_CACHE:
					case RESULT:
					case RETURNING:
					case RETURN:
					case REUSE:
					case REVERSE:
					case RIGHT:
					case ROLLBACK:
					case ROLLUP:
					case ROWID:
					case ROW:
					case ROWS:
					case RULES:
					case SAMPLE:
					case SAVEPOINT:
					case SAVE:
					case SCHEMACHECK:
					case SCHEMA:
					case SCN:
					case SECOND:
					case SEED:
					case SEGMENT:
					case SELECT:
					case SELF:
					case SEQUENTIAL:
					case SERIALIZABLE:
					case SERIALLY_REUSABLE:
					case SERVERERROR:
					case SESSIONTIMEZONE:
					case SET:
					case SETS:
					case SETTINGS:
					case SHOW:
					case SHUTDOWN:
					case SIBLINGS:
					case SIGNTYPE:
					case SIMPLE_INTEGER:
					case SINGLE:
					case SKIP_:
					case SMALLINT:
					case SNAPSHOT:
					case SOME:
					case SPECIFICATION:
					case SQLDATA:
					case SQLERROR:
					case STANDALONE:
					case STARTUP:
					case STATEMENT_ID:
					case STATEMENT:
					case STATIC:
					case STATISTICS:
					case STRING:
					case SUBMULTISET:
					case SUBPARTITION:
					case SUBSTITUTABLE:
					case SUBTYPE:
					case SUCCESS:
					case SUSPEND:
					case TEMPORARY:
					case TIMESTAMP_LTZ_UNCONSTRAINED:
					case TIMESTAMP:
					case TIMESTAMP_TZ_UNCONSTRAINED:
					case TIMESTAMP_UNCONSTRAINED:
					case TIME:
					case TIMEZONE_ABBR:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TIMEZONE_REGION:
					case TRAILING:
					case TRANSACTION:
					case TRANSLATE:
					case TREAT:
					case TRIGGER:
					case TRUNCATE:
					case TYPE:
					case UNBOUNDED:
					case UNDER:
					case UNLIMITED:
					case UNTIL:
					case UPDATED:
					case UPDATE:
					case UPSERT:
					case UROWID:
					case USE:
					case VALIDATE:
					case VALUE:
					case VARCHAR2:
					case VARCHAR:
					case VARIABLE:
					case VARRAY:
					case VARYING:
					case VERSIONS:
					case VERSION:
					case WAIT:
					case WARNING:
					case WELLFORMED:
					case WHENEVER:
					case WHILE:
					case WITHIN:
					case WITH:
					case WORK:
					case WRITE:
					case XMLAGG:
					case XMLATTRIBUTES:
					case XMLCAST:
					case XMLCOLATTVAL:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case XML:
					case YEAR:
					case YES:
					case YMINTERVAL_UNCONSTRAINED:
					case ZONE:
					case PREDICTION:
					case PREDICTION_BOUNDS:
					case PREDICTION_COST:
					case PREDICTION_DETAILS:
					case PREDICTION_PROBABILITY:
					case PREDICTION_SET:
					case CUME_DIST:
					case DENSE_RANK:
					case LISTAGG:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case RANK:
					case AVG:
					case CORR:
					case COVAR_:
					case LAG:
					case LEAD:
					case MAX:
					case MEDIAN:
					case MIN:
					case NTILE:
					case RATIO_TO_REPORT:
					case REGR_:
					case ROW_NUMBER:
					case SUBSTR:
					case TRIM:
					case SUM:
					case STDDEV:
					case VAR_:
					case VARIANCE:
					case DELIMITED_ID:
					case LEFT_PAREN:
					case BINDVAR:
					case COLON:
					case INTRODUCER:
					case REGULAR_ID:
						{
						setState(2588);
						statement();
						setState(2589);
						_la = _input.LA(1);
						if ( !(_la==EOF || _la==SEMICOLON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LESS_THAN_OP:
						{
						setState(2591);
						label_declaration();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2594); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_declarationContext extends ParserRuleContext {
		public Token ltp1;
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLabel_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLabel_declaration(this);
		}
	}

	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2596);
			((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(2597);
			match(LESS_THAN_OP);
			setState(2598);
			label_name();
			setState(2599);
			match(GREATER_THAN_OP);
			setState(2600);
			match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Pipe_row_statementContext pipe_row_statement() {
			return getRuleContext(Pipe_row_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStatement(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_statement);
		try {
			setState(2629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2602);
				match(CREATE);
				setState(2603);
				swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2604);
				match(ALTER);
				setState(2605);
				swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2606);
				match(GRANT);
				setState(2608);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					setState(2607);
					match(ALL);
					}
					break;
				}
				setState(2610);
				swallow_to_semi();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2611);
				match(TRUNCATE);
				setState(2612);
				swallow_to_semi();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2613);
				body();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2614);
				block();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2615);
				assignment_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2616);
				continue_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2617);
				exit_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2618);
				goto_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2619);
				if_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2620);
				loop_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2621);
				forall_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2622);
				null_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2623);
				raise_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2624);
				return_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2625);
				case_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2626);
				sql_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2627);
				function_call();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2628);
				pipe_row_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Swallow_to_semiContext extends ParserRuleContext {
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSwallow_to_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSwallow_to_semi(this);
		}
	}

	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_swallow_to_semi);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2632); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2631);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(2634); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARCHIVE) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BASIC) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BUFFER_POOL) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHECK) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (COMPRESS - 64)) | (1L << (COMPUTE - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONNECT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CREATION - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCRYPT - 128)) | (1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FILESYSTEM_LIKE_LOGGING - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLASH_CACHE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FOREIGN - 128)) | (1L << (FOR - 128)) | (1L << (FREELIST - 128)) | (1L << (FREELISTS - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GLOBAL - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (GROUPS - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HIGH - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDEX - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (IN - 128)) | (1L << (INITIAL - 128)) | (1L << (INITRANS - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INLINE - 192)) | (1L << (INNER - 192)) | (1L << (INOUT - 192)) | (1L << (INSERT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERSECT - 192)) | (1L << (INTERVAL - 192)) | (1L << (INT - 192)) | (1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (KEY - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIKE - 192)) | (1L << (LIMIT - 192)) | (1L << (LIST - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOCK - 192)) | (1L << (LOGGING - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (LOW - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINEXTENTS - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODE - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NCHAR_CS - 256)) | (1L << (NCHAR - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NEXT - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCACHE - 256)) | (1L << (NOCOMPRESS - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NOLOGGING - 256)) | (1L << (NOMAXVALUE - 256)) | (1L << (NOMINVALUE - 256)) | (1L << (NONE - 256)) | (1L << (NO - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (OLTP - 256)) | (1L << (ONLY - 256)) | (1L << (ON - 256)) | (1L << (OPEN - 256)) | (1L << (OPTIMAL - 256)) | (1L << (OPTION - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OR - 256)) | (1L << (OSERROR - 256)) | (1L << (OUTER - 256)) | (1L << (OUT - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PCTFREE - 256)) | (1L << (PCTINCREASE - 256)) | (1L << (PCTUSED - 256)) | (1L << (PERCENT_FOUND - 256)) | (1L << (PERCENT_ISOPEN - 256)) | (1L << (PERCENT_NOTFOUND - 256)) | (1L << (PERCENT_ROWCOUNT - 256)) | (1L << (PERCENT_ROWTYPE - 256)) | (1L << (PERCENT_TYPE - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIPE - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PIVOT - 320)) | (1L << (PLAN - 320)) | (1L << (PLS_INTEGER - 320)) | (1L << (POSITIVEN - 320)) | (1L << (POSITIVE - 320)) | (1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PRESERVE - 320)) | (1L << (PRIMARY - 320)) | (1L << (PRIOR - 320)) | (1L << (PROCEDURE - 320)) | (1L << (PUBLIC - 320)) | (1L << (QUERY - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (RECYCLE - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCES - 320)) | (1L << (REFERENCING - 320)) | (1L << (REF - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RESULT - 320)) | (1L << (RETURNING - 320)) | (1L << (RETURN - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROWID - 320)) | (1L << (ROW - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SAVE - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SET - 384)) | (1L << (SETS - 384)) | (1L << (SETTINGS - 384)) | (1L << (SHARE - 384)) | (1L << (SHOW - 384)) | (1L << (SHUTDOWN - 384)) | (1L << (SIBLINGS - 384)) | (1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SIZE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (START - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STORAGE - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (SYNONYM - 384)) | (1L << (TABLESPACE - 384)) | (1L << (TABLE - 384)) | (1L << (TEMPORARY - 384)) | (1L << (THEN - 384)) | (1L << (THE - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIME - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (UPDATED - 448)) | (1L << (UPDATE - 448)) | (1L << (UPSERT - 448)) | (1L << (UROWID - 448)) | (1L << (USE - 448)) | (1L << (USING - 448)) | (1L << (VALIDATE - 448)) | (1L << (VALUES - 448)) | (1L << (VALUE - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSIONS - 448)) | (1L << (VERSION - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHEN - 448)) | (1L << (WHERE - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WITH - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (XML - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (COVAR_ - 448)) | (1L << (DECODE - 448)) | (1L << (LAG - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (LEAD - 512)) | (1L << (MAX - 512)) | (1L << (MEDIAN - 512)) | (1L << (MIN - 512)) | (1L << (NTILE - 512)) | (1L << (NVL - 512)) | (1L << (RATIO_TO_REPORT - 512)) | (1L << (REGR_ - 512)) | (1L << (ROUND - 512)) | (1L << (ROW_NUMBER - 512)) | (1L << (SUBSTR - 512)) | (1L << (TO_CHAR - 512)) | (1L << (TRIM - 512)) | (1L << (SUM - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (VARIANCE - 512)) | (1L << (LEAST - 512)) | (1L << (GREATEST - 512)) | (1L << (TO_DATE - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (BIT_STRING_LIT - 512)) | (1L << (HEX_STRING_LIT - 512)) | (1L << (DOUBLE_PERIOD - 512)) | (1L << (PERIOD - 512)) | (1L << (UNSIGNED_INTEGER - 512)) | (1L << (APPROXIMATE_NUM_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (PERCENT - 512)) | (1L << (AMPERSAND - 512)) | (1L << (LEFT_PAREN - 512)) | (1L << (RIGHT_PAREN - 512)) | (1L << (DOUBLE_ASTERISK - 512)) | (1L << (ASTERISK - 512)) | (1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (COMMA - 512)) | (1L << (SOLIDUS - 512)) | (1L << (AT_SIGN - 512)) | (1L << (ASSIGN_OP - 512)) | (1L << (BINDVAR - 512)) | (1L << (NOT_EQUAL_OP - 512)) | (1L << (CARRET_OPERATOR_PART - 512)) | (1L << (TILDE_OPERATOR_PART - 512)) | (1L << (EXCLAMATION_OPERATOR_PART - 512)) | (1L << (GREATER_THAN_OP - 512)) | (1L << (LESS_THAN_OP - 512)) | (1L << (COLON - 512)) | (1L << (BAR - 512)) | (1L << (EQUALS_OP - 512)) | (1L << (LEFT_BRACKET - 512)) | (1L << (RIGHT_BRACKET - 512)) | (1L << (INTRODUCER - 512)) | (1L << (SPACES - 512)) | (1L << (SINGLE_LINE_COMMENT - 512)) | (1L << (MULTI_LINE_COMMENT - 512)) | (1L << (PROMPT - 512)) | (1L << (START_CMD - 512)) | (1L << (REGULAR_ID - 512)) | (1L << (ZV - 512)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_statementContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAssignment_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAssignment_statement(this);
		}
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2638);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2636);
				general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				{
				setState(2637);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2640);
			match(ASSIGN_OP);
			setState(2641);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitContinue_statement(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_continue_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2643);
			match(CONTINUE);
			setState(2645);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(2644);
				label_name();
				}
			}

			setState(2649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2647);
				match(WHEN);
				setState(2648);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExit_statement(this);
		}
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_exit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2651);
			match(EXIT);
			setState(2653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(2652);
				label_name();
				}
			}

			setState(2657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2655);
				match(WHEN);
				setState(2656);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(PlSqlParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGoto_statement(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2659);
			match(GOTO);
			setState(2660);
			label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(PlSqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(PlSqlParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIf_statement(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2662);
			match(IF);
			setState(2663);
			condition();
			setState(2664);
			match(THEN);
			setState(2665);
			seq_of_statements();
			setState(2669);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(2666);
				elsif_part();
				}
				}
				setState(2671);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2673);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2672);
				else_part();
				}
			}

			setState(2675);
			match(END);
			setState(2676);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Elsif_partContext extends ParserRuleContext {
		public TerminalNode ELSIF() { return getToken(PlSqlParser.ELSIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterElsif_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitElsif_part(this);
		}
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2678);
			match(ELSIF);
			setState(2679);
			condition();
			setState(2680);
			match(THEN);
			setState(2681);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterElse_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitElse_part(this);
		}
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2683);
			match(ELSE);
			setState(2684);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(PlSqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PlSqlParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLoop_statement(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				{
				setState(2686);
				label_name();
				}
				break;
			}
			setState(2693);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(2689);
				match(WHILE);
				setState(2690);
				condition();
				}
				break;
			case FOR:
				{
				setState(2691);
				match(FOR);
				setState(2692);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				break;
			}
			setState(2695);
			match(LOOP);
			setState(2696);
			seq_of_statements();
			setState(2697);
			match(END);
			setState(2698);
			match(LOOP);
			setState(2700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(2699);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Token range;
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_loop_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_loop_param(this);
		}
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_cursor_loop_param);
		int _la;
		try {
			setState(2727);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2702);
				index_name();
				setState(2703);
				match(IN);
				setState(2705);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
				case 1:
					{
					setState(2704);
					match(REVERSE);
					}
					break;
				}
				setState(2707);
				lower_bound();
				setState(2708);
				((Cursor_loop_paramContext)_localctx).range = match(DOUBLE_PERIOD);
				setState(2709);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2711);
				record_name();
				setState(2712);
				match(IN);
				setState(2725);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2713);
					cursor_name();
					setState(2719);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(2714);
						match(LEFT_PAREN);
						setState(2716);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PRIOR - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (DECODE - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (NVL - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROUND - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TO_CHAR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (LEAST - 514)) | (1L << (GREATEST - 514)) | (1L << (TO_DATE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (UNSIGNED_INTEGER - 514)) | (1L << (APPROXIMATE_NUM_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (LEFT_PAREN - 514)) | (1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
							{
							setState(2715);
							expressions();
							}
						}

						setState(2718);
						match(RIGHT_PAREN);
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(2721);
					match(LEFT_PAREN);
					setState(2722);
					select_statement();
					setState(2723);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forall_statementContext extends ParserRuleContext {
		public TerminalNode FORALL() { return getToken(PlSqlParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public TerminalNode SAVE() { return getToken(PlSqlParser.SAVE, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterForall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitForall_statement(this);
		}
	}

	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_forall_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2729);
			match(FORALL);
			setState(2730);
			index_name();
			setState(2731);
			match(IN);
			setState(2732);
			bounds_clause();
			setState(2733);
			sql_statement();
			setState(2736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAVE) {
				{
				setState(2734);
				match(SAVE);
				setState(2735);
				match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bounds_clauseContext extends ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode INDICES() { return getToken(PlSqlParser.INDICES, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBounds_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBounds_clause(this);
		}
	}

	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_bounds_clause);
		int _la;
		try {
			setState(2751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2738);
				lower_bound();
				setState(2739);
				match(DOUBLE_PERIOD);
				setState(2740);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2742);
				match(INDICES);
				setState(2743);
				match(OF);
				setState(2744);
				collection_name();
				setState(2746);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(2745);
					between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2748);
				match(VALUES);
				setState(2749);
				match(OF);
				setState(2750);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_boundContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBetween_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBetween_bound(this);
		}
	}

	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2753);
			match(BETWEEN);
			setState(2754);
			lower_bound();
			setState(2755);
			match(AND);
			setState(2756);
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLower_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLower_bound(this);
		}
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2758);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUpper_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUpper_bound(this);
		}
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2760);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_statementContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNull_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNull_statement(this);
		}
	}

	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2762);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRaise_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRaise_statement(this);
		}
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2764);
			match(RAISE);
			setState(2766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(2765);
				exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReturn_statement(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2768);
			match(RETURN);
			setState(2770);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PRIOR - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (DECODE - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (NVL - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROUND - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TO_CHAR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (LEAST - 514)) | (1L << (GREATEST - 514)) | (1L << (TO_DATE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (UNSIGNED_INTEGER - 514)) | (1L << (APPROXIMATE_NUM_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (LEFT_PAREN - 514)) | (1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(2769);
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_call(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_function_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2773);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				setState(2772);
				match(CALL);
				}
				break;
			}
			setState(2775);
			routine_name();
			setState(2777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2776);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pipe_row_statementContext extends ParserRuleContext {
		public TerminalNode PIPE() { return getToken(PlSqlParser.PIPE, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Pipe_row_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pipe_row_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPipe_row_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPipe_row_statement(this);
		}
	}

	public final Pipe_row_statementContext pipe_row_statement() throws RecognitionException {
		Pipe_row_statementContext _localctx = new Pipe_row_statementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_pipe_row_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2779);
			match(PIPE);
			setState(2780);
			match(ROW);
			setState(2781);
			match(LEFT_PAREN);
			setState(2782);
			expression();
			setState(2783);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBody(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2785);
			match(BEGIN);
			setState(2786);
			seq_of_statements();
			setState(2793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(2787);
				match(EXCEPTION);
				setState(2789); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2788);
					exception_handler();
					}
					}
					setState(2791); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				}
			}

			setState(2795);
			match(END);
			setState(2797);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				{
				setState(2796);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_handlerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterException_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitException_handler(this);
		}
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2799);
			match(WHEN);
			setState(2800);
			exception_name();
			setState(2805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(2801);
				match(OR);
				setState(2802);
				exception_name();
				}
				}
				setState(2807);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2808);
			match(THEN);
			setState(2809);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_blockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTrigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTrigger_block(this);
		}
	}

	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2819);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PROCEDURE - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(2812);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2811);
					match(DECLARE);
					}
				}

				setState(2815); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2814);
					declare_spec();
					}
					}
					setState(2817); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PROCEDURE - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0) );
				}
			}

			setState(2821);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBlock(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(2823);
				match(DECLARE);
				}
			}

			setState(2827); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2826);
				declare_spec();
				}
				}
				setState(2829); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PROCEDURE - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0) );
			setState(2831);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statementContext extends ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSql_statement(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_sql_statement);
		try {
			setState(2837);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2833);
				execute_immediate();
				}
				break;
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2834);
				data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2835);
				cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(2836);
				transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_immediateContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExecute_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExecute_immediate(this);
		}
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_execute_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2839);
			match(EXECUTE);
			setState(2840);
			match(IMMEDIATE);
			setState(2841);
			expression();
			setState(2851);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BULK:
			case INTO:
				{
				setState(2842);
				into_clause();
				setState(2844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2843);
					using_clause();
					}
				}

				}
				break;
			case USING:
				{
				setState(2846);
				using_clause();
				setState(2848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING || _la==RETURN) {
					{
					setState(2847);
					dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURNING:
			case RETURN:
				{
				setState(2850);
				dynamic_returning_clause();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDynamic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDynamic_returning_clause(this);
		}
	}

	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2853);
			_la = _input.LA(1);
			if ( !(_la==RETURNING || _la==RETURN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2854);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterData_manipulation_language_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitData_manipulation_language_statements(this);
		}
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_data_manipulation_language_statements);
		try {
			setState(2863);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MERGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2856);
				merge_statement();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2857);
				lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2858);
				select_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2859);
				update_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2860);
				delete_statement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2861);
				insert_statement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 7);
				{
				setState(2862);
				explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_manipulation_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_manipulation_statements(this);
		}
	}

	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_cursor_manipulation_statements);
		try {
			setState(2869);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2865);
				close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2866);
				open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2867);
				fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2868);
				open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PlSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitClose_statement(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2871);
			match(CLOSE);
			setState(2872);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOpen_statement(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2874);
			match(OPEN);
			setState(2875);
			cursor_name();
			setState(2881);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2876);
				match(LEFT_PAREN);
				setState(2878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PRIOR - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (DECODE - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (NVL - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROUND - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TO_CHAR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (LEAST - 514)) | (1L << (GREATEST - 514)) | (1L << (TO_DATE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (UNSIGNED_INTEGER - 514)) | (1L << (APPROXIMATE_NUM_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (LEFT_PAREN - 514)) | (1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
					{
					setState(2877);
					expressions();
					}
				}

				setState(2880);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Token it1;
		public TerminalNode FETCH() { return getToken(PlSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFetch_statement(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2883);
			match(FETCH);
			setState(2884);
			cursor_name();
			setState(2905);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(2885);
				((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(2886);
				variable_name();
				setState(2891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2887);
					match(COMMA);
					setState(2888);
					variable_name();
					}
					}
					setState(2893);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				{
				setState(2894);
				match(BULK);
				setState(2895);
				match(COLLECT);
				setState(2896);
				match(INTO);
				setState(2897);
				variable_name();
				setState(2902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2898);
					match(COMMA);
					setState(2899);
					variable_name();
					}
					}
					setState(2904);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_for_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOpen_for_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOpen_for_statement(this);
		}
	}

	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_open_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2907);
			match(OPEN);
			setState(2908);
			variable_name();
			setState(2909);
			match(FOR);
			setState(2912);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				setState(2910);
				select_statement();
				}
				break;
			case 2:
				{
				setState(2911);
				expression();
				}
				break;
			}
			setState(2915);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2914);
				using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_control_statementsContext extends ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTransaction_control_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTransaction_control_statements(this);
		}
	}

	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_transaction_control_statements);
		try {
			setState(2922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2917);
				set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2918);
				set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2919);
				commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2920);
				rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2921);
				savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode ISOLATION() { return getToken(PlSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlSqlParser.SERIALIZABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(PlSqlParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSet_transaction_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSet_transaction_command(this);
		}
	}

	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2924);
			match(SET);
			setState(2925);
			match(TRANSACTION);
			setState(2939);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(2926);
				match(READ);
				setState(2927);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ISOLATION:
				{
				setState(2928);
				match(ISOLATION);
				setState(2929);
				match(LEVEL);
				setState(2933);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(2930);
					match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(2931);
					match(READ);
					setState(2932);
					match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case USE:
				{
				setState(2935);
				match(USE);
				setState(2936);
				match(ROLLBACK);
				setState(2937);
				match(SEGMENT);
				setState(2938);
				rollback_segment_name();
				}
				break;
			case EOF:
			case NAME:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			setState(2943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2941);
				match(NAME);
				setState(2942);
				quoted_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraint_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSet_constraint_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSet_constraint_command(this);
		}
	}

	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_set_constraint_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2945);
			match(SET);
			setState(2946);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2956);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(2947);
				match(ALL);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2948);
				constraint_name();
				setState(2953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2949);
					match(COMMA);
					setState(2950);
					constraint_name();
					}
					}
					setState(2955);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2958);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return getRuleContext(Write_clauseContext.class,0);
		}
		public TerminalNode CORRUPT_XID() { return getToken(PlSqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCommit_statement(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2960);
			match(COMMIT);
			setState(2962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2961);
				match(WORK);
				}
			}

			setState(2977);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				{
				setState(2964);
				match(COMMENT);
				setState(2965);
				expression();
				}
				break;
			case FORCE:
				{
				setState(2966);
				match(FORCE);
				setState(2975);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					setState(2967);
					match(CORRUPT_XID);
					setState(2968);
					expression();
					}
					break;
				case 2:
					{
					setState(2969);
					match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					setState(2970);
					expression();
					setState(2973);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2971);
						match(COMMA);
						setState(2972);
						expression();
						}
					}

					}
					break;
				}
				}
				break;
			case EOF:
			case SAVE:
			case WRITE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			setState(2980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WRITE) {
				{
				setState(2979);
				write_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Write_clauseContext extends ParserRuleContext {
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWrite_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWrite_clause(this);
		}
	}

	public final Write_clauseContext write_clause() throws RecognitionException {
		Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_write_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2982);
			match(WRITE);
			setState(2984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(2983);
				_la = _input.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2987);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BATCH || _la==IMMEDIATE) {
				{
				setState(2986);
				_la = _input.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRollback_statement(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2989);
			match(ROLLBACK);
			setState(2991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2990);
				match(WORK);
				}
			}

			setState(3000);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(2993);
				match(TO);
				setState(2995);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
				case 1:
					{
					setState(2994);
					match(SAVEPOINT);
					}
					break;
				}
				setState(2997);
				savepoint_name();
				}
				break;
			case FORCE:
				{
				setState(2998);
				match(FORCE);
				setState(2999);
				quoted_string();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSavepoint_statement(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3002);
			match(SAVEPOINT);
			setState(3003);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compilation_unitContext extends ParserRuleContext {
		public Sql_scriptContext sql_script() {
			return getRuleContext(Sql_scriptContext.class,0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compilation_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompilation_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompilation_unit(this);
		}
	}

	public final Compilation_unitContext compilation_unit() throws RecognitionException {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_compilation_unit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3005);
			sql_script();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PlSqlParser.EXPLAIN, 0); }
		public TerminalNode PLAN() { return getToken(PlSqlParser.PLAN, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(PlSqlParser.STATEMENT_ID, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExplain_statement(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3007);
			match(EXPLAIN);
			setState(3008);
			match(PLAN);
			setState(3013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(3009);
				match(SET);
				setState(3010);
				match(STATEMENT_ID);
				setState(3011);
				match(EQUALS_OP);
				setState(3012);
				quoted_string();
				}
			}

			setState(3017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3015);
				match(INTO);
				setState(3016);
				tableview_name();
				}
			}

			setState(3019);
			match(FOR);
			setState(3025);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(3020);
				select_statement();
				}
				break;
			case UPDATE:
				{
				setState(3021);
				update_statement();
				}
				break;
			case DELETE:
				{
				setState(3022);
				delete_statement();
				}
				break;
			case INSERT:
				{
				setState(3023);
				insert_statement();
				}
				break;
			case MERGE:
				{
				setState(3024);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSelect_statement(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3027);
				subquery_factoring_clause();
				}
			}

			setState(3030);
			subquery();
			setState(3035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				setState(3033);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(3031);
					for_update_clause();
					}
					break;
				case ORDER:
					{
					setState(3032);
					order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3037);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery_factoring_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery_factoring_clause(this);
		}
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3038);
			match(WITH);
			setState(3039);
			factoring_element();
			setState(3044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3040);
				match(COMMA);
				setState(3041);
				factoring_element();
				}
				}
				setState(3046);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Factoring_elementContext extends ParserRuleContext {
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factoring_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFactoring_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFactoring_element(this);
		}
	}

	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3047);
			query_name();
			setState(3059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3048);
				match(LEFT_PAREN);
				setState(3049);
				column_name();
				setState(3054);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3050);
					match(COMMA);
					setState(3051);
					column_name();
					}
					}
					setState(3056);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3057);
				match(RIGHT_PAREN);
				}
			}

			setState(3061);
			match(AS);
			setState(3062);
			match(LEFT_PAREN);
			setState(3063);
			subquery();
			setState(3065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3064);
				order_by_clause();
				}
			}

			setState(3067);
			match(RIGHT_PAREN);
			setState(3069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(3068);
				search_clause();
				}
			}

			setState(3072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CYCLE) {
				{
				setState(3071);
				cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_clauseContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(PlSqlParser.SEARCH, 0); }
		public List<TerminalNode> FIRST() { return getTokens(PlSqlParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(PlSqlParser.FIRST, i);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode DEPTH() { return getToken(PlSqlParser.DEPTH, 0); }
		public TerminalNode BREADTH() { return getToken(PlSqlParser.BREADTH, 0); }
		public List<TerminalNode> ASC() { return getTokens(PlSqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(PlSqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(PlSqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(PlSqlParser.DESC, i);
		}
		public List<TerminalNode> NULLS() { return getTokens(PlSqlParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(PlSqlParser.NULLS, i);
		}
		public List<TerminalNode> LAST() { return getTokens(PlSqlParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(PlSqlParser.LAST, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSearch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSearch_clause(this);
		}
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3074);
			match(SEARCH);
			setState(3075);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3076);
			match(FIRST);
			setState(3077);
			match(BY);
			setState(3078);
			column_name();
			setState(3080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(3079);
				match(ASC);
				}
			}

			setState(3083);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(3082);
				match(DESC);
				}
			}

			setState(3087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				setState(3085);
				match(NULLS);
				setState(3086);
				match(FIRST);
				}
				break;
			}
			setState(3091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(3089);
				match(NULLS);
				setState(3090);
				match(LAST);
				}
			}

			setState(3111);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3093);
				match(COMMA);
				setState(3094);
				column_name();
				setState(3096);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(3095);
					match(ASC);
					}
				}

				setState(3099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(3098);
					match(DESC);
					}
				}

				setState(3103);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
				case 1:
					{
					setState(3101);
					match(NULLS);
					setState(3102);
					match(FIRST);
					}
					break;
				}
				setState(3107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(3105);
					match(NULLS);
					setState(3106);
					match(LAST);
					}
				}

				}
				}
				setState(3113);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3114);
			match(SET);
			setState(3115);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_clauseContext extends ParserRuleContext {
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCycle_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCycle_clause(this);
		}
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_cycle_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3117);
			match(CYCLE);
			setState(3118);
			column_name();
			setState(3123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3119);
				match(COMMA);
				setState(3120);
				column_name();
				}
				}
				setState(3125);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3126);
			match(SET);
			setState(3127);
			column_name();
			setState(3128);
			match(TO);
			setState(3129);
			expression();
			setState(3130);
			match(DEFAULT);
			setState(3131);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_subquery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3133);
			subquery_basic_elements();
			setState(3137);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				setState(3134);
				subquery_operation_part();
				}
				}
				setState(3139);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_basic_elementsContext extends ParserRuleContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery_basic_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery_basic_elements(this);
		}
	}

	public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_subquery_basic_elements);
		try {
			setState(3145);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3140);
				query_block();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3141);
				match(LEFT_PAREN);
				setState(3142);
				subquery();
				setState(3143);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_operation_partContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public TerminalNode UNION() { return getToken(PlSqlParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(PlSqlParser.INTERSECT, 0); }
		public TerminalNode MINUS() { return getToken(PlSqlParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery_operation_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery_operation_part(this);
		}
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3153);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(3147);
				match(UNION);
				setState(3149);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3148);
					match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				setState(3151);
				match(INTERSECT);
				}
				break;
			case MINUS:
				{
				setState(3152);
				match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3155);
			subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_blockContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuery_block(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_query_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3157);
			match(SELECT);
			setState(3159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				setState(3158);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3170);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(3161);
				match(ASTERISK);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3162);
				selected_element();
				setState(3167);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3163);
					match(COMMA);
					setState(3164);
					selected_element();
					}
					}
					setState(3169);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				setState(3172);
				into_clause();
				}
			}

			setState(3175);
			from_clause();
			setState(3177);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(3176);
				where_clause();
				}
				break;
			}
			setState(3180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				setState(3179);
				hierarchical_query_clause();
				}
				break;
			}
			setState(3183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				{
				setState(3182);
				group_by_clause();
				}
				break;
			}
			setState(3186);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				{
				setState(3185);
				model_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSelected_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSelected_element(this);
		}
	}

	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_selected_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3188);
			select_list_elements();
			setState(3190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
			case 1:
				{
				setState(3189);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return getRuleContext(Table_ref_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFrom_clause(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3192);
			match(FROM);
			setState(3193);
			table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elementsContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSelect_list_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSelect_list_elements(this);
		}
	}

	public final Select_list_elementsContext select_list_elements() throws RecognitionException {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_select_list_elements);
		try {
			setState(3205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3195);
				tableview_name();
				setState(3196);
				match(PERIOD);
				setState(3197);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3202);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
				case 1:
					{
					setState(3199);
					regular_id();
					setState(3200);
					match(PERIOD);
					}
					break;
				}
				setState(3204);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_listContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref_list(this);
		}
	}

	public final Table_ref_listContext table_ref_list() throws RecognitionException {
		Table_ref_listContext _localctx = new Table_ref_listContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_table_ref_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3207);
			table_ref();
			setState(3212);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,353,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3208);
					match(COMMA);
					setState(3209);
					table_ref();
					}
					} 
				}
				setState(3214);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,353,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_table_ref);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3215);
			table_ref_aux();
			setState(3219);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,354,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3216);
					join_clause();
					}
					} 
				}
				setState(3221);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,354,_ctx);
			}
			setState(3224);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				{
				setState(3222);
				pivot_clause();
				}
				break;
			case 2:
				{
				setState(3223);
				unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_auxContext extends ParserRuleContext {
		public Table_ref_aux_internalContext table_ref_aux_internal() {
			return getRuleContext(Table_ref_aux_internalContext.class,0);
		}
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref_aux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref_aux(this);
		}
	}

	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_table_ref_aux);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3226);
			table_ref_aux_internal();
			setState(3230);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,356,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3227);
					flashback_query_clause();
					}
					} 
				}
				setState(3232);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,356,_ctx);
			}
			setState(3234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				setState(3233);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_aux_internalContext extends ParserRuleContext {
		public Table_ref_aux_internalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux_internal; }
	 
		public Table_ref_aux_internalContext() { }
		public void copyFrom(Table_ref_aux_internalContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Table_ref_aux_internal_threeContext extends Table_ref_aux_internalContext {
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Table_ref_aux_internal_threeContext(Table_ref_aux_internalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref_aux_internal_three(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref_aux_internal_three(this);
		}
	}
	public static class Table_ref_aux_internal_oneContext extends Table_ref_aux_internalContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_ref_aux_internal_oneContext(Table_ref_aux_internalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref_aux_internal_one(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref_aux_internal_one(this);
		}
	}
	public static class Table_ref_aux_internal_twoContext extends Table_ref_aux_internalContext {
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_ref_aux_internal_twoContext(Table_ref_aux_internalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref_aux_internal_two(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref_aux_internal_two(this);
		}
	}

	public final Table_ref_aux_internalContext table_ref_aux_internal() throws RecognitionException {
		Table_ref_aux_internalContext _localctx = new Table_ref_aux_internalContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_table_ref_aux_internal);
		int _la;
		try {
			setState(3259);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				_localctx = new Table_ref_aux_internal_oneContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3236);
				dml_table_expression_clause();
				setState(3239);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
				case 1:
					{
					setState(3237);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(3238);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new Table_ref_aux_internal_twoContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3241);
				match(LEFT_PAREN);
				setState(3242);
				table_ref();
				setState(3246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INTERSECT || _la==MINUS || _la==UNION) {
					{
					{
					setState(3243);
					subquery_operation_part();
					}
					}
					setState(3248);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3249);
				match(RIGHT_PAREN);
				setState(3252);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
				case 1:
					{
					setState(3250);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(3251);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new Table_ref_aux_internal_threeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3254);
				match(ONLY);
				setState(3255);
				match(LEFT_PAREN);
				setState(3256);
				dml_table_expression_clause();
				setState(3257);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public TerminalNode INNER() { return getToken(PlSqlParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public List<Join_on_partContext> join_on_part() {
			return getRuleContexts(Join_on_partContext.class);
		}
		public Join_on_partContext join_on_part(int i) {
			return getRuleContext(Join_on_partContext.class,i);
		}
		public List<Join_using_partContext> join_using_part() {
			return getRuleContexts(Join_using_partContext.class);
		}
		public Join_using_partContext join_using_part(int i) {
			return getRuleContext(Join_using_partContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(PlSqlParser.CROSS, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitJoin_clause(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_join_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3261);
				query_partition_clause();
				}
			}

			setState(3265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				setState(3264);
				_la = _input.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3269);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
				{
				setState(3267);
				match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(3268);
				outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				break;
			}
			setState(3271);
			match(JOIN);
			setState(3272);
			table_ref_aux();
			setState(3274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				setState(3273);
				query_partition_clause();
				}
				break;
			}
			setState(3280);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,367,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(3278);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ON:
						{
						setState(3276);
						join_on_part();
						}
						break;
					case USING:
						{
						setState(3277);
						join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(3282);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,367,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_on_partContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterJoin_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitJoin_on_part(this);
		}
	}

	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3283);
			match(ON);
			setState(3284);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_using_partContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_using_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterJoin_using_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitJoin_using_part(this);
		}
	}

	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_join_using_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3286);
			match(USING);
			setState(3287);
			match(LEFT_PAREN);
			setState(3288);
			column_name();
			setState(3293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3289);
				match(COMMA);
				setState(3290);
				column_name();
				}
				}
				setState(3295);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3296);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(PlSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PlSqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(PlSqlParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOuter_join_type(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3298);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(3299);
				match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuery_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuery_partition_clause(this);
		}
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_query_partition_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3302);
			match(PARTITION);
			setState(3303);
			match(BY);
			setState(3311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
			case 1:
				{
				{
				setState(3304);
				match(LEFT_PAREN);
				setState(3307);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					setState(3305);
					subquery();
					}
					break;
				case 2:
					{
					setState(3306);
					expressions();
					}
					break;
				}
				setState(3309);
				match(RIGHT_PAREN);
				}
				}
				break;
			case 2:
				{
				setState(3310);
				expressions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public TerminalNode VERSIONS() { return getToken(PlSqlParser.VERSIONS, 0); }
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SCN() { return getToken(PlSqlParser.SCN, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlSqlParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFlashback_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFlashback_query_clause(this);
		}
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_flashback_query_clause);
		int _la;
		try {
			setState(3321);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3313);
				match(VERSIONS);
				setState(3314);
				match(BETWEEN);
				setState(3315);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3316);
				expression();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3317);
				match(AS);
				setState(3318);
				match(OF);
				setState(3319);
				_la = _input.LA(1);
				if ( !(((((_la - 371)) & ~0x3f) == 0 && ((1L << (_la - 371)) & ((1L << (SCN - 371)) | (1L << (SNAPSHOT - 371)) | (1L << (TIMESTAMP - 371)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3320);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(PlSqlParser.PIVOT, 0); }
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_clause(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3323);
			match(PIVOT);
			setState(3325);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(3324);
				match(XML);
				}
			}

			setState(3327);
			match(LEFT_PAREN);
			setState(3328);
			pivot_element();
			setState(3333);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3329);
				match(COMMA);
				setState(3330);
				pivot_element();
				}
				}
				setState(3335);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3336);
			pivot_for_clause();
			setState(3337);
			pivot_in_clause();
			setState(3338);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_elementContext extends ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_element(this);
		}
	}

	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_pivot_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3340);
			aggregate_function_name();
			setState(3341);
			match(LEFT_PAREN);
			setState(3342);
			expression();
			setState(3343);
			match(RIGHT_PAREN);
			setState(3345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(3344);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_for_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_for_clause(this);
		}
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_pivot_for_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3347);
			match(FOR);
			setState(3360);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3348);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3349);
				match(LEFT_PAREN);
				setState(3350);
				column_name();
				setState(3355);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3351);
					match(COMMA);
					setState(3352);
					column_name();
					}
					}
					setState(3357);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3358);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> ANY() { return getTokens(PlSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(PlSqlParser.ANY, i);
		}
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_in_clause(this);
		}
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3362);
			match(IN);
			setState(3363);
			match(LEFT_PAREN);
			setState(3381);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				setState(3364);
				subquery();
				}
				break;
			case 2:
				{
				setState(3365);
				match(ANY);
				setState(3370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3366);
					match(COMMA);
					setState(3367);
					match(ANY);
					}
					}
					setState(3372);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(3373);
				pivot_in_clause_element();
				setState(3378);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3374);
					match(COMMA);
					setState(3375);
					pivot_in_clause_element();
					}
					}
					setState(3380);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3383);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_in_clause_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_in_clause_element(this);
		}
	}

	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_pivot_in_clause_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3385);
			pivot_in_clause_elements();
			setState(3387);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(3386);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_in_clause_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_in_clause_elements(this);
		}
	}

	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_pivot_in_clause_elements);
		int _la;
		try {
			setState(3395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3389);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3390);
				match(LEFT_PAREN);
				setState(3392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PRIOR - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (DECODE - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (NVL - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROUND - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TO_CHAR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (LEAST - 514)) | (1L << (GREATEST - 514)) | (1L << (TO_DATE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (UNSIGNED_INTEGER - 514)) | (1L << (APPROXIMATE_NUM_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (LEFT_PAREN - 514)) | (1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
					{
					setState(3391);
					expressions();
					}
				}

				setState(3394);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(PlSqlParser.UNPIVOT, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(PlSqlParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(PlSqlParser.EXCLUDE, 0); }
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnpivot_clause(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3397);
			match(UNPIVOT);
			setState(3400);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(3398);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3399);
				match(NULLS);
				}
			}

			setState(3402);
			match(LEFT_PAREN);
			setState(3415);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3403);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3404);
				match(LEFT_PAREN);
				setState(3405);
				column_name();
				setState(3410);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3406);
					match(COMMA);
					setState(3407);
					column_name();
					}
					}
					setState(3412);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3413);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3417);
			pivot_for_clause();
			setState(3418);
			unpivot_in_clause();
			setState(3419);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnpivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnpivot_in_clause(this);
		}
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3421);
			match(IN);
			setState(3422);
			match(LEFT_PAREN);
			setState(3423);
			unpivot_in_elements();
			setState(3428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3424);
				match(COMMA);
				setState(3425);
				unpivot_in_elements();
				}
				}
				setState(3430);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3431);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnpivot_in_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnpivot_in_elements(this);
		}
	}

	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3445);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3433);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3434);
				match(LEFT_PAREN);
				setState(3435);
				column_name();
				setState(3440);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3436);
					match(COMMA);
					setState(3437);
					column_name();
					}
					}
					setState(3442);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3443);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3462);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3447);
				match(AS);
				setState(3460);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					setState(3448);
					constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(3449);
					match(LEFT_PAREN);
					setState(3450);
					constant();
					setState(3455);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3451);
						match(COMMA);
						setState(3452);
						constant();
						}
						}
						setState(3457);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3458);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(PlSqlParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterHierarchical_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitHierarchical_query_clause(this);
		}
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_hierarchical_query_clause);
		try {
			setState(3481);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3464);
				match(CONNECT);
				setState(3465);
				match(BY);
				setState(3467);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					setState(3466);
					match(NOCYCLE);
					}
					break;
				}
				setState(3469);
				condition();
				setState(3471);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
				case 1:
					{
					setState(3470);
					start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(3473);
				start_part();
				setState(3474);
				match(CONNECT);
				setState(3475);
				match(BY);
				setState(3477);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
				case 1:
					{
					setState(3476);
					match(NOCYCLE);
					}
					break;
				}
				setState(3479);
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_partContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStart_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStart_part(this);
		}
	}

	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3483);
			match(START);
			setState(3484);
			match(WITH);
			setState(3485);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGroup_by_clause(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_group_by_clause);
		try {
			int _alt;
			setState(3513);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3487);
				match(GROUP);
				setState(3488);
				match(BY);
				setState(3489);
				group_by_elements();
				setState(3494);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,397,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3490);
						match(COMMA);
						setState(3491);
						group_by_elements();
						}
						} 
					}
					setState(3496);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,397,_ctx);
				}
				setState(3498);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					setState(3497);
					having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3500);
				having_clause();
				setState(3511);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					setState(3501);
					match(GROUP);
					setState(3502);
					match(BY);
					setState(3503);
					group_by_elements();
					setState(3508);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,399,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3504);
							match(COMMA);
							setState(3505);
							group_by_elements();
							}
							} 
						}
						setState(3510);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,399,_ctx);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_elementsContext extends ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGroup_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGroup_by_elements(this);
		}
	}

	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_group_by_elements);
		try {
			setState(3518);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3515);
				grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3516);
				rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3517);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRollup_cube_clause(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3520);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3521);
			match(LEFT_PAREN);
			setState(3522);
			grouping_sets_elements();
			setState(3527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3523);
				match(COMMA);
				setState(3524);
				grouping_sets_elements();
				}
				}
				setState(3529);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3530);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(PlSqlParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PlSqlParser.SETS, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGrouping_sets_clause(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3532);
			match(GROUPING);
			setState(3533);
			match(SETS);
			setState(3534);
			match(LEFT_PAREN);
			setState(3535);
			grouping_sets_elements();
			setState(3540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3536);
				match(COMMA);
				setState(3537);
				grouping_sets_elements();
				}
				}
				setState(3542);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3543);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGrouping_sets_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGrouping_sets_elements(this);
		}
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_grouping_sets_elements);
		int _la;
		try {
			setState(3552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3545);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3546);
				match(LEFT_PAREN);
				setState(3548);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PRIOR - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (DECODE - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (NVL - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROUND - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TO_CHAR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (LEAST - 514)) | (1L << (GREATEST - 514)) | (1L << (TO_DATE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (UNSIGNED_INTEGER - 514)) | (1L << (APPROXIMATE_NUM_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (LEFT_PAREN - 514)) | (1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
					{
					setState(3547);
					expressions();
					}
				}

				setState(3550);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3551);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PlSqlParser.HAVING, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitHaving_clause(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3554);
			match(HAVING);
			setState(3555);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_clauseContext extends ParserRuleContext {
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_clause(this);
		}
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3557);
			match(MODEL);
			setState(3561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3558);
				cell_reference_options();
				}
				}
				setState(3563);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3565);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(3564);
				return_rows_clause();
				}
			}

			setState(3570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(3567);
				reference_model();
				}
				}
				setState(3572);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3573);
			main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public TerminalNode NAV() { return getToken(PlSqlParser.NAV, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode SINGLE() { return getToken(PlSqlParser.SINGLE, 0); }
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCell_reference_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCell_reference_options(this);
		}
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_cell_reference_options);
		int _la;
		try {
			setState(3583);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3575);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3576);
				match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3577);
				match(UNIQUE);
				setState(3581);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(3578);
					match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(3579);
					match(SINGLE);
					setState(3580);
					match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_rows_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode UPDATED() { return getToken(PlSqlParser.UPDATED, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReturn_rows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReturn_rows_clause(this);
		}
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3585);
			match(RETURN);
			setState(3586);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3587);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modelContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReference_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReference_model(this);
		}
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3589);
			match(REFERENCE);
			setState(3590);
			reference_model_name();
			setState(3591);
			match(ON);
			setState(3592);
			match(LEFT_PAREN);
			setState(3593);
			subquery();
			setState(3594);
			match(RIGHT_PAREN);
			setState(3595);
			model_column_clauses();
			setState(3599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3596);
				cell_reference_options();
				}
				}
				setState(3601);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_modelContext extends ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public TerminalNode MAIN() { return getToken(PlSqlParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMain_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMain_model(this);
		}
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(3602);
				match(MAIN);
				setState(3603);
				main_model_name();
				}
			}

			setState(3606);
			model_column_clauses();
			setState(3610);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3607);
				cell_reference_options();
				}
				}
				setState(3612);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3613);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_clausesContext extends ParserRuleContext {
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		public TerminalNode MEASURES() { return getToken(PlSqlParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_column_clauses(this);
		}
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3615);
				model_column_partition_part();
				}
			}

			setState(3618);
			match(DIMENSION);
			setState(3619);
			match(BY);
			setState(3620);
			model_column_list();
			setState(3621);
			match(MEASURES);
			setState(3622);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_partition_partContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_column_partition_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_column_partition_part(this);
		}
	}

	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3624);
			match(PARTITION);
			setState(3625);
			match(BY);
			setState(3626);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_listContext extends ParserRuleContext {
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_column_list(this);
		}
	}

	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3628);
			match(LEFT_PAREN);
			setState(3629);
			model_column();
			setState(3634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3630);
				match(COMMA);
				setState(3631);
				model_column();
				}
				}
				setState(3636);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3637);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_columnContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_column(this);
		}
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_model_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3641);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3639);
				expression();
				}
				break;
			case SELECT:
				{
				setState(3640);
				query_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3644);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(3643);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_clauseContext extends ParserRuleContext {
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_rules_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_rules_clause(this);
		}
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3647);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(3646);
				model_rules_part();
				}
			}

			setState(3649);
			match(LEFT_PAREN);
			setState(3658);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PRIOR - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPDATE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (DECODE - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (NVL - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROUND - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TO_CHAR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (LEAST - 514)) | (1L << (GREATEST - 514)) | (1L << (TO_DATE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (UNSIGNED_INTEGER - 514)) | (1L << (APPROXIMATE_NUM_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (LEFT_PAREN - 514)) | (1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(3650);
				model_rules_element();
				setState(3655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3651);
					match(COMMA);
					setState(3652);
					model_rules_element();
					}
					}
					setState(3657);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3660);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_partContext extends ParserRuleContext {
		public TerminalNode RULES() { return getToken(PlSqlParser.RULES, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		public TerminalNode AUTOMATIC() { return getToken(PlSqlParser.AUTOMATIC, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(PlSqlParser.SEQUENTIAL, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_rules_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_rules_part(this);
		}
	}

	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3662);
			match(RULES);
			setState(3668);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(3663);
				match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(3664);
				match(UPSERT);
				setState(3666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3665);
					match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			setState(3672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(3670);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3671);
				match(ORDER);
				}
			}

			setState(3675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(3674);
				model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_elementContext extends ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_rules_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_rules_element(this);
		}
	}

	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3682);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				setState(3677);
				match(UPDATE);
				}
				break;
			case 2:
				{
				setState(3678);
				match(UPSERT);
				setState(3680);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
				case 1:
					{
					setState(3679);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(3684);
			cell_assignment();
			setState(3686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3685);
				order_by_clause();
				}
			}

			setState(3688);
			match(EQUALS_OP);
			setState(3689);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignmentContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCell_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCell_assignment(this);
		}
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3691);
			model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_iterate_clauseContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(PlSqlParser.ITERATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_iterate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_iterate_clause(this);
		}
	}

	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3693);
			match(ITERATE);
			setState(3694);
			match(LEFT_PAREN);
			setState(3695);
			expression();
			setState(3696);
			match(RIGHT_PAREN);
			setState(3698);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3697);
				until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Until_partContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(PlSqlParser.UNTIL, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUntil_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUntil_part(this);
		}
	}

	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3700);
			match(UNTIL);
			setState(3701);
			match(LEFT_PAREN);
			setState(3702);
			condition();
			setState(3703);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		public TerminalNode SIBLINGS() { return getToken(PlSqlParser.SIBLINGS, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOrder_by_clause(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_order_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3705);
			match(ORDER);
			setState(3707);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(3706);
				match(SIBLINGS);
				}
			}

			setState(3709);
			match(BY);
			setState(3710);
			order_by_elements();
			setState(3715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3711);
				match(COMMA);
				setState(3712);
				order_by_elements();
				}
				}
				setState(3717);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(PlSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PlSqlParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOrder_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOrder_by_elements(this);
		}
	}

	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3718);
			expression();
			setState(3720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3719);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(3722);
				match(NULLS);
				setState(3723);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFor_update_clause(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_for_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3726);
			match(FOR);
			setState(3727);
			match(UPDATE);
			setState(3729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(3728);
				for_update_of_part();
				}
			}

			setState(3732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==SKIP_ || _la==WAIT) {
				{
				setState(3731);
				for_update_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_of_partContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFor_update_of_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFor_update_of_part(this);
		}
	}

	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_for_update_of_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3734);
			match(OF);
			setState(3735);
			column_name();
			setState(3740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3736);
				match(COMMA);
				setState(3737);
				column_name();
				}
				}
				setState(3742);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(PlSqlParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(PlSqlParser.LOCKED, 0); }
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFor_update_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFor_update_options(this);
		}
	}

	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_for_update_options);
		try {
			setState(3748);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3743);
				match(SKIP_);
				setState(3744);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3745);
				match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3746);
				match(WAIT);
				setState(3747);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUpdate_statement(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3750);
			match(UPDATE);
			setState(3751);
			general_table_ref();
			setState(3752);
			update_set_clause();
			setState(3754);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3753);
				where_clause();
				}
			}

			setState(3757);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING || _la==RETURN) {
				{
				setState(3756);
				static_returning_clause();
				}
			}

			setState(3760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3759);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUpdate_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUpdate_set_clause(this);
		}
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_update_set_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3762);
			match(SET);
			setState(3778);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
			case 1:
				{
				setState(3763);
				column_based_update_set_clause();
				setState(3768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3764);
					match(COMMA);
					setState(3765);
					column_based_update_set_clause();
					}
					}
					setState(3770);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(3771);
				match(VALUE);
				setState(3772);
				match(LEFT_PAREN);
				setState(3773);
				identifier();
				setState(3774);
				match(RIGHT_PAREN);
				setState(3775);
				match(EQUALS_OP);
				setState(3776);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterColumn_based_update_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitColumn_based_update_set_clause(this);
		}
	}

	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_column_based_update_set_clause);
		int _la;
		try {
			setState(3797);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3780);
				column_name();
				setState(3781);
				match(EQUALS_OP);
				setState(3782);
				expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3784);
				match(LEFT_PAREN);
				setState(3785);
				column_name();
				setState(3790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3786);
					match(COMMA);
					setState(3787);
					column_name();
					}
					}
					setState(3792);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3793);
				match(RIGHT_PAREN);
				setState(3794);
				match(EQUALS_OP);
				setState(3795);
				subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDelete_statement(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3799);
			match(DELETE);
			setState(3801);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3800);
				match(FROM);
				}
			}

			setState(3803);
			general_table_ref();
			setState(3805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3804);
				where_clause();
				}
			}

			setState(3808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING || _la==RETURN) {
				{
				setState(3807);
				static_returning_clause();
				}
			}

			setState(3811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3810);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInsert_statement(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3813);
			match(INSERT);
			setState(3816);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(3814);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(3815);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_table_insertContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSingle_table_insert(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_single_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3818);
			insert_into_clause();
			setState(3824);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(3819);
				values_clause();
				setState(3821);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING || _la==RETURN) {
					{
					setState(3820);
					static_returning_clause();
					}
				}

				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(3823);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3826);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_insertContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMulti_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMulti_table_insert(this);
		}
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3836);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				setState(3829);
				match(ALL);
				setState(3831); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3830);
					multi_table_element();
					}
					}
					setState(3833); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(3835);
				conditional_insert_clause();
				}
				break;
			}
			setState(3838);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_elementContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMulti_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMulti_table_element(this);
		}
	}

	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3840);
			insert_into_clause();
			setState(3842);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(3841);
				values_clause();
				}
			}

			setState(3845);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3844);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConditional_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConditional_insert_clause(this);
		}
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(3847);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3851); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3850);
				conditional_insert_when_part();
				}
				}
				setState(3853); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3856);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3855);
				conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConditional_insert_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConditional_insert_when_part(this);
		}
	}

	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3858);
			match(WHEN);
			setState(3859);
			condition();
			setState(3860);
			match(THEN);
			setState(3862); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3861);
				multi_table_element();
				}
				}
				setState(3864); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConditional_insert_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConditional_insert_else_part(this);
		}
	}

	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3866);
			match(ELSE);
			setState(3868); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3867);
				multi_table_element();
				}
				}
				setState(3870); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInsert_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInsert_into_clause(this);
		}
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_insert_into_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3872);
			match(INTO);
			setState(3873);
			general_table_ref();
			setState(3885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				{
				setState(3874);
				match(LEFT_PAREN);
				setState(3875);
				column_name();
				setState(3880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3876);
					match(COMMA);
					setState(3877);
					column_name();
					}
					}
					setState(3882);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3883);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitValues_clause(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3887);
			match(VALUES);
			setState(3888);
			match(LEFT_PAREN);
			setState(3890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PRIOR - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (DECODE - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (NVL - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROUND - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TO_CHAR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (LEAST - 514)) | (1L << (GREATEST - 514)) | (1L << (TO_DATE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (UNSIGNED_INTEGER - 514)) | (1L << (APPROXIMATE_NUM_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (LEFT_PAREN - 514)) | (1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(3889);
				expressions();
				}
			}

			setState(3892);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_statement(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3894);
			match(MERGE);
			setState(3895);
			match(INTO);
			setState(3896);
			tableview_name();
			setState(3898);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(3897);
				table_alias();
				}
			}

			setState(3900);
			match(USING);
			setState(3901);
			selected_tableview();
			setState(3902);
			match(ON);
			setState(3903);
			match(LEFT_PAREN);
			setState(3904);
			condition();
			setState(3905);
			match(RIGHT_PAREN);
			setState(3914);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				setState(3906);
				merge_update_clause();
				setState(3908);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3907);
					merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(3910);
				merge_insert_clause();
				setState(3912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3911);
					merge_update_clause();
					}
				}

				}
				break;
			}
			setState(3917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3916);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_update_clause(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3919);
			match(WHEN);
			setState(3920);
			match(MATCHED);
			setState(3921);
			match(THEN);
			setState(3922);
			match(UPDATE);
			setState(3923);
			match(SET);
			setState(3924);
			merge_element();
			setState(3929);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3925);
				match(COMMA);
				setState(3926);
				merge_element();
				}
				}
				setState(3931);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3932);
				where_clause();
				}
			}

			setState(3936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
			case 1:
				{
				setState(3935);
				merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_elementContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_element(this);
		}
	}

	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3938);
			column_name();
			setState(3939);
			match(EQUALS_OP);
			setState(3940);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_delete_partContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_update_delete_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_update_delete_part(this);
		}
	}

	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3942);
			match(DELETE);
			setState(3943);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_insert_clause(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3945);
			match(WHEN);
			setState(3946);
			match(NOT);
			setState(3947);
			match(MATCHED);
			setState(3948);
			match(THEN);
			setState(3949);
			match(INSERT);
			setState(3961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3950);
				match(LEFT_PAREN);
				setState(3951);
				column_name();
				setState(3956);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3952);
					match(COMMA);
					setState(3953);
					column_name();
					}
					}
					setState(3958);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3959);
				match(RIGHT_PAREN);
				}
			}

			setState(3963);
			match(VALUES);
			setState(3964);
			match(LEFT_PAREN);
			setState(3966);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PRIOR - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (DECODE - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (NVL - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROUND - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TO_CHAR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (LEAST - 514)) | (1L << (GREATEST - 514)) | (1L << (TO_DATE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (UNSIGNED_INTEGER - 514)) | (1L << (APPROXIMATE_NUM_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (LEFT_PAREN - 514)) | (1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(3965);
				expressions();
				}
			}

			setState(3968);
			match(RIGHT_PAREN);
			setState(3970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3969);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_tableviewContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSelected_tableview(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSelected_tableview(this);
		}
	}

	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_selected_tableview);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3977);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3972);
				tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3973);
				match(LEFT_PAREN);
				setState(3974);
				select_statement();
				setState(3975);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(3979);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_statementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(PlSqlParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PlSqlParser.MODE, 0); }
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLock_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLock_table_statement(this);
		}
	}

	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3982);
			match(LOCK);
			setState(3983);
			match(TABLE);
			setState(3984);
			lock_table_element();
			setState(3989);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3985);
				match(COMMA);
				setState(3986);
				lock_table_element();
				}
				}
				setState(3991);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3992);
			match(IN);
			setState(3993);
			lock_mode();
			setState(3994);
			match(MODE);
			setState(3996);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(3995);
				wait_nowait_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Wait_nowait_partContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWait_nowait_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWait_nowait_part(this);
		}
	}

	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_wait_nowait_part);
		try {
			setState(4001);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3998);
				match(WAIT);
				setState(3999);
				expression();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4000);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_elementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLock_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLock_table_element(this);
		}
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4003);
			tableview_name();
			setState(4005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(4004);
				partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode SHARE() { return getToken(PlSqlParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PlSqlParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLock_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLock_mode(this);
		}
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_lock_mode);
		int _la;
		try {
			setState(4019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4007);
				match(ROW);
				setState(4008);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4009);
				match(ROW);
				setState(4010);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4011);
				match(SHARE);
				setState(4013);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(4012);
					match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4015);
				match(SHARE);
				setState(4016);
				match(ROW);
				setState(4017);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4018);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_table_refContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGeneral_table_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGeneral_table_ref(this);
		}
	}

	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				setState(4021);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(4022);
				match(ONLY);
				setState(4023);
				match(LEFT_PAREN);
				setState(4024);
				dml_table_expression_clause();
				setState(4025);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4030);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				{
				setState(4029);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_returning_clauseContext extends ParserRuleContext {
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStatic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStatic_returning_clause(this);
		}
	}

	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4032);
			_la = _input.LA(1);
			if ( !(_la==RETURNING || _la==RETURN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4033);
			expressions();
			setState(4034);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterError_logging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitError_logging_clause(this);
		}
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_error_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4036);
			match(LOG);
			setState(4037);
			match(ERRORS);
			setState(4039);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				setState(4038);
				error_logging_into_part();
				}
				break;
			}
			setState(4042);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(4041);
				expression();
				}
				break;
			}
			setState(4045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REJECT) {
				{
				setState(4044);
				error_logging_reject_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_into_partContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterError_logging_into_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitError_logging_into_part(this);
		}
	}

	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4047);
			match(INTO);
			setState(4048);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_reject_partContext extends ParserRuleContext {
		public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterError_logging_reject_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitError_logging_reject_part(this);
		}
	}

	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4050);
			match(REJECT);
			setState(4051);
			match(LIMIT);
			setState(4054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				{
				setState(4052);
				match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(4053);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDml_table_expression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDml_table_expression_clause(this);
		}
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(4068);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
			case THE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4056);
				table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(4057);
				match(LEFT_PAREN);
				setState(4058);
				select_statement();
				setState(4060);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4059);
					subquery_restriction_clause();
					}
				}

				setState(4062);
				match(RIGHT_PAREN);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(4064);
				tableview_name();
				setState(4066);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
				case 1:
					{
					setState(4065);
					sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_collection_expressionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode THE() { return getToken(PlSqlParser.THE, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_collection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_collection_expression(this);
		}
	}

	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4070);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4083);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				setState(4071);
				match(LEFT_PAREN);
				setState(4072);
				subquery();
				setState(4073);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4075);
				match(LEFT_PAREN);
				setState(4076);
				expression();
				setState(4077);
				match(RIGHT_PAREN);
				setState(4081);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
				case 1:
					{
					setState(4078);
					match(LEFT_PAREN);
					setState(4079);
					match(PLUS_SIGN);
					setState(4080);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode CHECK() { return getToken(PlSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PlSqlParser.OPTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery_restriction_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery_restriction_clause(this);
		}
	}

	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_subquery_restriction_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4085);
			match(WITH);
			setState(4094);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(4086);
				match(READ);
				setState(4087);
				match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(4088);
				match(CHECK);
				setState(4089);
				match(OPTION);
				setState(4092);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(4090);
					match(CONSTRAINT);
					setState(4091);
					constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public TerminalNode SAMPLE() { return getToken(PlSqlParser.SAMPLE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BLOCK() { return getToken(PlSqlParser.BLOCK, 0); }
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSample_clause(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4096);
			match(SAMPLE);
			setState(4098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(4097);
				match(BLOCK);
				}
			}

			setState(4100);
			match(LEFT_PAREN);
			setState(4101);
			expression();
			setState(4104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4102);
				match(COMMA);
				setState(4103);
				expression();
				}
			}

			setState(4106);
			match(RIGHT_PAREN);
			setState(4108);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				{
				setState(4107);
				seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seed_partContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(PlSqlParser.SEED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSeed_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSeed_part(this);
		}
	}

	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4110);
			match(SEED);
			setState(4111);
			match(LEFT_PAREN);
			setState(4112);
			expression();
			setState(4113);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCondition(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4115);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExpressions(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_expressions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4117);
			expression();
			setState(4122);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4118);
					match(COMMA);
					setState(4119);
					expression();
					}
					} 
				}
				setState(4124);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Cursor_expressionContext cursor_expression() {
			return getRuleContext(Cursor_expressionContext.class,0);
		}
		public Logical_expressionContext logical_expression() {
			return getRuleContext(Logical_expressionContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExpression(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_expression);
		try {
			setState(4127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4125);
				cursor_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4126);
				logical_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_expressionContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_expression(this);
		}
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4129);
			match(CURSOR);
			setState(4130);
			match(LEFT_PAREN);
			setState(4131);
			subquery();
			setState(4132);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logical_expressionContext extends ParserRuleContext {
		public Multiset_expressionContext multiset_expression() {
			return getRuleContext(Multiset_expressionContext.class,0);
		}
		public List<TerminalNode> IS() { return getTokens(PlSqlParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(PlSqlParser.IS, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PlSqlParser.NULL, i);
		}
		public List<TerminalNode> NAN() { return getTokens(PlSqlParser.NAN); }
		public TerminalNode NAN(int i) {
			return getToken(PlSqlParser.NAN, i);
		}
		public List<TerminalNode> PRESENT() { return getTokens(PlSqlParser.PRESENT); }
		public TerminalNode PRESENT(int i) {
			return getToken(PlSqlParser.PRESENT, i);
		}
		public List<TerminalNode> INFINITE() { return getTokens(PlSqlParser.INFINITE); }
		public TerminalNode INFINITE(int i) {
			return getToken(PlSqlParser.INFINITE, i);
		}
		public List<TerminalNode> A_LETTER() { return getTokens(PlSqlParser.A_LETTER); }
		public TerminalNode A_LETTER(int i) {
			return getToken(PlSqlParser.A_LETTER, i);
		}
		public List<TerminalNode> SET() { return getTokens(PlSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(PlSqlParser.SET, i);
		}
		public List<TerminalNode> EMPTY() { return getTokens(PlSqlParser.EMPTY); }
		public TerminalNode EMPTY(int i) {
			return getToken(PlSqlParser.EMPTY, i);
		}
		public List<TerminalNode> OF() { return getTokens(PlSqlParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(PlSqlParser.OF, i);
		}
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(PlSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(PlSqlParser.NOT, i);
		}
		public List<TerminalNode> TYPE() { return getTokens(PlSqlParser.TYPE); }
		public TerminalNode TYPE(int i) {
			return getToken(PlSqlParser.TYPE, i);
		}
		public List<TerminalNode> ONLY() { return getTokens(PlSqlParser.ONLY); }
		public TerminalNode ONLY(int i) {
			return getToken(PlSqlParser.ONLY, i);
		}
		public List<Logical_expressionContext> logical_expression() {
			return getRuleContexts(Logical_expressionContext.class);
		}
		public Logical_expressionContext logical_expression(int i) {
			return getRuleContext(Logical_expressionContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public Logical_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLogical_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLogical_expression(this);
		}
	}

	public final Logical_expressionContext logical_expression() throws RecognitionException {
		return logical_expression(0);
	}

	private Logical_expressionContext logical_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logical_expressionContext _localctx = new Logical_expressionContext(_ctx, _parentState);
		Logical_expressionContext _prevctx = _localctx;
		int _startState = 540;
		enterRecursionRule(_localctx, 540, RULE_logical_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4174);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4135);
				multiset_expression();
				setState(4169);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,508,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4136);
						match(IS);
						setState(4138);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4137);
							match(NOT);
							}
						}

						setState(4165);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case NULL:
							{
							setState(4140);
							match(NULL);
							}
							break;
						case NAN:
							{
							setState(4141);
							match(NAN);
							}
							break;
						case PRESENT:
							{
							setState(4142);
							match(PRESENT);
							}
							break;
						case INFINITE:
							{
							setState(4143);
							match(INFINITE);
							}
							break;
						case A_LETTER:
							{
							setState(4144);
							match(A_LETTER);
							setState(4145);
							match(SET);
							}
							break;
						case EMPTY:
							{
							setState(4146);
							match(EMPTY);
							}
							break;
						case OF:
							{
							setState(4147);
							match(OF);
							setState(4149);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==TYPE) {
								{
								setState(4148);
								match(TYPE);
								}
							}

							setState(4151);
							match(LEFT_PAREN);
							setState(4153);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
							case 1:
								{
								setState(4152);
								match(ONLY);
								}
								break;
							}
							setState(4155);
							type_spec();
							setState(4160);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==COMMA) {
								{
								{
								setState(4156);
								match(COMMA);
								setState(4157);
								type_spec();
								}
								}
								setState(4162);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							setState(4163);
							match(RIGHT_PAREN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					setState(4171);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,508,_ctx);
				}
				}
				break;
			case NOT:
				{
				setState(4172);
				match(NOT);
				setState(4173);
				logical_expression(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(4184);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,511,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4182);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
					case 1:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						setState(4176);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(4177);
						match(AND);
						setState(4178);
						logical_expression(3);
						}
						break;
					case 2:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						setState(4179);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(4180);
						match(OR);
						setState(4181);
						logical_expression(2);
						}
						break;
					}
					} 
				}
				setState(4186);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,511,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Multiset_expressionContext extends ParserRuleContext {
		public Token multiset_type;
		public Relational_expressionContext relational_expression() {
			return getRuleContext(Relational_expressionContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMultiset_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMultiset_expression(this);
		}
	}

	public final Multiset_expressionContext multiset_expression() throws RecognitionException {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_multiset_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4187);
			relational_expression(0);
			setState(4193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
			case 1:
				{
				setState(4188);
				((Multiset_expressionContext)_localctx).multiset_type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
					((Multiset_expressionContext)_localctx).multiset_type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4190);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(4189);
					match(OF);
					}
				}

				setState(4192);
				concatenation(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_expressionContext extends ParserRuleContext {
		public Compound_expressionContext compound_expression() {
			return getRuleContext(Compound_expressionContext.class,0);
		}
		public List<Relational_expressionContext> relational_expression() {
			return getRuleContexts(Relational_expressionContext.class);
		}
		public Relational_expressionContext relational_expression(int i) {
			return getRuleContext(Relational_expressionContext.class,i);
		}
		public Relational_operatorContext relational_operator() {
			return getRuleContext(Relational_operatorContext.class,0);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRelational_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRelational_expression(this);
		}
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 544;
		enterRecursionRule(_localctx, 544, RULE_relational_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4196);
			compound_expression();
			}
			_ctx.stop = _input.LT(-1);
			setState(4204);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,514,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relational_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
					setState(4198);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4199);
					relational_operator();
					setState(4200);
					relational_expression(3);
					}
					} 
				}
				setState(4206);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,514,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Compound_expressionContext extends ParserRuleContext {
		public Token like_type;
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public In_elementsContext in_elements() {
			return getRuleContext(In_elementsContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return getRuleContext(Between_elementsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
		public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
		public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
		public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompound_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompound_expression(this);
		}
	}

	public final Compound_expressionContext compound_expression() throws RecognitionException {
		Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_compound_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4207);
			concatenation(0);
			setState(4223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				{
				setState(4209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4208);
					match(NOT);
					}
				}

				setState(4221);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IN:
					{
					setState(4211);
					match(IN);
					setState(4212);
					in_elements();
					}
					break;
				case BETWEEN:
					{
					setState(4213);
					match(BETWEEN);
					setState(4214);
					between_elements();
					}
					break;
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE:
					{
					setState(4215);
					((Compound_expressionContext)_localctx).like_type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(((((_la - 218)) & ~0x3f) == 0 && ((1L << (_la - 218)) & ((1L << (LIKE2 - 218)) | (1L << (LIKE4 - 218)) | (1L << (LIKEC - 218)) | (1L << (LIKE - 218)))) != 0)) ) {
						((Compound_expressionContext)_localctx).like_type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4216);
					concatenation(0);
					setState(4219);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
					case 1:
						{
						setState(4217);
						match(ESCAPE);
						setState(4218);
						concatenation(0);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_operatorContext extends ParserRuleContext {
		public TerminalNode NOT_EQUAL_OP() { return getToken(PlSqlParser.NOT_EQUAL_OP, 0); }
		public Relational_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRelational_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRelational_operator(this);
		}
	}

	public final Relational_operatorContext relational_operator() throws RecognitionException {
		Relational_operatorContext _localctx = new Relational_operatorContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_relational_operator);
		int _la;
		try {
			setState(4239);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4225);
				match(EQUALS_OP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4233);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOT_EQUAL_OP:
					{
					setState(4226);
					match(NOT_EQUAL_OP);
					}
					break;
				case LESS_THAN_OP:
					{
					setState(4227);
					match(LESS_THAN_OP);
					setState(4228);
					match(GREATER_THAN_OP);
					}
					break;
				case EXCLAMATION_OPERATOR_PART:
					{
					setState(4229);
					match(EXCLAMATION_OPERATOR_PART);
					setState(4230);
					match(EQUALS_OP);
					}
					break;
				case CARRET_OPERATOR_PART:
					{
					setState(4231);
					match(CARRET_OPERATOR_PART);
					setState(4232);
					match(EQUALS_OP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4235);
				_la = _input.LA(1);
				if ( !(_la==GREATER_THAN_OP || _la==LESS_THAN_OP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4237);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(4236);
					match(EQUALS_OP);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_elementsContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIn_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIn_elements(this);
		}
	}

	public final In_elementsContext in_elements() throws RecognitionException {
		In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_in_elements);
		int _la;
		try {
			setState(4259);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4241);
				match(LEFT_PAREN);
				setState(4242);
				subquery();
				setState(4243);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4245);
				match(LEFT_PAREN);
				setState(4246);
				concatenation(0);
				setState(4251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4247);
					match(COMMA);
					setState(4248);
					concatenation(0);
					}
					}
					setState(4253);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4254);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4256);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4257);
				bind_variable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4258);
				general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_elementsContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBetween_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBetween_elements(this);
		}
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4261);
			concatenation(0);
			setState(4262);
			match(AND);
			setState(4263);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcatenationContext extends ParserRuleContext {
		public Token op;
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public TerminalNode SOLIDUS() { return getToken(PlSqlParser.SOLIDUS, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(PlSqlParser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(PlSqlParser.MINUS_SIGN, 0); }
		public List<TerminalNode> BAR() { return getTokens(PlSqlParser.BAR); }
		public TerminalNode BAR(int i) {
			return getToken(PlSqlParser.BAR, i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConcatenation(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		return concatenation(0);
	}

	private ConcatenationContext concatenation(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, _parentState);
		ConcatenationContext _prevctx = _localctx;
		int _startState = 554;
		enterRecursionRule(_localctx, 554, RULE_concatenation, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4266);
			model_expression();
			setState(4275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				{
				setState(4267);
				match(AT);
				setState(4272);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL:
					{
					setState(4268);
					match(LOCAL);
					}
					break;
				case TIME:
					{
					setState(4269);
					match(TIME);
					setState(4270);
					match(ZONE);
					setState(4271);
					concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(4274);
				interval_expression();
				}
				break;
			}
			}
			_ctx.stop = _input.LT(-1);
			setState(4289);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,527,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4287);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
					case 1:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						setState(4277);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(4278);
						((ConcatenationContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
							((ConcatenationContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4279);
						concatenation(4);
						}
						break;
					case 2:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						setState(4280);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(4281);
						((ConcatenationContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
							((ConcatenationContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4282);
						concatenation(3);
						}
						break;
					case 3:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						setState(4283);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(4284);
						match(BAR);
						setState(4285);
						match(BAR);
						setState(4286);
						concatenation(2);
						}
						break;
					}
					} 
				}
				setState(4291);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,527,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInterval_expression(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_interval_expression);
		int _la;
		try {
			setState(4316);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4292);
				match(DAY);
				setState(4297);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4293);
					match(LEFT_PAREN);
					setState(4294);
					concatenation(0);
					setState(4295);
					match(RIGHT_PAREN);
					}
				}

				setState(4299);
				match(TO);
				setState(4300);
				match(SECOND);
				setState(4305);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
				case 1:
					{
					setState(4301);
					match(LEFT_PAREN);
					setState(4302);
					concatenation(0);
					setState(4303);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4307);
				match(YEAR);
				setState(4312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4308);
					match(LEFT_PAREN);
					setState(4309);
					concatenation(0);
					setState(4310);
					match(RIGHT_PAREN);
					}
				}

				setState(4314);
				match(TO);
				setState(4315);
				match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_expression(this);
		}
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4318);
			unary_expression();
			setState(4323);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				{
				setState(4319);
				match(LEFT_BRACKET);
				setState(4320);
				model_expression_element();
				setState(4321);
				match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expression_elementContext extends ParserRuleContext {
		public List<TerminalNode> ANY() { return getTokens(PlSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(PlSqlParser.ANY, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_expression_element(this);
		}
	}

	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_model_expression_element);
		int _la;
		try {
			setState(4348);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4327);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
				case 1:
					{
					setState(4325);
					match(ANY);
					}
					break;
				case 2:
					{
					setState(4326);
					expression();
					}
					break;
				}
				setState(4336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4329);
					match(COMMA);
					setState(4332);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
					case 1:
						{
						setState(4330);
						match(ANY);
						}
						break;
					case 2:
						{
						setState(4331);
						expression();
						}
						break;
					}
					}
					}
					setState(4338);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4339);
				single_column_for_loop();
				setState(4344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4340);
					match(COMMA);
					setState(4341);
					single_column_for_loop();
					}
					}
					setState(4346);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4347);
				multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_column_for_loopContext extends ParserRuleContext {
		public ExpressionContext fromExpr;
		public ExpressionContext toExpr;
		public Token action_type;
		public ExpressionContext action_expr;
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode DECREMENT() { return getToken(PlSqlParser.DECREMENT, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSingle_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSingle_column_for_loop(this);
		}
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4350);
			match(FOR);
			setState(4351);
			column_name();
			setState(4369);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(4352);
				match(IN);
				setState(4353);
				match(LEFT_PAREN);
				setState(4355);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PRIOR - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (DECODE - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (NVL - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROUND - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TO_CHAR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (LEAST - 514)) | (1L << (GREATEST - 514)) | (1L << (TO_DATE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (UNSIGNED_INTEGER - 514)) | (1L << (APPROXIMATE_NUM_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (LEFT_PAREN - 514)) | (1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
					{
					setState(4354);
					expressions();
					}
				}

				setState(4357);
				match(RIGHT_PAREN);
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(4360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(4358);
					match(LIKE);
					setState(4359);
					expression();
					}
				}

				setState(4362);
				match(FROM);
				setState(4363);
				((Single_column_for_loopContext)_localctx).fromExpr = expression();
				setState(4364);
				match(TO);
				setState(4365);
				((Single_column_for_loopContext)_localctx).toExpr = expression();
				setState(4366);
				((Single_column_for_loopContext)_localctx).action_type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DECREMENT || _la==INCREMENT) ) {
					((Single_column_for_loopContext)_localctx).action_type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4367);
				((Single_column_for_loopContext)_localctx).action_expr = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMulti_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMulti_column_for_loop(this);
		}
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4371);
			match(FOR);
			setState(4372);
			match(LEFT_PAREN);
			setState(4373);
			column_name();
			setState(4378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4374);
				match(COMMA);
				setState(4375);
				column_name();
				}
				}
				setState(4380);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4381);
			match(RIGHT_PAREN);
			setState(4382);
			match(IN);
			setState(4383);
			match(LEFT_PAREN);
			setState(4390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
			case 1:
				{
				setState(4384);
				subquery();
				}
				break;
			case 2:
				{
				setState(4385);
				match(LEFT_PAREN);
				setState(4387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PRIOR - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (DECODE - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (NVL - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROUND - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TO_CHAR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (LEAST - 514)) | (1L << (GREATEST - 514)) | (1L << (TO_DATE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (UNSIGNED_INTEGER - 514)) | (1L << (APPROXIMATE_NUM_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (LEFT_PAREN - 514)) | (1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
					{
					setState(4386);
					expressions();
					}
				}

				setState(4389);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4392);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode PRIOR() { return getToken(PlSqlParser.PRIOR, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(PlSqlParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnary_expression(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_unary_expression);
		int _la;
		try {
			setState(4410);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4394);
				_la = _input.LA(1);
				if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4395);
				unary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4396);
				match(PRIOR);
				setState(4397);
				unary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4398);
				match(CONNECT_BY_ROOT);
				setState(4399);
				unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4400);
				match(NEW);
				setState(4401);
				unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4402);
				match(DISTINCT);
				setState(4403);
				unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4404);
				match(ALL);
				setState(4405);
				unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4406);
				case_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4407);
				quantified_expression();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4408);
				standard_function();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4409);
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCase_statement(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_case_statement);
		try {
			setState(4414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4412);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4413);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PlSqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSimple_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSimple_case_statement(this);
		}
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(4416);
				label_name();
				}
			}

			setState(4419);
			((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4420);
			expression();
			setState(4422); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4421);
				simple_case_when_part();
				}
				}
				setState(4424); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4427);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4426);
				case_else_part();
				}
			}

			setState(4429);
			match(END);
			setState(4431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				{
				setState(4430);
				match(CASE);
				}
				break;
			}
			setState(4434);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
			case 1:
				{
				setState(4433);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSimple_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSimple_case_when_part(this);
		}
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4436);
			match(WHEN);
			setState(4437);
			expression();
			setState(4438);
			match(THEN);
			setState(4441);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				{
				setState(4439);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4440);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PlSqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSearched_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSearched_case_statement(this);
		}
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(4443);
				label_name();
				}
			}

			setState(4446);
			((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4448); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4447);
				searched_case_when_part();
				}
				}
				setState(4450); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4453);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4452);
				case_else_part();
				}
			}

			setState(4455);
			match(END);
			setState(4457);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				{
				setState(4456);
				match(CASE);
				}
				break;
			}
			setState(4460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				{
				setState(4459);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSearched_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSearched_case_when_part(this);
		}
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4462);
			match(WHEN);
			setState(4463);
			expression();
			setState(4464);
			match(THEN);
			setState(4467);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
			case 1:
				{
				setState(4465);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4466);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCase_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCase_else_part(this);
		}
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4469);
			match(ELSE);
			setState(4472);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				{
				setState(4470);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4471);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAtom(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_atom);
		try {
			int _alt;
			setState(4493);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4474);
				table_element();
				setState(4475);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4477);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4478);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4479);
				general_element();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4480);
				match(LEFT_PAREN);
				setState(4481);
				subquery();
				setState(4482);
				match(RIGHT_PAREN);
				setState(4486);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,559,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4483);
						subquery_operation_part();
						}
						} 
					}
					setState(4488);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,559,_ctx);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4489);
				match(LEFT_PAREN);
				setState(4490);
				expressions();
				setState(4491);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
		public TerminalNode EXISTS() { return getToken(PlSqlParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuantified_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuantified_expression(this);
		}
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4495);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4504);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
			case 1:
				{
				setState(4496);
				match(LEFT_PAREN);
				setState(4497);
				subquery();
				setState(4498);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4500);
				match(LEFT_PAREN);
				setState(4501);
				expression();
				setState(4502);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_functionContext extends ParserRuleContext {
		public TerminalNode SUBSTR() { return getToken(PlSqlParser.SUBSTR, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode TO_CHAR() { return getToken(PlSqlParser.TO_CHAR, 0); }
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public TerminalNode DECODE() { return getToken(PlSqlParser.DECODE, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode NVL() { return getToken(PlSqlParser.NVL, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode TO_DATE() { return getToken(PlSqlParser.TO_DATE, 0); }
		public String_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterString_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitString_function(this);
		}
	}

	public final String_functionContext string_function() throws RecognitionException {
		String_functionContext _localctx = new String_functionContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_string_function);
		int _la;
		try {
			setState(4576);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUBSTR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4506);
				match(SUBSTR);
				setState(4507);
				match(LEFT_PAREN);
				setState(4508);
				expression();
				setState(4509);
				match(COMMA);
				setState(4510);
				expression();
				setState(4513);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4511);
					match(COMMA);
					setState(4512);
					expression();
					}
				}

				setState(4515);
				match(RIGHT_PAREN);
				}
				break;
			case TO_CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4517);
				match(TO_CHAR);
				setState(4518);
				match(LEFT_PAREN);
				setState(4522);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
				case 1:
					{
					setState(4519);
					table_element();
					}
					break;
				case 2:
					{
					setState(4520);
					standard_function();
					}
					break;
				case 3:
					{
					setState(4521);
					expression();
					}
					break;
				}
				setState(4526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
				case 1:
					{
					setState(4524);
					match(COMMA);
					setState(4525);
					quoted_string();
					}
					break;
				}
				setState(4530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4528);
					match(COMMA);
					setState(4529);
					quoted_string();
					}
				}

				setState(4532);
				match(RIGHT_PAREN);
				}
				break;
			case DECODE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4534);
				match(DECODE);
				setState(4535);
				match(LEFT_PAREN);
				setState(4536);
				expressions();
				setState(4537);
				match(RIGHT_PAREN);
				}
				break;
			case CHR:
				enterOuterAlt(_localctx, 4);
				{
				setState(4539);
				match(CHR);
				setState(4540);
				match(LEFT_PAREN);
				setState(4541);
				concatenation(0);
				setState(4542);
				match(USING);
				setState(4543);
				match(NCHAR_CS);
				setState(4544);
				match(RIGHT_PAREN);
				}
				break;
			case NVL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4546);
				match(NVL);
				setState(4547);
				match(LEFT_PAREN);
				setState(4548);
				expression();
				setState(4549);
				match(COMMA);
				setState(4550);
				expression();
				setState(4551);
				match(RIGHT_PAREN);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 6);
				{
				setState(4553);
				match(TRIM);
				setState(4554);
				match(LEFT_PAREN);
				setState(4562);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
				case 1:
					{
					setState(4556);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(4555);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(4559);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(4558);
						quoted_string();
						}
					}

					setState(4561);
					match(FROM);
					}
					break;
				}
				setState(4564);
				concatenation(0);
				setState(4565);
				match(RIGHT_PAREN);
				}
				break;
			case TO_DATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4567);
				match(TO_DATE);
				setState(4568);
				match(LEFT_PAREN);
				setState(4569);
				expression();
				setState(4572);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4570);
					match(COMMA);
					setState(4571);
					quoted_string();
					}
				}

				setState(4574);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_functionContext extends ParserRuleContext {
		public String_functionContext string_function() {
			return getRuleContext(String_functionContext.class,0);
		}
		public Numeric_function_wrapperContext numeric_function_wrapper() {
			return getRuleContext(Numeric_function_wrapperContext.class,0);
		}
		public Other_functionContext other_function() {
			return getRuleContext(Other_functionContext.class,0);
		}
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStandard_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStandard_function(this);
		}
	}

	public final Standard_functionContext standard_function() throws RecognitionException {
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_standard_function);
		try {
			setState(4581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4578);
				string_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4579);
				numeric_function_wrapper();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4580);
				other_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_function_wrapperContext extends ParserRuleContext {
		public Numeric_functionContext numeric_function() {
			return getRuleContext(Numeric_functionContext.class,0);
		}
		public Single_column_for_loopContext single_column_for_loop() {
			return getRuleContext(Single_column_for_loopContext.class,0);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Numeric_function_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_function_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric_function_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric_function_wrapper(this);
		}
	}

	public final Numeric_function_wrapperContext numeric_function_wrapper() throws RecognitionException {
		Numeric_function_wrapperContext _localctx = new Numeric_function_wrapperContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_numeric_function_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4583);
			numeric_function();
			setState(4586);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,572,_ctx) ) {
			case 1:
				{
				setState(4584);
				single_column_for_loop();
				}
				break;
			case 2:
				{
				setState(4585);
				multi_column_for_loop();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_functionContext extends ParserRuleContext {
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ROUND() { return getToken(PlSqlParser.ROUND, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode LEAST() { return getToken(PlSqlParser.LEAST, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode GREATEST() { return getToken(PlSqlParser.GREATEST, 0); }
		public Numeric_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric_function(this);
		}
	}

	public final Numeric_functionContext numeric_function() throws RecognitionException {
		Numeric_functionContext _localctx = new Numeric_functionContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_numeric_function);
		int _la;
		try {
			setState(4646);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(4588);
				match(SUM);
				setState(4589);
				match(LEFT_PAREN);
				setState(4591);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
				case 1:
					{
					setState(4590);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4593);
				expression();
				setState(4594);
				match(RIGHT_PAREN);
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4596);
				match(COUNT);
				setState(4597);
				match(LEFT_PAREN);
				setState(4605);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(4598);
					match(ASTERISK);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case RIGHT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4603);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PRIOR - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNIQUE - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (DECODE - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (NVL - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROUND - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TO_CHAR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (LEAST - 514)) | (1L << (GREATEST - 514)) | (1L << (TO_DATE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (UNSIGNED_INTEGER - 514)) | (1L << (APPROXIMATE_NUM_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (LEFT_PAREN - 514)) | (1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
						{
						setState(4600);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
						case 1:
							{
							setState(4599);
							_la = _input.LA(1);
							if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						setState(4602);
						concatenation(0);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4607);
				match(RIGHT_PAREN);
				setState(4609);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
				case 1:
					{
					setState(4608);
					over_clause();
					}
					break;
				}
				}
				break;
			case ROUND:
				enterOuterAlt(_localctx, 3);
				{
				setState(4611);
				match(ROUND);
				setState(4612);
				match(LEFT_PAREN);
				setState(4613);
				expression();
				setState(4616);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4614);
					match(COMMA);
					setState(4615);
					match(UNSIGNED_INTEGER);
					}
				}

				setState(4618);
				match(RIGHT_PAREN);
				}
				break;
			case AVG:
				enterOuterAlt(_localctx, 4);
				{
				setState(4620);
				match(AVG);
				setState(4621);
				match(LEFT_PAREN);
				setState(4623);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
				case 1:
					{
					setState(4622);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4625);
				expression();
				setState(4626);
				match(RIGHT_PAREN);
				}
				break;
			case MAX:
				enterOuterAlt(_localctx, 5);
				{
				setState(4628);
				match(MAX);
				setState(4629);
				match(LEFT_PAREN);
				setState(4631);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
				case 1:
					{
					setState(4630);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4633);
				expression();
				setState(4634);
				match(RIGHT_PAREN);
				}
				break;
			case LEAST:
				enterOuterAlt(_localctx, 6);
				{
				setState(4636);
				match(LEAST);
				setState(4637);
				match(LEFT_PAREN);
				setState(4638);
				expressions();
				setState(4639);
				match(RIGHT_PAREN);
				}
				break;
			case GREATEST:
				enterOuterAlt(_localctx, 7);
				{
				setState(4641);
				match(GREATEST);
				setState(4642);
				match(LEFT_PAREN);
				setState(4643);
				expressions();
				setState(4644);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Other_functionContext extends ParserRuleContext {
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
		public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
		public TerminalNode MULTISET() { return getToken(PlSqlParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode COALESCE() { return getToken(PlSqlParser.COALESCE, 0); }
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode PERCENT_ISOPEN() { return getToken(PlSqlParser.PERCENT_ISOPEN, 0); }
		public TerminalNode PERCENT_FOUND() { return getToken(PlSqlParser.PERCENT_FOUND, 0); }
		public TerminalNode PERCENT_NOTFOUND() { return getToken(PlSqlParser.PERCENT_NOTFOUND, 0); }
		public TerminalNode PERCENT_ROWCOUNT() { return getToken(PlSqlParser.PERCENT_ROWCOUNT, 0); }
		public TerminalNode DECOMPOSE() { return getToken(PlSqlParser.DECOMPOSE, 0); }
		public TerminalNode CANONICAL() { return getToken(PlSqlParser.CANONICAL, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(PlSqlParser.COMPATIBILITY, 0); }
		public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PlSqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PlSqlParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode CHAR_CS() { return getToken(PlSqlParser.CHAR_CS, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode TREAT() { return getToken(PlSqlParser.TREAT, 0); }
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode XMLAGG() { return getToken(PlSqlParser.XMLAGG, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode XMLCOLATTVAL() { return getToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlSqlParser.XMLFOREST, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PlSqlParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode XMLEXISTS() { return getToken(PlSqlParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(PlSqlParser.XMLPARSE, 0); }
		public TerminalNode DOCUMENT() { return getToken(PlSqlParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(PlSqlParser.CONTENT, 0); }
		public TerminalNode WELLFORMED() { return getToken(PlSqlParser.WELLFORMED, 0); }
		public TerminalNode XMLPI() { return getToken(PlSqlParser.XMLPI, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode XMLQUERY() { return getToken(PlSqlParser.XMLQUERY, 0); }
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public TerminalNode XMLROOT() { return getToken(PlSqlParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(PlSqlParser.XMLSERIALIZE, 0); }
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		public TerminalNode DEFAULTS() { return getToken(PlSqlParser.DEFAULTS, 0); }
		public TerminalNode HIDE() { return getToken(PlSqlParser.HIDE, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public TerminalNode XMLTABLE() { return getToken(PlSqlParser.XMLTABLE, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public Other_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_other_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOther_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOther_function(this);
		}
	}

	public final Other_functionContext other_function() throws RecognitionException {
		Other_functionContext _localctx = new Other_functionContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_other_function);
		int _la;
		try {
			int _alt;
			setState(4963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,635,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4648);
				over_clause_keyword();
				setState(4649);
				function_argument_analytic();
				setState(4651);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
				case 1:
					{
					setState(4650);
					over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4653);
				regular_id();
				setState(4654);
				function_argument_modeling();
				setState(4656);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
				case 1:
					{
					setState(4655);
					using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4658);
				match(COUNT);
				setState(4659);
				match(LEFT_PAREN);
				setState(4665);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(4660);
					match(ASTERISK);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4662);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
					case 1:
						{
						setState(4661);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(4664);
					concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4667);
				match(RIGHT_PAREN);
				setState(4669);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
				case 1:
					{
					setState(4668);
					over_clause();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4671);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4672);
				match(LEFT_PAREN);
				setState(4679);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
				case 1:
					{
					setState(4673);
					match(MULTISET);
					setState(4674);
					match(LEFT_PAREN);
					setState(4675);
					subquery();
					setState(4676);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(4678);
					concatenation(0);
					}
					break;
				}
				setState(4681);
				match(AS);
				setState(4682);
				type_spec();
				setState(4683);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4685);
				match(COALESCE);
				setState(4686);
				match(LEFT_PAREN);
				setState(4687);
				table_element();
				setState(4693);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4688);
					match(COMMA);
					setState(4691);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(4689);
						numeric();
						}
						break;
					case NATIONAL_CHAR_STRING_LIT:
					case CHAR_STRING:
						{
						setState(4690);
						quoted_string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4695);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4697);
				match(COLLECT);
				setState(4698);
				match(LEFT_PAREN);
				setState(4700);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
				case 1:
					{
					setState(4699);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4702);
				concatenation(0);
				setState(4704);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4703);
					collect_order_by_part();
					}
				}

				setState(4706);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4708);
				within_or_over_clause_keyword();
				setState(4709);
				function_argument();
				setState(4711); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4710);
						within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4713); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,592,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4715);
				cursor_name();
				setState(4716);
				_la = _input.LA(1);
				if ( !(((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & ((1L << (PERCENT_FOUND - 312)) | (1L << (PERCENT_ISOPEN - 312)) | (1L << (PERCENT_NOTFOUND - 312)) | (1L << (PERCENT_ROWCOUNT - 312)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4718);
				match(DECOMPOSE);
				setState(4719);
				match(LEFT_PAREN);
				setState(4720);
				concatenation(0);
				setState(4722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					setState(4721);
					_la = _input.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4724);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4726);
				match(EXTRACT);
				setState(4727);
				match(LEFT_PAREN);
				setState(4728);
				regular_id();
				setState(4729);
				match(FROM);
				setState(4730);
				concatenation(0);
				setState(4731);
				match(RIGHT_PAREN);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4733);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4734);
				function_argument_analytic();
				setState(4736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(4735);
					respect_or_ignore_nulls();
					}
				}

				setState(4738);
				over_clause();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4740);
				standard_prediction_function_keyword();
				setState(4741);
				match(LEFT_PAREN);
				setState(4742);
				expressions();
				setState(4744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(4743);
					cost_matrix_clause();
					}
				}

				setState(4747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4746);
					using_clause();
					}
				}

				setState(4749);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4751);
				match(TRANSLATE);
				setState(4752);
				match(LEFT_PAREN);
				setState(4753);
				expression();
				setState(4756);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4754);
					match(USING);
					setState(4755);
					_la = _input.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4762);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4758);
					match(COMMA);
					setState(4759);
					expression();
					}
					}
					setState(4764);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4765);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4767);
				match(TREAT);
				setState(4768);
				match(LEFT_PAREN);
				setState(4769);
				expression();
				setState(4770);
				match(AS);
				setState(4772);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
				case 1:
					{
					setState(4771);
					match(REF);
					}
					break;
				}
				setState(4774);
				type_spec();
				setState(4775);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4777);
				match(TRIM);
				setState(4778);
				match(LEFT_PAREN);
				setState(4786);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
				case 1:
					{
					setState(4780);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(4779);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(4783);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(4782);
						quoted_string();
						}
					}

					setState(4785);
					match(FROM);
					}
					break;
				}
				setState(4788);
				concatenation(0);
				setState(4789);
				match(RIGHT_PAREN);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4791);
				match(XMLAGG);
				setState(4792);
				match(LEFT_PAREN);
				setState(4793);
				expression();
				setState(4795);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4794);
					order_by_clause();
					}
				}

				setState(4797);
				match(RIGHT_PAREN);
				setState(4800);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
				case 1:
					{
					setState(4798);
					match(PERIOD);
					setState(4799);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4802);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4803);
				match(LEFT_PAREN);
				setState(4804);
				xml_multiuse_expression_element();
				setState(4809);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4805);
					match(COMMA);
					setState(4806);
					xml_multiuse_expression_element();
					}
					}
					setState(4811);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4812);
				match(RIGHT_PAREN);
				setState(4815);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
				case 1:
					{
					setState(4813);
					match(PERIOD);
					setState(4814);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4817);
				match(XMLELEMENT);
				setState(4818);
				match(LEFT_PAREN);
				setState(4820);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
				case 1:
					{
					setState(4819);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4823);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
				case 1:
					{
					setState(4822);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4825);
				expression();
				setState(4828);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
				case 1:
					{
					setState(4826);
					match(COMMA);
					setState(4827);
					xml_attributes_clause();
					}
					break;
				}
				setState(4837);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4830);
					match(COMMA);
					setState(4831);
					expression();
					setState(4833);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
						{
						setState(4832);
						column_alias();
						}
					}

					}
					}
					setState(4839);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4840);
				match(RIGHT_PAREN);
				setState(4843);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
				case 1:
					{
					setState(4841);
					match(PERIOD);
					setState(4842);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4845);
				match(XMLEXISTS);
				setState(4846);
				match(LEFT_PAREN);
				setState(4847);
				expression();
				setState(4849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4848);
					xml_passing_clause();
					}
				}

				setState(4851);
				match(RIGHT_PAREN);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4853);
				match(XMLPARSE);
				setState(4854);
				match(LEFT_PAREN);
				setState(4855);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4856);
				concatenation(0);
				setState(4858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(4857);
					match(WELLFORMED);
					}
				}

				setState(4860);
				match(RIGHT_PAREN);
				setState(4863);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
				case 1:
					{
					setState(4861);
					match(PERIOD);
					setState(4862);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4865);
				match(XMLPI);
				setState(4866);
				match(LEFT_PAREN);
				setState(4871);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(4867);
					match(NAME);
					setState(4868);
					identifier();
					}
					break;
				case EVALNAME:
					{
					setState(4869);
					match(EVALNAME);
					setState(4870);
					concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4875);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4873);
					match(COMMA);
					setState(4874);
					concatenation(0);
					}
				}

				setState(4877);
				match(RIGHT_PAREN);
				setState(4880);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
				case 1:
					{
					setState(4878);
					match(PERIOD);
					setState(4879);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4882);
				match(XMLQUERY);
				setState(4883);
				match(LEFT_PAREN);
				setState(4884);
				concatenation(0);
				setState(4886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4885);
					xml_passing_clause();
					}
				}

				setState(4888);
				match(RETURNING);
				setState(4889);
				match(CONTENT);
				setState(4893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(4890);
					match(NULL);
					setState(4891);
					match(ON);
					setState(4892);
					match(EMPTY);
					}
				}

				setState(4895);
				match(RIGHT_PAREN);
				setState(4898);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
				case 1:
					{
					setState(4896);
					match(PERIOD);
					setState(4897);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(4900);
				match(XMLROOT);
				setState(4901);
				match(LEFT_PAREN);
				setState(4902);
				concatenation(0);
				setState(4905);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
				case 1:
					{
					setState(4903);
					match(COMMA);
					setState(4904);
					xmlroot_param_version_part();
					}
					break;
				}
				setState(4909);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4907);
					match(COMMA);
					setState(4908);
					xmlroot_param_standalone_part();
					}
				}

				setState(4911);
				match(RIGHT_PAREN);
				setState(4914);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,624,_ctx) ) {
				case 1:
					{
					setState(4912);
					match(PERIOD);
					setState(4913);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(4916);
				match(XMLSERIALIZE);
				setState(4917);
				match(LEFT_PAREN);
				setState(4918);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4919);
				concatenation(0);
				setState(4922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4920);
					match(AS);
					setState(4921);
					type_spec();
					}
				}

				setState(4925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(4924);
					xmlserialize_param_enconding_part();
					}
				}

				setState(4928);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(4927);
					xmlserialize_param_version_part();
					}
				}

				setState(4931);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(4930);
					xmlserialize_param_ident_part();
					}
				}

				setState(4935);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(4933);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4934);
					match(DEFAULTS);
					}
				}

				setState(4937);
				match(RIGHT_PAREN);
				setState(4940);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
				case 1:
					{
					setState(4938);
					match(PERIOD);
					setState(4939);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(4942);
				match(XMLTABLE);
				setState(4943);
				match(LEFT_PAREN);
				setState(4945);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
				case 1:
					{
					setState(4944);
					xml_namespaces_clause();
					}
					break;
				}
				setState(4947);
				concatenation(0);
				setState(4949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4948);
					xml_passing_clause();
					}
				}

				setState(4956);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(4951);
					match(COLUMNS);
					setState(4952);
					xml_table_column();
					{
					setState(4953);
					match(COMMA);
					setState(4954);
					xml_table_column();
					}
					}
				}

				setState(4958);
				match(RIGHT_PAREN);
				setState(4961);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
				case 1:
					{
					setState(4959);
					match(PERIOD);
					setState(4960);
					general_element_part();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(PlSqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(PlSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(PlSqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(PlSqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(PlSqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PlSqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(PlSqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(PlSqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(PlSqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(PlSqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(PlSqlParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOver_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOver_clause_keyword(this);
		}
	}

	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4965);
			_la = _input.LA(1);
			if ( !(((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (AVG - 507)) | (1L << (CORR - 507)) | (1L << (COVAR_ - 507)) | (1L << (LAG - 507)) | (1L << (LEAD - 507)) | (1L << (MAX - 507)) | (1L << (MEDIAN - 507)) | (1L << (MIN - 507)) | (1L << (NTILE - 507)) | (1L << (RATIO_TO_REPORT - 507)) | (1L << (REGR_ - 507)) | (1L << (ROW_NUMBER - 507)) | (1L << (SUM - 507)) | (1L << (STDDEV - 507)) | (1L << (VAR_ - 507)) | (1L << (VARIANCE - 507)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode CUME_DIST() { return getToken(PlSqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(PlSqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PlSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(PlSqlParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWithin_or_over_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWithin_or_over_clause_keyword(this);
		}
	}

	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4967);
			_la = _input.LA(1);
			if ( !(((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (CUME_DIST - 500)) | (1L << (DENSE_RANK - 500)) | (1L << (LISTAGG - 500)) | (1L << (PERCENT_RANK - 500)) | (1L << (PERCENTILE_CONT - 500)) | (1L << (PERCENTILE_DISC - 500)) | (1L << (RANK - 500)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		public TerminalNode PREDICTION() { return getToken(PlSqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(PlSqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(PlSqlParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStandard_prediction_function_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStandard_prediction_function_keyword(this);
		}
	}

	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4969);
			_la = _input.LA(1);
			if ( !(((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (PREDICTION - 494)) | (1L << (PREDICTION_BOUNDS - 494)) | (1L << (PREDICTION_COST - 494)) | (1L << (PREDICTION_DETAILS - 494)) | (1L << (PREDICTION_PROBABILITY - 494)) | (1L << (PREDICTION_SET - 494)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PlSqlParser.OVER, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOver_clause(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4971);
			match(OVER);
			setState(4972);
			match(LEFT_PAREN);
			setState(4974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4973);
				query_partition_clause();
				}
			}

			setState(4980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4976);
				order_by_clause();
				setState(4978);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(4977);
					windowing_clause();
					}
				}

				}
			}

			setState(4982);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_clauseContext extends ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWindowing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWindowing_clause(this);
		}
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4984);
			windowing_type();
			setState(4991);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BETWEEN:
				{
				setState(4985);
				match(BETWEEN);
				setState(4986);
				windowing_elements();
				setState(4987);
				match(AND);
				setState(4988);
				windowing_elements();
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4990);
				windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_typeContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWindowing_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWindowing_type(this);
		}
	}

	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4993);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_elementsContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PlSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PlSqlParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(PlSqlParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWindowing_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWindowing_elements(this);
		}
	}

	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_windowing_elements);
		int _la;
		try {
			setState(5002);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,640,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4995);
				match(UNBOUNDED);
				setState(4996);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4997);
				match(CURRENT);
				setState(4998);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4999);
				concatenation(0);
				setState(5000);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUsing_clause(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_using_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5004);
			match(USING);
			setState(5014);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(5005);
				match(ASTERISK);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case IN:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5006);
				using_element();
				setState(5011);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,641,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5007);
						match(COMMA);
						setState(5008);
						using_element();
						}
						} 
					}
					setState(5013);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,641,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUsing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUsing_element(this);
		}
	}

	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5021);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
			case 1:
				{
				setState(5016);
				match(IN);
				setState(5018);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
				case 1:
					{
					setState(5017);
					match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(5020);
				match(OUT);
				}
				break;
			}
			setState(5023);
			select_list_elements();
			setState(5025);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,645,_ctx) ) {
			case 1:
				{
				setState(5024);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collect_order_by_partContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCollect_order_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCollect_order_by_part(this);
		}
	}

	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5027);
			match(ORDER);
			setState(5028);
			match(BY);
			setState(5029);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_partContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(PlSqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWithin_or_over_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWithin_or_over_part(this);
		}
	}

	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_within_or_over_part);
		try {
			setState(5038);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5031);
				match(WITHIN);
				setState(5032);
				match(GROUP);
				setState(5033);
				match(LEFT_PAREN);
				setState(5034);
				order_by_clause();
				setState(5035);
				match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5037);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCost_matrix_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCost_matrix_clause(this);
		}
	}

	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5040);
			match(COST);
			setState(5062);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(5041);
				match(MODEL);
				setState(5043);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(5042);
					match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(5045);
				match(LEFT_PAREN);
				setState(5046);
				cost_class_name();
				setState(5051);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5047);
					match(COMMA);
					setState(5048);
					cost_class_name();
					}
					}
					setState(5053);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5054);
				match(RIGHT_PAREN);
				setState(5055);
				match(VALUES);
				setState(5056);
				match(LEFT_PAREN);
				setState(5058);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PRIOR - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (DECODE - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (NVL - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROUND - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TO_CHAR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (LEAST - 514)) | (1L << (GREATEST - 514)) | (1L << (TO_DATE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (UNSIGNED_INTEGER - 514)) | (1L << (APPROXIMATE_NUM_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (LEFT_PAREN - 514)) | (1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
					{
					setState(5057);
					expressions();
					}
				}

				setState(5060);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PlSqlParser.PASSING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_passing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_passing_clause(this);
		}
	}

	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5064);
			match(PASSING);
			setState(5067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(5065);
				match(BY);
				setState(5066);
				match(VALUE);
				}
			}

			setState(5069);
			expression();
			setState(5071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(5070);
				column_alias();
				}
			}

			{
			setState(5073);
			match(COMMA);
			setState(5074);
			expression();
			setState(5076);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				{
				setState(5075);
				column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(PlSqlParser.SCHEMACHECK, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_attributes_clause(this);
		}
	}

	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5078);
			match(XMLATTRIBUTES);
			setState(5079);
			match(LEFT_PAREN);
			setState(5081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				{
				setState(5080);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				{
				setState(5083);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5086);
			xml_multiuse_expression_element();
			setState(5091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5087);
				match(COMMA);
				setState(5088);
				xml_multiuse_expression_element();
				}
				}
				setState(5093);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5094);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(PlSqlParser.XMLNAMESPACES, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_namespaces_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_namespaces_clause(this);
		}
	}

	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5096);
			match(XMLNAMESPACES);
			setState(5097);
			match(LEFT_PAREN);
			setState(5101);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,657,_ctx) ) {
			case 1:
				{
				setState(5098);
				concatenation(0);
				setState(5099);
				column_alias();
				}
				break;
			}
			setState(5109);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5103);
				match(COMMA);
				setState(5104);
				concatenation(0);
				setState(5105);
				column_alias();
				}
				}
				setState(5111);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(5112);
				xml_general_default_part();
				}
			}

			setState(5115);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_table_columnContext extends ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PlSqlParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode PATH() { return getToken(PlSqlParser.PATH, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_table_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_table_column(this);
		}
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5117);
			xml_column_name();
			setState(5128);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(5118);
				match(FOR);
				setState(5119);
				match(ORDINALITY);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(5120);
				type_spec();
				setState(5123);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(5121);
					match(PATH);
					setState(5122);
					concatenation(0);
					}
				}

				setState(5126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(5125);
					xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_general_default_partContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_general_default_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_general_default_part(this);
		}
	}

	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5130);
			match(DEFAULT);
			setState(5131);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_multiuse_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_multiuse_expression_element(this);
		}
	}

	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5133);
			expression();
			setState(5140);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(5134);
				match(AS);
				setState(5138);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
				case 1:
					{
					setState(5135);
					id_expression();
					}
					break;
				case 2:
					{
					setState(5136);
					match(EVALNAME);
					setState(5137);
					concatenation(0);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXmlroot_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXmlroot_param_version_part(this);
		}
	}

	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5142);
			match(VERSION);
			setState(5146);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
			case 1:
				{
				setState(5143);
				match(NO);
				setState(5144);
				match(VALUE);
				}
				break;
			case 2:
				{
				setState(5145);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		public TerminalNode STANDALONE() { return getToken(PlSqlParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXmlroot_param_standalone_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXmlroot_param_standalone_part(this);
		}
	}

	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5148);
			match(STANDALONE);
			setState(5154);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(5149);
				match(YES);
				}
				break;
			case NO:
				{
				setState(5150);
				match(NO);
				setState(5152);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5151);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		public TerminalNode ENCODING() { return getToken(PlSqlParser.ENCODING, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXmlserialize_param_enconding_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXmlserialize_param_enconding_part(this);
		}
	}

	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5156);
			match(ENCODING);
			setState(5157);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXmlserialize_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXmlserialize_param_version_part(this);
		}
	}

	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5159);
			match(VERSION);
			setState(5160);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode INDENT() { return getToken(PlSqlParser.INDENT, 0); }
		public TerminalNode SIZE() { return getToken(PlSqlParser.SIZE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXmlserialize_param_ident_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXmlserialize_param_ident_part(this);
		}
	}

	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(5170);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(5162);
				match(NO);
				setState(5163);
				match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5164);
				match(INDENT);
				setState(5168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(5165);
					match(SIZE);
					setState(5166);
					match(EQUALS_OP);
					setState(5167);
					concatenation(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_plus_commandContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public TerminalNode PROMPT() { return getToken(PlSqlParser.PROMPT, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public TerminalNode ERR() { return getToken(PlSqlParser.ERR, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public TerminalNode START_CMD() { return getToken(PlSqlParser.START_CMD, 0); }
		public Whenever_commandContext whenever_command() {
			return getRuleContext(Whenever_commandContext.class,0);
		}
		public Set_commandContext set_command() {
			return getRuleContext(Set_commandContext.class,0);
		}
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_plus_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSql_plus_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSql_plus_command(this);
		}
	}

	public final Sql_plus_commandContext sql_plus_command() throws RecognitionException {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_sql_plus_command);
		int _la;
		try {
			setState(5180);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SOLIDUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5172);
				match(SOLIDUS);
				}
				break;
			case EXIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5173);
				match(EXIT);
				}
				break;
			case PROMPT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5174);
				match(PROMPT);
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(5175);
				match(SHOW);
				setState(5176);
				_la = _input.LA(1);
				if ( !(_la==ERR || _la==ERRORS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case START_CMD:
				enterOuterAlt(_localctx, 5);
				{
				setState(5177);
				match(START_CMD);
				}
				break;
			case WHENEVER:
				enterOuterAlt(_localctx, 6);
				{
				setState(5178);
				whenever_command();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 7);
				{
				setState(5179);
				set_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Whenever_commandContext extends ParserRuleContext {
		public TerminalNode WHENEVER() { return getToken(PlSqlParser.WHENEVER, 0); }
		public TerminalNode SQLERROR() { return getToken(PlSqlParser.SQLERROR, 0); }
		public TerminalNode OSERROR() { return getToken(PlSqlParser.OSERROR, 0); }
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public TerminalNode SUCCESS() { return getToken(PlSqlParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(PlSqlParser.FAILURE, 0); }
		public TerminalNode WARNING() { return getToken(PlSqlParser.WARNING, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public Whenever_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenever_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWhenever_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWhenever_command(this);
		}
	}

	public final Whenever_commandContext whenever_command() throws RecognitionException {
		Whenever_commandContext _localctx = new Whenever_commandContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_whenever_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5182);
			match(WHENEVER);
			setState(5183);
			_la = _input.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5189);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXIT:
				{
				setState(5184);
				match(EXIT);
				setState(5185);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5186);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CONTINUE:
				{
				setState(5187);
				match(CONTINUE);
				setState(5188);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSet_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSet_command(this);
		}
	}

	public final Set_commandContext set_command() throws RecognitionException {
		Set_commandContext _localctx = new Set_commandContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_set_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5191);
			match(SET);
			setState(5192);
			regular_id();
			setState(5198);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
			case 1:
				{
				setState(5193);
				match(CHAR_STRING);
				}
				break;
			case 2:
				{
				setState(5194);
				match(ON);
				}
				break;
			case 3:
				{
				setState(5195);
				match(OFF);
				}
				break;
			case 4:
				{
				setState(5196);
				numeric();
				}
				break;
			case 5:
				{
				setState(5197);
				regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPartition_extension_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPartition_extension_clause(this);
		}
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5200);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5201);
				match(FOR);
				}
			}

			setState(5204);
			match(LEFT_PAREN);
			setState(5206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PRIOR - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (DECODE - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (NVL - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROUND - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TO_CHAR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (LEAST - 514)) | (1L << (GREATEST - 514)) | (1L << (TO_DATE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (UNSIGNED_INTEGER - 514)) | (1L << (APPROXIMATE_NUM_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (LEFT_PAREN - 514)) | (1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(5205);
				expressions();
				}
			}

			setState(5208);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitColumn_alias(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_column_alias);
		int _la;
		try {
			setState(5218);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5211);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5210);
					match(AS);
					}
				}

				setState(5215);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5213);
					identifier();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5214);
					quoted_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5217);
				match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_alias(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_table_alias);
		try {
			setState(5222);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5220);
				identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5221);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PlSqlParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWhere_clause(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5224);
			match(WHERE);
			setState(5229);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(5225);
				match(CURRENT);
				setState(5226);
				match(OF);
				setState(5227);
				cursor_name();
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5228);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInto_clause(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_into_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5233);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BULK) {
				{
				setState(5231);
				match(BULK);
				setState(5232);
				match(COLLECT);
				}
			}

			setState(5235);
			match(INTO);
			setState(5236);
			variable_name();
			setState(5241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5237);
				match(COMMA);
				setState(5238);
				variable_name();
				}
				}
				setState(5243);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_column_name(this);
		}
	}

	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_xml_column_name);
		try {
			setState(5246);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5244);
				identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5245);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_class_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCost_class_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCost_class_name(this);
		}
	}

	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5248);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAttribute_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAttribute_name(this);
		}
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5250);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSavepoint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSavepoint_name(this);
		}
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5252);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_segment_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRollback_segment_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRollback_segment_name(this);
		}
	}

	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5254);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_var_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_var_name(this);
		}
	}

	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5256);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSchema_name(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5258);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRoutine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRoutine_name(this);
		}
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_routine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5260);
			identifier();
			setState(5265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5261);
				match(PERIOD);
				setState(5262);
				id_expression();
				}
				}
				setState(5267);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5268);
				match(AT_SIGN);
				setState(5269);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPackage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPackage_name(this);
		}
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5272);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_type_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterImplementation_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitImplementation_type_name(this);
		}
	}

	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_implementation_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5274);
			identifier();
			setState(5277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5275);
				match(PERIOD);
				setState(5276);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParameter_name(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5279);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_model_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReference_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReference_model_name(this);
		}
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5281);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_model_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMain_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMain_model_name(this);
		}
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5283);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAggregate_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAggregate_function_name(this);
		}
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_aggregate_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5285);
			identifier();
			setState(5290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5286);
				match(PERIOD);
				setState(5287);
				id_expression();
				}
				}
				setState(5292);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuery_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuery_name(this);
		}
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5293);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConstraint_name(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5295);
			identifier();
			setState(5300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5296);
				match(PERIOD);
				setState(5297);
				id_expression();
				}
				}
				setState(5302);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5303);
				match(AT_SIGN);
				setState(5304);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLabel_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLabel_name(this);
		}
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5307);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_name(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5309);
			id_expression();
			setState(5314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5310);
				match(PERIOD);
				setState(5311);
				id_expression();
				}
				}
				setState(5316);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSequence_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSequence_name(this);
		}
	}

	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_sequence_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5317);
			id_expression();
			setState(5322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5318);
				match(PERIOD);
				setState(5319);
				id_expression();
				}
				}
				setState(5324);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterException_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitException_name(this);
		}
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_exception_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5325);
			identifier();
			setState(5330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5326);
				match(PERIOD);
				setState(5327);
				id_expression();
				}
				}
				setState(5332);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_name(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5333);
			identifier();
			setState(5336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5334);
				match(PERIOD);
				setState(5335);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitProcedure_name(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_procedure_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5338);
			identifier();
			setState(5341);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5339);
				match(PERIOD);
				setState(5340);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTrigger_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTrigger_name(this);
		}
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_trigger_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5343);
			identifier();
			setState(5346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5344);
				match(PERIOD);
				setState(5345);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterVariable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitVariable_name(this);
		}
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_variable_name);
		int _la;
		try {
			setState(5358);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTRODUCER) {
					{
					setState(5348);
					match(INTRODUCER);
					setState(5349);
					char_set_name();
					}
				}

				setState(5352);
				id_expression();
				setState(5355);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5353);
					match(PERIOD);
					setState(5354);
					id_expression();
					}
				}

				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5357);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIndex_name(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5360);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_name(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_cursor_name);
		try {
			setState(5364);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5362);
				identifier();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5363);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRecord_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRecord_name(this);
		}
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_record_name);
		try {
			setState(5368);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5366);
				identifier();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5367);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCollection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCollection_name(this);
		}
	}

	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_collection_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5370);
			identifier();
			setState(5373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5371);
				match(PERIOD);
				setState(5372);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Link_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLink_name(this);
		}
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5375);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitColumn_name(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_column_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5377);
			identifier();
			setState(5382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5378);
				match(PERIOD);
				setState(5379);
				id_expression();
				}
				}
				setState(5384);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tableview_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTableview_name(this);
		}
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5385);
			identifier();
			setState(5388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
			case 1:
				{
				setState(5386);
				match(PERIOD);
				setState(5387);
				id_expression();
				}
				break;
			}
			setState(5393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,703,_ctx) ) {
			case 1:
				{
				setState(5390);
				match(AT_SIGN);
				setState(5391);
				link_name();
				}
				break;
			case 2:
				{
				setState(5392);
				partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_set_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterChar_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitChar_set_name(this);
		}
	}

	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_char_set_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5395);
			id_expression();
			setState(5400);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5396);
				match(PERIOD);
				setState(5397);
				id_expression();
				}
				}
				setState(5402);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Synonym_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Synonym_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_synonym_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSynonym_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSynonym_name(this);
		}
	}

	public final Synonym_nameContext synonym_name() throws RecognitionException {
		Synonym_nameContext _localctx = new Synonym_nameContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_synonym_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5403);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_object_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_object_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_object_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSchema_object_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSchema_object_name(this);
		}
	}

	public final Schema_object_nameContext schema_object_name() throws RecognitionException {
		Schema_object_nameContext _localctx = new Schema_object_nameContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_schema_object_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5405);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Keep_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keep_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterKeep_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitKeep_clause(this);
		}
	}

	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5407);
			match(KEEP);
			setState(5408);
			match(LEFT_PAREN);
			setState(5409);
			match(DENSE_RANK);
			setState(5410);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5411);
			order_by_clause();
			setState(5412);
			match(RIGHT_PAREN);
			setState(5414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
			case 1:
				{
				setState(5413);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argumentContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_argument(this);
		}
	}

	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5416);
			match(LEFT_PAREN);
			setState(5418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PRIOR - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (DECODE - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (NVL - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROUND - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TO_CHAR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (LEAST - 514)) | (1L << (GREATEST - 514)) | (1L << (TO_DATE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (UNSIGNED_INTEGER - 514)) | (1L << (APPROXIMATE_NUM_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (LEFT_PAREN - 514)) | (1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(5417);
				argument();
				}
			}

			setState(5424);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5420);
				match(COMMA);
				setState(5421);
				argument();
				}
				}
				setState(5426);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5427);
			match(RIGHT_PAREN);
			setState(5429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,708,_ctx) ) {
			case 1:
				{
				setState(5428);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_analyticContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_argument_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_argument_analytic(this);
		}
	}

	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5431);
			match(LEFT_PAREN);
			setState(5436);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (PRIOR - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (DECODE - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (NVL - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROUND - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TO_CHAR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (LEAST - 514)) | (1L << (GREATEST - 514)) | (1L << (TO_DATE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (UNSIGNED_INTEGER - 514)) | (1L << (APPROXIMATE_NUM_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (LEFT_PAREN - 514)) | (1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
				{
				setState(5432);
				argument();
				setState(5434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5433);
					respect_or_ignore_nulls();
					}
				}

				}
			}

			setState(5445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5438);
				match(COMMA);
				setState(5439);
				argument();
				setState(5441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5440);
					respect_or_ignore_nulls();
					}
				}

				}
				}
				setState(5447);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5448);
			match(RIGHT_PAREN);
			setState(5450);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
			case 1:
				{
				setState(5449);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_modelingContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PlSqlParser.NULL, i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_argument_modeling(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_argument_modeling(this);
		}
	}

	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5452);
			match(LEFT_PAREN);
			setState(5453);
			column_name();
			setState(5466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5454);
				match(COMMA);
				setState(5457);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(5455);
					numeric();
					}
					break;
				case NULL:
					{
					setState(5456);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5464);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5459);
					match(COMMA);
					setState(5462);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(5460);
						numeric();
						}
						break;
					case NULL:
						{
						setState(5461);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(5468);
			match(USING);
			setState(5488);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
			case 1:
				{
				setState(5469);
				tableview_name();
				setState(5470);
				match(PERIOD);
				setState(5471);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(5473);
				match(ASTERISK);
				}
				break;
			case 3:
				{
				setState(5474);
				expression();
				setState(5476);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
					{
					setState(5475);
					column_alias();
					}
				}

				setState(5485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5478);
					match(COMMA);
					setState(5479);
					expression();
					setState(5481);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (NATIONAL_CHAR_STRING_LIT - 514)) | (1L << (CHAR_STRING - 514)) | (1L << (DELIMITED_ID - 514)) | (1L << (INTRODUCER - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) {
						{
						setState(5480);
						column_alias();
						}
					}

					}
					}
					setState(5487);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(5490);
			match(RIGHT_PAREN);
			setState(5492);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
			case 1:
				{
				setState(5491);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(PlSqlParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRespect_or_ignore_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRespect_or_ignore_nulls(this);
		}
	}

	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5494);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5495);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitArgument(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5501);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
			case 1:
				{
				setState(5497);
				identifier();
				setState(5498);
				match(EQUALS_OP);
				setState(5499);
				match(GREATER_THAN_OP);
				}
				break;
			}
			setState(5503);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(PlSqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(PlSqlParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_spec(this);
		}
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_type_spec);
		int _la;
		try {
			setState(5513);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5505);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5507);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
				case 1:
					{
					setState(5506);
					match(REF);
					}
					break;
				}
				setState(5509);
				type_name();
				setState(5511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					setState(5510);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDatatype(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_datatype);
		int _la;
		try {
			setState(5546);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHARACTER:
			case CHAR:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INTEGER:
			case INT:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR2:
			case VARCHAR:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5515);
				native_datatype_element();
				setState(5517);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,727,_ctx) ) {
				case 1:
					{
					setState(5516);
					precision_part();
					}
					break;
				}
				setState(5528);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WITH:
					{
					setState(5519);
					match(WITH);
					setState(5521);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(5520);
						match(LOCAL);
						}
					}

					setState(5523);
					match(TIME);
					setState(5524);
					match(ZONE);
					}
					break;
				case CHARACTER:
					{
					setState(5525);
					match(CHARACTER);
					setState(5526);
					match(SET);
					setState(5527);
					char_set_name();
					}
					break;
				case EOF:
				case AGGREGATE:
				case AS:
				case AUTHID:
				case CASCADE:
				case CONSTRUCTOR:
				case DEFAULT:
				case DETERMINISTIC:
				case ENCODING:
				case EXTERNAL:
				case FINAL:
				case HIDE:
				case INDENT:
				case INDEXED:
				case INDEX:
				case INSTANTIABLE:
				case INVALIDATE:
				case IS:
				case MAP:
				case MEMBER:
				case NO:
				case NOT:
				case ORDER:
				case OVERRIDING:
				case PARALLEL_ENABLE:
				case PATH:
				case PIPELINED:
				case RANGE:
				case RESULT_CACHE:
				case RETURN:
				case SHOW:
				case STATIC:
				case VERSION:
				case LEFT_PAREN:
				case RIGHT_PAREN:
				case COMMA:
				case ASSIGN_OP:
				case SEMICOLON:
					break;
				default:
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5530);
				match(INTERVAL);
				setState(5531);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5532);
					match(LEFT_PAREN);
					setState(5533);
					expression();
					setState(5534);
					match(RIGHT_PAREN);
					}
				}

				setState(5538);
				match(TO);
				setState(5539);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5544);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
				case 1:
					{
					setState(5540);
					match(LEFT_PAREN);
					setState(5541);
					expression();
					setState(5542);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_partContext extends ParserRuleContext {
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPrecision_part(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5548);
			match(LEFT_PAREN);
			setState(5549);
			numeric();
			setState(5552);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5550);
				match(COMMA);
				setState(5551);
				numeric();
				}
			}

			setState(5555);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(5554);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5557);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode BINARY_INTEGER() { return getToken(PlSqlParser.BINARY_INTEGER, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PlSqlParser.PLS_INTEGER, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PlSqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode NATURALN() { return getToken(PlSqlParser.NATURALN, 0); }
		public TerminalNode POSITIVE() { return getToken(PlSqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(PlSqlParser.POSITIVEN, 0); }
		public TerminalNode SIGNTYPE() { return getToken(PlSqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode NVARCHAR2() { return getToken(PlSqlParser.NVARCHAR2, 0); }
		public TerminalNode DEC() { return getToken(PlSqlParser.DEC, 0); }
		public TerminalNode INTEGER() { return getToken(PlSqlParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
		public TerminalNode NUMERIC() { return getToken(PlSqlParser.NUMERIC, 0); }
		public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
		public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(PlSqlParser.REAL, 0); }
		public TerminalNode NCHAR() { return getToken(PlSqlParser.NCHAR, 0); }
		public TerminalNode LONG() { return getToken(PlSqlParser.LONG, 0); }
		public TerminalNode RAW() { return getToken(PlSqlParser.RAW, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR2() { return getToken(PlSqlParser.VARCHAR2, 0); }
		public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode UROWID() { return getToken(PlSqlParser.UROWID, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode BFILE() { return getToken(PlSqlParser.BFILE, 0); }
		public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(PlSqlParser.NCLOB, 0); }
		public TerminalNode MLSLABEL() { return getToken(PlSqlParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNative_datatype_element(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_native_datatype_element);
		int _la;
		try {
			setState(5619);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5559);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5560);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5561);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(5562);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5563);
				match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 6);
				{
				setState(5564);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5565);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 8);
				{
				setState(5566);
				match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5567);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(5568);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				enterOuterAlt(_localctx, 11);
				{
				setState(5569);
				match(NVARCHAR2);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 12);
				{
				setState(5570);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 13);
				{
				setState(5571);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 14);
				{
				setState(5572);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 15);
				{
				setState(5573);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 16);
				{
				setState(5574);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 17);
				{
				setState(5575);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 18);
				{
				setState(5576);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 19);
				{
				setState(5577);
				match(DOUBLE);
				setState(5579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5578);
					match(PRECISION);
					}
				}

				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(5581);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 21);
				{
				setState(5582);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(5583);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 23);
				{
				setState(5584);
				match(LONG);
				setState(5586);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RAW) {
					{
					setState(5585);
					match(RAW);
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(5588);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 25);
				{
				setState(5589);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 26);
				{
				setState(5590);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 27);
				{
				setState(5591);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 28);
				{
				setState(5592);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 29);
				{
				setState(5593);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 30);
				{
				setState(5594);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 31);
				{
				setState(5595);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 32);
				{
				setState(5596);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 33);
				{
				setState(5597);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 34);
				{
				setState(5598);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 35);
				{
				setState(5599);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 36);
				{
				setState(5600);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 37);
				{
				setState(5601);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 38);
				{
				setState(5602);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 39);
				{
				setState(5603);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 40);
				{
				setState(5604);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 41);
				{
				setState(5605);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 42);
				{
				setState(5606);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 43);
				{
				setState(5607);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 44);
				{
				setState(5608);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 45);
				{
				setState(5609);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 46);
				{
				setState(5610);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(5611);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(5612);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(5613);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 50);
				{
				setState(5614);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 51);
				{
				setState(5615);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 52);
				{
				setState(5616);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(5617);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 54);
				{
				setState(5618);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> BINDVAR() { return getTokens(PlSqlParser.BINDVAR); }
		public TerminalNode BINDVAR(int i) {
			return getToken(PlSqlParser.BINDVAR, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBind_variable(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_bind_variable);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5624);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINDVAR:
				{
				setState(5621);
				match(BINDVAR);
				}
				break;
			case COLON:
				{
				setState(5622);
				match(COLON);
				setState(5623);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5634);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
			case 1:
				{
				setState(5627);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(5626);
					match(INDICATOR);
					}
				}

				setState(5632);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(5629);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(5630);
					match(COLON);
					setState(5631);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(5640);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,742,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5636);
					match(PERIOD);
					setState(5637);
					general_element_part();
					}
					} 
				}
				setState(5642);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,742,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_elementContext extends ParserRuleContext {
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGeneral_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGeneral_element(this);
		}
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_general_element);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5643);
			general_element_part();
			setState(5648);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,743,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5644);
					match(PERIOD);
					setState(5645);
					general_element_part();
					}
					} 
				}
				setState(5650);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,743,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_element_partContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGeneral_element_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGeneral_element_part(this);
		}
	}

	public final General_element_partContext general_element_part() throws RecognitionException {
		General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_general_element_part);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5651);
				match(INTRODUCER);
				setState(5652);
				char_set_name();
				}
			}

			setState(5655);
			id_expression();
			setState(5660);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,745,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5656);
					match(PERIOD);
					setState(5657);
					id_expression();
					}
					} 
				}
				setState(5662);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,745,_ctx);
			}
			setState(5665);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
			case 1:
				{
				setState(5663);
				match(AT_SIGN);
				setState(5664);
				link_name();
				}
				break;
			}
			setState(5668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
			case 1:
				{
				setState(5667);
				function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_element(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5670);
				match(INTRODUCER);
				setState(5671);
				char_set_name();
				}
			}

			setState(5674);
			id_expression();
			setState(5679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5675);
				match(PERIOD);
				setState(5676);
				id_expression();
				}
				}
				setState(5681);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public List<TerminalNode> DAY() { return getTokens(PlSqlParser.DAY); }
		public TerminalNode DAY(int i) {
			return getToken(PlSqlParser.DAY, i);
		}
		public List<TerminalNode> HOUR() { return getTokens(PlSqlParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(PlSqlParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(PlSqlParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(PlSqlParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(PlSqlParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(PlSqlParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(PlSqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PlSqlParser.FALSE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConstant(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_constant);
		int _la;
		try {
			setState(5744);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5682);
				match(TIMESTAMP);
				setState(5685);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5683);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5684);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5691);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,751,_ctx) ) {
				case 1:
					{
					setState(5687);
					match(AT);
					setState(5688);
					match(TIME);
					setState(5689);
					match(ZONE);
					setState(5690);
					quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5693);
				match(INTERVAL);
				setState(5697);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5694);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5695);
					bind_variable();
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5696);
					general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5699);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==SECOND || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5713);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,756,_ctx) ) {
				case 1:
					{
					setState(5700);
					match(LEFT_PAREN);
					setState(5703);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(5701);
						match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						setState(5702);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5710);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5705);
						match(COMMA);
						setState(5708);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(5706);
							match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							setState(5707);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(5712);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5730);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,760,_ctx) ) {
				case 1:
					{
					setState(5715);
					match(TO);
					setState(5728);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(5716);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(5717);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(5718);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(5719);
						match(SECOND);
						setState(5726);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
						case 1:
							{
							setState(5720);
							match(LEFT_PAREN);
							setState(5723);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(5721);
								match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								setState(5722);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5725);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5732);
				numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5733);
				match(DATE);
				setState(5734);
				quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(5735);
				quoted_string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(5736);
				match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5737);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5738);
				match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5739);
				match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(5740);
				match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5741);
				match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(5742);
				match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(5743);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(PlSqlParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5746);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_negativeContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(PlSqlParser.MINUS_SIGN, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_negative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric_negative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric_negative(this);
		}
	}

	public final Numeric_negativeContext numeric_negative() throws RecognitionException {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_numeric_negative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5748);
			match(MINUS_SIGN);
			setState(5749);
			numeric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quoted_stringContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(PlSqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuoted_string(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5751);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIdentifier(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5753);
				match(INTRODUCER);
				setState(5754);
				char_set_name();
				}
			}

			setState(5757);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(PlSqlParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitId_expression(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_id_expression);
		try {
			setState(5761);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5759);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5760);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_signContext extends ParserRuleContext {
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOuter_join_sign(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5763);
			match(LEFT_PAREN);
			setState(5764);
			match(PLUS_SIGN);
			setState(5765);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public TerminalNode A_LETTER() { return getToken(PlSqlParser.A_LETTER, 0); }
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode AGENT() { return getToken(PlSqlParser.AGENT, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode ARRAY() { return getToken(PlSqlParser.ARRAY, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PlSqlParser.ASSOCIATE, 0); }
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PlSqlParser.ATTRIBUTE, 0); }
		public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
		public TerminalNode AUTHID() { return getToken(PlSqlParser.AUTHID, 0); }
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public TerminalNode AUTOMATIC() { return getToken(PlSqlParser.AUTOMATIC, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode BFILE() { return getToken(PlSqlParser.BFILE, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PlSqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(PlSqlParser.BINARY_INTEGER, 0); }
		public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
		public TerminalNode BLOCK() { return getToken(PlSqlParser.BLOCK, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
		public TerminalNode C_LETTER() { return getToken(PlSqlParser.C_LETTER, 0); }
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public TerminalNode CANONICAL() { return getToken(PlSqlParser.CANONICAL, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode CHAR_CS() { return getToken(PlSqlParser.CHAR_CS, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(PlSqlParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PlSqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(PlSqlParser.COMPATIBILITY, 0); }
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTENT() { return getToken(PlSqlParser.CONTENT, 0); }
		public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public TerminalNode CONVERT() { return getToken(PlSqlParser.CONVERT, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(PlSqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public TerminalNode CROSS() { return getToken(PlSqlParser.CROSS, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlSqlParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(PlSqlParser.CUSTOMDATUM, 0); }
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
		public TerminalNode DDL() { return getToken(PlSqlParser.DDL, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public TerminalNode DEC() { return getToken(PlSqlParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
		public TerminalNode DECOMPOSE() { return getToken(PlSqlParser.DECOMPOSE, 0); }
		public TerminalNode DECREMENT() { return getToken(PlSqlParser.DECREMENT, 0); }
		public TerminalNode DEFAULTS() { return getToken(PlSqlParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PlSqlParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(PlSqlParser.DETERMINISTIC, 0); }
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(PlSqlParser.DISASSOCIATE, 0); }
		public TerminalNode DOCUMENT() { return getToken(PlSqlParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode EACH() { return getToken(PlSqlParser.EACH, 0); }
		public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(PlSqlParser.ENCODING, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode ERR() { return getToken(PlSqlParser.ERR, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public TerminalNode EXCLUDE() { return getToken(PlSqlParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(PlSqlParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
		public TerminalNode FAILURE() { return getToken(PlSqlParser.FAILURE, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PlSqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(PlSqlParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public TerminalNode FORALL() { return getToken(PlSqlParser.FORALL, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public TerminalNode GROUPING() { return getToken(PlSqlParser.GROUPING, 0); }
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public TerminalNode HIDE() { return getToken(PlSqlParser.HIDE, 0); }
		public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode INCLUDE() { return getToken(PlSqlParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(PlSqlParser.INDENT, 0); }
		public TerminalNode INDEXED() { return getToken(PlSqlParser.INDEXED, 0); }
		public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
		public TerminalNode INDICES() { return getToken(PlSqlParser.INDICES, 0); }
		public TerminalNode INFINITE() { return getToken(PlSqlParser.INFINITE, 0); }
		public TerminalNode INLINE() { return getToken(PlSqlParser.INLINE, 0); }
		public TerminalNode INNER() { return getToken(PlSqlParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(PlSqlParser.INOUT, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(PlSqlParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PlSqlParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode INVALIDATE() { return getToken(PlSqlParser.INVALIDATE, 0); }
		public TerminalNode ISOLATION() { return getToken(PlSqlParser.ISOLATION, 0); }
		public TerminalNode ITERATE() { return getToken(PlSqlParser.ITERATE, 0); }
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PlSqlParser.LAST_VALUE, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode LEFT() { return getToken(PlSqlParser.LEFT, 0); }
		public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
		public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
		public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode LOCKED() { return getToken(PlSqlParser.LOCKED, 0); }
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public TerminalNode LOGOFF() { return getToken(PlSqlParser.LOGOFF, 0); }
		public TerminalNode LOGON() { return getToken(PlSqlParser.LOGON, 0); }
		public TerminalNode LONG() { return getToken(PlSqlParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(PlSqlParser.LOOP, 0); }
		public TerminalNode MAIN() { return getToken(PlSqlParser.MAIN, 0); }
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode MEASURES() { return getToken(PlSqlParser.MEASURES, 0); }
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode MLSLABEL() { return getToken(PlSqlParser.MLSLABEL, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode MULTISET() { return getToken(PlSqlParser.MULTISET, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode NAN() { return getToken(PlSqlParser.NAN, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public TerminalNode NATURALN() { return getToken(PlSqlParser.NATURALN, 0); }
		public TerminalNode NAV() { return getToken(PlSqlParser.NAV, 0); }
		public TerminalNode NCHAR() { return getToken(PlSqlParser.NCHAR, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode NCLOB() { return getToken(PlSqlParser.NCLOB, 0); }
		public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode NOAUDIT() { return getToken(PlSqlParser.NOAUDIT, 0); }
		public TerminalNode NOCOPY() { return getToken(PlSqlParser.NOCOPY, 0); }
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(PlSqlParser.NUMERIC, 0); }
		public TerminalNode NVARCHAR2() { return getToken(PlSqlParser.NVARCHAR2, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
		public TerminalNode OLD() { return getToken(PlSqlParser.OLD, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public TerminalNode ORADATA() { return getToken(PlSqlParser.ORADATA, 0); }
		public TerminalNode ORDINALITY() { return getToken(PlSqlParser.ORDINALITY, 0); }
		public TerminalNode OSERROR() { return getToken(PlSqlParser.OSERROR, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(PlSqlParser.OUTER, 0); }
		public TerminalNode OVER() { return getToken(PlSqlParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(PlSqlParser.OVERRIDING, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public TerminalNode PARENT() { return getToken(PlSqlParser.PARENT, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PlSqlParser.PASSING, 0); }
		public TerminalNode PATH() { return getToken(PlSqlParser.PATH, 0); }
		public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
		public TerminalNode PLAN() { return getToken(PlSqlParser.PLAN, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PlSqlParser.PLS_INTEGER, 0); }
		public TerminalNode POSITIVE() { return getToken(PlSqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(PlSqlParser.POSITIVEN, 0); }
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode PRECEDING() { return getToken(PlSqlParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
		public TerminalNode PRESENT() { return getToken(PlSqlParser.PRESENT, 0); }
		public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public TerminalNode RAW() { return getToken(PlSqlParser.RAW, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode REAL() { return getToken(PlSqlParser.REAL, 0); }
		public TerminalNode RECORD() { return getToken(PlSqlParser.RECORD, 0); }
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public TerminalNode REFERENCING() { return getToken(PlSqlParser.REFERENCING, 0); }
		public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
		public TerminalNode RELIES_ON() { return getToken(PlSqlParser.RELIES_ON, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode RESPECT() { return getToken(PlSqlParser.RESPECT, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(PlSqlParser.RIGHT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode RULES() { return getToken(PlSqlParser.RULES, 0); }
		public TerminalNode SAMPLE() { return getToken(PlSqlParser.SAMPLE, 0); }
		public TerminalNode SAVE() { return getToken(PlSqlParser.SAVE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(PlSqlParser.SCHEMACHECK, 0); }
		public TerminalNode SCN() { return getToken(PlSqlParser.SCN, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public TerminalNode SEED() { return getToken(PlSqlParser.SEED, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode SELF() { return getToken(PlSqlParser.SELF, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(PlSqlParser.SEQUENTIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode SERVERERROR() { return getToken(PlSqlParser.SERVERERROR, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode SETS() { return getToken(PlSqlParser.SETS, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public TerminalNode SHUTDOWN() { return getToken(PlSqlParser.SHUTDOWN, 0); }
		public TerminalNode SIBLINGS() { return getToken(PlSqlParser.SIBLINGS, 0); }
		public TerminalNode SIGNTYPE() { return getToken(PlSqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SINGLE() { return getToken(PlSqlParser.SINGLE, 0); }
		public TerminalNode SKIP_() { return getToken(PlSqlParser.SKIP_, 0); }
		public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlSqlParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public TerminalNode SQLDATA() { return getToken(PlSqlParser.SQLDATA, 0); }
		public TerminalNode SQLERROR() { return getToken(PlSqlParser.SQLERROR, 0); }
		public TerminalNode STANDALONE() { return getToken(PlSqlParser.STANDALONE, 0); }
		public TerminalNode STARTUP() { return getToken(PlSqlParser.STARTUP, 0); }
		public TerminalNode STATEMENT() { return getToken(PlSqlParser.STATEMENT, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(PlSqlParser.STATEMENT_ID, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
		public TerminalNode SUBSTR() { return getToken(PlSqlParser.SUBSTR, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode SUBTYPE() { return getToken(PlSqlParser.SUBTYPE, 0); }
		public TerminalNode SUCCESS() { return getToken(PlSqlParser.SUCCESS, 0); }
		public TerminalNode SUSPEND() { return getToken(PlSqlParser.SUSPEND, 0); }
		public TerminalNode TEMPORARY() { return getToken(PlSqlParser.TEMPORARY, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public TerminalNode TREAT() { return getToken(PlSqlParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PlSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public TerminalNode UNTIL() { return getToken(PlSqlParser.UNTIL, 0); }
		public TerminalNode UPDATED() { return getToken(PlSqlParser.UPDATED, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public TerminalNode UROWID() { return getToken(PlSqlParser.UROWID, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(PlSqlParser.VARCHAR2, 0); }
		public TerminalNode VARIABLE() { return getToken(PlSqlParser.VARIABLE, 0); }
		public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(PlSqlParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public TerminalNode VERSIONS() { return getToken(PlSqlParser.VERSIONS, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public TerminalNode WARNING() { return getToken(PlSqlParser.WARNING, 0); }
		public TerminalNode WELLFORMED() { return getToken(PlSqlParser.WELLFORMED, 0); }
		public TerminalNode WHENEVER() { return getToken(PlSqlParser.WHENEVER, 0); }
		public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
		public TerminalNode WITHIN() { return getToken(PlSqlParser.WITHIN, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(PlSqlParser.XMLAGG, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PlSqlParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PlSqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlSqlParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PlSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PlSqlParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PlSqlParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(PlSqlParser.XMLQUERY, 0); }
		public TerminalNode XMLROOT() { return getToken(PlSqlParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PlSqlParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PlSqlParser.XMLTABLE, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode PREDICTION() { return getToken(PlSqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(PlSqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(PlSqlParser.PREDICTION_SET, 0); }
		public TerminalNode CUME_DIST() { return getToken(PlSqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(PlSqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PlSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(PlSqlParser.RANK, 0); }
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(PlSqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(PlSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(PlSqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(PlSqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(PlSqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PlSqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(PlSqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(PlSqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(PlSqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(PlSqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(PlSqlParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRegular_id(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_regular_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5767);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHARACTER) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHR) | (1L << C_LETTER) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (ENTITYESCAPING - 130)) | (1L << (ERR - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)) | (1L << (INT - 194)) | (1L << (INVALIDATE - 194)) | (1L << (ISOLATION - 194)) | (1L << (ITERATE - 194)) | (1L << (JAVA - 194)) | (1L << (JOIN - 194)) | (1L << (KEEP - 194)) | (1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCHAR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NCLOB - 258)) | (1L << (NESTED - 258)) | (1L << (NEW - 258)) | (1L << (NOAUDIT - 258)) | (1L << (NOCOPY - 258)) | (1L << (NOCYCLE - 258)) | (1L << (NOENTITYESCAPING - 258)) | (1L << (NONE - 258)) | (1L << (NO - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUTER - 258)) | (1L << (OUT - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (PLS_INTEGER - 322)) | (1L << (POSITIVEN - 322)) | (1L << (POSITIVE - 322)) | (1L << (PRAGMA - 322)) | (1L << (PRECEDING - 322)) | (1L << (PRECISION - 322)) | (1L << (PRESENT - 322)) | (1L << (RAISE - 322)) | (1L << (RANGE - 322)) | (1L << (RAW - 322)) | (1L << (READ - 322)) | (1L << (REAL - 322)) | (1L << (RECORD - 322)) | (1L << (REFERENCE - 322)) | (1L << (REFERENCING - 322)) | (1L << (REF - 322)) | (1L << (REJECT - 322)) | (1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RESULT - 322)) | (1L << (RETURNING - 322)) | (1L << (RETURN - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROWID - 322)) | (1L << (ROW - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SAVE - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SETTINGS - 386)) | (1L << (SHOW - 386)) | (1L << (SHUTDOWN - 386)) | (1L << (SIBLINGS - 386)) | (1L << (SIGNTYPE - 386)) | (1L << (SIMPLE_INTEGER - 386)) | (1L << (SINGLE - 386)) | (1L << (SKIP_ - 386)) | (1L << (SMALLINT - 386)) | (1L << (SNAPSHOT - 386)) | (1L << (SOME - 386)) | (1L << (SPECIFICATION - 386)) | (1L << (SQLDATA - 386)) | (1L << (SQLERROR - 386)) | (1L << (STANDALONE - 386)) | (1L << (STARTUP - 386)) | (1L << (STATEMENT_ID - 386)) | (1L << (STATEMENT - 386)) | (1L << (STATIC - 386)) | (1L << (STATISTICS - 386)) | (1L << (STRING - 386)) | (1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TEMPORARY - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIME - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (UPSERT - 450)) | (1L << (UROWID - 450)) | (1L << (USE - 450)) | (1L << (VALIDATE - 450)) | (1L << (VALUE - 450)) | (1L << (VARCHAR2 - 450)) | (1L << (VARCHAR - 450)) | (1L << (VARIABLE - 450)) | (1L << (VARRAY - 450)) | (1L << (VARYING - 450)) | (1L << (VERSIONS - 450)) | (1L << (VERSION - 450)) | (1L << (WAIT - 450)) | (1L << (WARNING - 450)) | (1L << (WELLFORMED - 450)) | (1L << (WHENEVER - 450)) | (1L << (WHILE - 450)) | (1L << (WITHIN - 450)) | (1L << (WORK - 450)) | (1L << (WRITE - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (XML - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (COVAR_ - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (MEDIAN - 514)) | (1L << (MIN - 514)) | (1L << (NTILE - 514)) | (1L << (RATIO_TO_REPORT - 514)) | (1L << (REGR_ - 514)) | (1L << (ROW_NUMBER - 514)) | (1L << (SUBSTR - 514)) | (1L << (TRIM - 514)) | (1L << (SUM - 514)) | (1L << (STDDEV - 514)) | (1L << (VAR_ - 514)) | (1L << (VARIANCE - 514)) | (1L << (REGULAR_ID - 514)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_function_nameContext extends ParserRuleContext {
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public TerminalNode DECODE() { return getToken(PlSqlParser.DECODE, 0); }
		public TerminalNode SUBSTR() { return getToken(PlSqlParser.SUBSTR, 0); }
		public TerminalNode TO_CHAR() { return getToken(PlSqlParser.TO_CHAR, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public String_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterString_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitString_function_name(this);
		}
	}

	public final String_function_nameContext string_function_name() throws RecognitionException {
		String_function_nameContext _localctx = new String_function_nameContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_string_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5769);
			_la = _input.LA(1);
			if ( !(_la==CHR || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (DECODE - 510)) | (1L << (SUBSTR - 510)) | (1L << (TO_CHAR - 510)) | (1L << (TRIM - 510)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_function_nameContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public TerminalNode NVL() { return getToken(PlSqlParser.NVL, 0); }
		public TerminalNode ROUND() { return getToken(PlSqlParser.ROUND, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public Numeric_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric_function_name(this);
		}
	}

	public final Numeric_function_nameContext numeric_function_name() throws RecognitionException {
		Numeric_function_nameContext _localctx = new Numeric_function_nameContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_numeric_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5771);
			_la = _input.LA(1);
			if ( !(_la==COUNT || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (AVG - 507)) | (1L << (NVL - 507)) | (1L << (ROUND - 507)) | (1L << (SUM - 507)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 270:
			return logical_expression_sempred((Logical_expressionContext)_localctx, predIndex);
		case 272:
			return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		case 277:
			return concatenation_sempred((ConcatenationContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean logical_expression_sempred(Logical_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		case 1:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean concatenation_sempred(ConcatenationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 3);
		case 4:
			return precpred(_ctx, 2);
		case 5:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u023f\u1690\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\3\2\3\2\5\2\u0309\n\2\3\2\5\2"+
		"\u030c\n\2\7\2\u030e\n\2\f\2\16\2\u0311\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0333\n\3\3\4\3\4\3\4\3\4\3\4\3\5"+
		"\3\5\3\5\3\5\3\5\5\5\u033f\n\5\3\5\7\5\u0342\n\5\f\5\16\5\u0345\13\5\3"+
		"\5\3\5\5\5\u0349\n\5\3\5\3\5\3\6\3\6\3\6\5\6\u0350\n\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\7\6\u0358\n\6\f\6\16\6\u035b\13\6\3\6\3\6\5\6\u035f\n\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\7\6\u0367\n\6\f\6\16\6\u036a\13\6\3\6\5\6\u036d\n\6"+
		"\3\6\3\6\5\6\u0371\n\6\3\6\7\6\u0374\n\6\f\6\16\6\u0377\13\6\3\6\3\6\5"+
		"\6\u037b\n\6\3\6\3\6\3\6\5\6\u0380\n\6\3\6\3\6\3\7\3\7\5\7\u0386\n\7\3"+
		"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0392\n\b\f\b\16\b\u0395\13"+
		"\b\3\b\3\b\5\b\u0399\n\b\3\b\5\b\u039c\n\b\3\b\3\b\3\t\3\t\5\t\u03a2\n"+
		"\t\3\n\3\n\3\n\3\n\3\n\7\n\u03a9\n\n\f\n\16\n\u03ac\13\n\3\n\3\n\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u03b7\n\13\f\13\16\13\u03ba\13\13"+
		"\3\13\3\13\3\f\3\f\3\f\5\f\u03c1\n\f\3\f\3\f\3\f\5\f\u03c6\n\f\3\f\3\f"+
		"\3\f\3\r\3\r\3\r\3\r\3\r\5\r\u03d0\n\r\3\r\5\r\u03d3\n\r\3\r\7\r\u03d6"+
		"\n\r\f\r\16\r\u03d9\13\r\3\r\3\r\5\r\u03dd\n\r\3\r\3\r\3\16\3\16\3\16"+
		"\5\16\u03e4\n\16\3\16\3\16\3\16\3\16\5\16\u03ea\n\16\3\16\3\16\5\16\u03ee"+
		"\n\16\3\16\3\16\7\16\u03f2\n\16\f\16\16\16\u03f5\13\16\3\16\3\16\5\16"+
		"\u03f9\n\16\3\16\3\16\3\17\3\17\3\17\5\17\u0400\n\17\3\17\3\17\3\17\3"+
		"\17\3\17\5\17\u0407\n\17\3\17\3\17\3\17\7\17\u040c\n\17\f\17\16\17\u040f"+
		"\13\17\3\17\3\17\3\17\3\17\5\17\u0415\n\17\5\17\u0417\n\17\3\17\3\17\3"+
		"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0423\n\20\3\21\3\21\3\21"+
		"\3\21\3\21\3\21\7\21\u042b\n\21\f\21\16\21\u042e\13\21\3\21\3\21\5\21"+
		"\u0432\n\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\7\22\u043c\n\22\f"+
		"\22\16\22\u043f\13\22\3\22\3\22\5\22\u0443\n\22\3\22\3\22\3\22\5\22\u0448"+
		"\n\22\3\22\5\22\u044b\n\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\5\23\u0458\n\23\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25"+
		"\3\25\5\25\u0464\n\25\3\25\7\25\u0467\n\25\f\25\16\25\u046a\13\25\3\25"+
		"\3\25\5\25\u046e\n\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u0478"+
		"\n\26\f\26\16\26\u047b\13\26\3\26\3\26\5\26\u047f\n\26\3\26\3\26\3\26"+
		"\3\26\3\26\3\26\7\26\u0487\n\26\f\26\16\26\u048a\13\26\3\26\5\26\u048d"+
		"\n\26\3\26\3\26\5\26\u0491\n\26\3\26\7\26\u0494\n\26\f\26\16\26\u0497"+
		"\13\26\3\26\3\26\5\26\u049b\n\26\3\26\3\26\3\26\5\26\u04a0\n\26\3\26\3"+
		"\26\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u04aa\n\27\f\27\16\27\u04ad\13"+
		"\27\3\27\3\27\5\27\u04b1\n\27\3\27\3\27\5\27\u04b5\n\27\3\27\7\27\u04b8"+
		"\n\27\f\27\16\27\u04bb\13\27\3\27\3\27\3\27\5\27\u04c0\n\27\3\27\3\27"+
		"\3\30\3\30\3\30\5\30\u04c7\n\30\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u04cf"+
		"\n\30\f\30\16\30\u04d2\13\30\3\30\3\30\5\30\u04d6\n\30\3\30\5\30\u04d9"+
		"\n\30\3\30\3\30\5\30\u04dd\n\30\3\30\7\30\u04e0\n\30\f\30\16\30\u04e3"+
		"\13\30\3\30\3\30\3\30\5\30\u04e8\n\30\3\30\3\30\3\31\3\31\3\31\3\31\3"+
		"\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u04fa\n\32\3\32"+
		"\7\32\u04fd\n\32\f\32\16\32\u0500\13\32\3\32\3\32\5\32\u0504\n\32\5\32"+
		"\u0506\n\32\3\32\3\32\3\33\3\33\3\33\5\33\u050d\n\33\3\33\3\33\3\33\3"+
		"\33\3\33\5\33\u0514\n\33\3\33\5\33\u0517\n\33\3\33\5\33\u051a\n\33\3\33"+
		"\5\33\u051d\n\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\7\34\u0526\n\34\f"+
		"\34\16\34\u0529\13\34\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\5\36"+
		"\u0534\n\36\3\36\3\36\5\36\u0538\n\36\3\36\5\36\u053b\n\36\3\37\3\37\3"+
		"\37\3\37\3 \3 \3 \5 \u0544\n \3!\3!\3!\3!\7!\u054a\n!\f!\16!\u054d\13"+
		"!\3!\3!\3!\3!\3!\5!\u0554\n!\3!\5!\u0557\n!\3\"\3\"\3\"\3\"\3\"\5\"\u055e"+
		"\n\"\3#\3#\5#\u0562\n#\3$\3$\3$\7$\u0567\n$\f$\16$\u056a\13$\3$\6$\u056d"+
		"\n$\r$\16$\u056e\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3"+
		"%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0598"+
		"\n%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&"+
		"\3&\3&\3&\3&\5&\u05b4\n&\3\'\3\'\3\'\7\'\u05b9\n\'\f\'\16\'\u05bc\13\'"+
		"\3\'\3\'\5\'\u05c0\n\'\3\'\3\'\3(\3(\3(\3(\3(\7(\u05c9\n(\f(\16(\u05cc"+
		"\13(\5(\u05ce\n(\3)\3)\3)\3)\3)\3*\3*\6*\u05d7\n*\r*\16*\u05d8\3+\3+\3"+
		"+\3,\3,\3,\5,\u05e1\n,\3,\3,\5,\u05e5\n,\3,\3,\3-\3-\3-\3-\3-\3-\3-\3"+
		"-\5-\u05f1\n-\3-\5-\u05f4\n-\3-\3-\3.\3.\5.\u05fa\n.\3.\5.\u05fd\n.\3"+
		".\7.\u0600\n.\f.\16.\u0603\13.\3.\3.\5.\u0607\n.\3/\3/\5/\u060b\n/\3/"+
		"\3/\3/\3/\3/\3/\7/\u0613\n/\f/\16/\u0616\13/\3/\3/\3\60\3\60\3\60\7\60"+
		"\u061d\n\60\f\60\16\60\u0620\13\60\3\61\3\61\3\61\5\61\u0625\n\61\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u062e\n\62\f\62\16\62\u0631\13\62"+
		"\3\62\3\62\5\62\u0635\n\62\3\63\3\63\5\63\u0639\n\63\3\64\3\64\3\64\3"+
		"\64\3\64\3\64\5\64\u0641\n\64\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u0649"+
		"\n\65\3\65\3\65\3\65\5\65\u064e\n\65\3\65\5\65\u0651\n\65\5\65\u0653\n"+
		"\65\3\66\5\66\u0656\n\66\3\66\3\66\3\66\3\66\3\67\3\67\3\67\5\67\u065f"+
		"\n\67\3\67\3\67\3\67\5\67\u0664\n\67\3\67\3\67\38\38\38\58\u066b\n8\3"+
		"8\58\u066e\n8\39\59\u0671\n9\39\39\59\u0675\n9\39\59\u0678\n9\39\39\3"+
		"9\39\79\u067e\n9\f9\169\u0681\139\39\39\59\u0685\n9\39\79\u0688\n9\f9"+
		"\169\u068b\139\3:\3:\3:\3:\5:\u0691\n:\3;\3;\3;\3<\3<\3<\3<\3<\5<\u069b"+
		"\n<\3=\3=\3=\3=\3=\3=\3=\3=\3>\3>\3>\3>\6>\u06a9\n>\r>\16>\u06aa\3>\3"+
		">\3?\3?\5?\u06b1\n?\3@\3@\3@\3@\3A\3A\3A\3A\5A\u06bb\nA\3B\3B\3B\3B\3"+
		"B\3B\7B\u06c3\nB\fB\16B\u06c6\13B\3B\3B\3B\3B\5B\u06cc\nB\3B\7B\u06cf"+
		"\nB\fB\16B\u06d2\13B\3B\3B\3B\5B\u06d7\nB\3C\3C\3C\3C\3C\3C\7C\u06df\n"+
		"C\fC\16C\u06e2\13C\3C\3C\5C\u06e6\nC\3C\3C\3C\3C\3C\5C\u06ed\nC\3C\7C"+
		"\u06f0\nC\fC\16C\u06f3\13C\3C\3C\3C\5C\u06f8\nC\3D\5D\u06fb\nD\3D\5D\u06fe"+
		"\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u070d\nD\fD\16D\u0710\13"+
		"D\3D\3D\5D\u0714\nD\3D\3D\3D\3D\3D\3D\3D\5D\u071d\nD\3D\7D\u0720\nD\f"+
		"D\16D\u0723\13D\3D\3D\3D\5D\u0728\nD\3E\5E\u072b\nE\3E\3E\3F\3F\3F\5F"+
		"\u0732\nF\3F\5F\u0735\nF\3G\3G\3G\3G\3H\5H\u073c\nH\3H\6H\u073f\nH\rH"+
		"\16H\u0740\3H\3H\5H\u0745\nH\3I\3I\3I\5I\u074a\nI\3J\3J\3J\5J\u074f\n"+
		"J\3K\3K\3K\3K\3K\3K\7K\u0757\nK\fK\16K\u075a\13K\3K\3K\3K\5K\u075f\nK"+
		"\3L\3L\3L\3L\3L\3L\7L\u0767\nL\fL\16L\u076a\13L\3L\3L\5L\u076e\nL\3L\3"+
		"L\3L\3L\3L\5L\u0775\nL\3L\3L\3L\3L\5L\u077b\nL\3L\3L\5L\u077f\nL\3M\5"+
		"M\u0782\nM\3M\5M\u0785\nM\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\7M\u0794"+
		"\nM\fM\16M\u0797\13M\3M\3M\5M\u079b\nM\3M\3M\3M\3M\3M\3M\5M\u07a3\nM\3"+
		"N\3N\3N\3N\3O\3O\3O\3O\3O\3O\7O\u07af\nO\fO\16O\u07b2\13O\3O\3O\3P\3P"+
		"\5P\u07b8\nP\3Q\3Q\3Q\3R\3R\3R\3R\3R\3S\3S\3S\3S\6S\u07c6\nS\rS\16S\u07c7"+
		"\3S\3S\3T\3T\3T\3T\3T\7T\u07d1\nT\fT\16T\u07d4\13T\3T\3T\3U\3U\3U\3U\3"+
		"U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u07e8\nU\3V\3V\3V\3V\3W\3W\5W\u07f0"+
		"\nW\3W\3W\3W\3W\3W\3W\3W\3W\7W\u07fa\nW\fW\16W\u07fd\13W\3W\3W\3W\5W\u0802"+
		"\nW\3W\3W\3X\3X\3X\3X\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Z\3Z\3Z\5Z\u0816\nZ"+
		"\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\7Z\u0821\nZ\fZ\16Z\u0824\13Z\3Z\3Z\3Z\3Z\3"+
		"Z\5Z\u082b\nZ\3Z\3Z\3Z\5Z\u0830\nZ\3Z\3Z\3Z\3Z\3Z\3Z\7Z\u0838\nZ\fZ\16"+
		"Z\u083b\13Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u084f"+
		"\nZ\3Z\3Z\3Z\3Z\3Z\6Z\u0856\nZ\rZ\16Z\u0857\3Z\5Z\u085b\nZ\3Z\3Z\5Z\u085f"+
		"\nZ\3Z\5Z\u0862\nZ\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u086a\nZ\5Z\u086c\nZ\5Z\u086e"+
		"\nZ\3Z\5Z\u0871\nZ\3Z\3Z\3[\3[\3[\3\\\3\\\3\\\3\\\3\\\3]\3]\3]\3]\3]\3"+
		"]\3]\3]\3]\3^\3^\3^\5^\u0889\n^\3^\3^\3^\3^\3^\3^\3^\5^\u0892\n^\3^\3"+
		"^\3^\5^\u0897\n^\3^\3^\3^\5^\u089c\n^\3^\3^\3^\3^\5^\u08a2\n^\3^\3^\3"+
		"^\3^\3^\5^\u08a9\n^\3^\3^\3^\5^\u08ae\n^\5^\u08b0\n^\3_\3_\3_\3_\3_\3"+
		"_\3_\3`\3`\3`\3`\3`\3`\3`\5`\u08c0\n`\3a\3a\3a\5a\u08c5\na\3a\3a\3a\3"+
		"a\5a\u08cb\na\3b\3b\3b\3b\3b\5b\u08d2\nb\3c\3c\3c\3c\3d\3d\3d\3d\3e\3"+
		"e\3e\3e\3f\3f\3f\3f\3f\3f\7f\u08e6\nf\ff\16f\u08e9\13f\3f\3f\3f\5f\u08ee"+
		"\nf\3g\3g\3g\3g\3g\3g\7g\u08f6\ng\fg\16g\u08f9\13g\3g\3g\3h\3h\3h\3h\3"+
		"h\5h\u0902\nh\3i\3i\3i\3i\3i\7i\u0909\ni\fi\16i\u090c\13i\3i\3i\3j\3j"+
		"\3j\3j\3j\3j\7j\u0916\nj\fj\16j\u0919\13j\3j\3j\3k\3k\3k\3k\3k\3l\3l\3"+
		"l\3m\3m\3m\3m\3n\3n\3n\5n\u092c\nn\3o\3o\3o\3o\3p\3p\3p\5p\u0935\np\3"+
		"p\3p\3p\5p\u093a\np\3p\3p\5p\u093e\np\3p\5p\u0941\np\3q\3q\3q\3q\3q\3"+
		"q\3r\3r\3r\3r\3r\3r\5r\u094f\nr\3r\3r\3s\3s\7s\u0955\ns\fs\16s\u0958\13"+
		"s\3s\5s\u095b\ns\3s\5s\u095e\ns\3t\3t\3t\3u\3u\3u\3u\3u\3u\3u\3u\3u\3"+
		"u\5u\u096d\nu\3v\3v\5v\u0971\nv\3v\3v\3v\5v\u0976\nv\3v\5v\u0979\nv\3"+
		"v\3v\3w\3w\3w\3w\3w\3w\3w\3w\3w\5w\u0986\nw\3w\3w\5w\u098a\nw\3w\3w\3"+
		"x\3x\3x\3x\3x\3x\7x\u0994\nx\fx\16x\u0997\13x\3x\3x\5x\u099b\nx\3x\3x"+
		"\5x\u099f\nx\3x\3x\5x\u09a3\nx\3x\3x\3y\3y\5y\u09a9\ny\3y\5y\u09ac\ny"+
		"\3y\5y\u09af\ny\3z\3z\3z\3z\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{"+
		"\3{\3{\3{\3{\3{\3{\3{\5{\u09ca\n{\3{\3{\6{\u09ce\n{\r{\16{\u09cf\3{\3"+
		"{\5{\u09d4\n{\3{\3{\3|\3|\3|\3|\3|\7|\u09dd\n|\f|\16|\u09e0\13|\3|\3|"+
		"\3}\3}\5}\u09e6\n}\3}\3}\5}\u09ea\n}\3}\5}\u09ed\n}\3~\3~\3~\3~\5~\u09f3"+
		"\n~\3\177\3\177\3\177\3\177\3\177\3\177\3\177\5\177\u09fc\n\177\3\177"+
		"\3\177\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0a04\n\u0080\3\u0080\3"+
		"\u0080\5\u0080\u0a08\n\u0080\3\u0081\3\u0081\5\u0081\u0a0c\n\u0081\3\u0081"+
		"\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\5\u0082\u0a14\n\u0082\3\u0082"+
		"\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0a1d\n\u0082"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\6\u0083\u0a23\n\u0083\r\u0083\16\u0083"+
		"\u0a24\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0a33\n\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085"+
		"\u0a48\n\u0085\3\u0086\6\u0086\u0a4b\n\u0086\r\u0086\16\u0086\u0a4c\3"+
		"\u0087\3\u0087\5\u0087\u0a51\n\u0087\3\u0087\3\u0087\3\u0087\3\u0088\3"+
		"\u0088\5\u0088\u0a58\n\u0088\3\u0088\3\u0088\5\u0088\u0a5c\n\u0088\3\u0089"+
		"\3\u0089\5\u0089\u0a60\n\u0089\3\u0089\3\u0089\5\u0089\u0a64\n\u0089\3"+
		"\u008a\3\u008a\3\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\7\u008b"+
		"\u0a6e\n\u008b\f\u008b\16\u008b\u0a71\13\u008b\3\u008b\5\u008b\u0a74\n"+
		"\u008b\3\u008b\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c"+
		"\3\u008d\3\u008d\3\u008d\3\u008e\5\u008e\u0a82\n\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\5\u008e\u0a88\n\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\5\u008e\u0a8f\n\u008e\3\u008f\3\u008f\3\u008f\5\u008f\u0a94\n"+
		"\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\5\u008f\u0a9f\n\u008f\3\u008f\5\u008f\u0aa2\n\u008f\3\u008f\3"+
		"\u008f\3\u008f\3\u008f\5\u008f\u0aa8\n\u008f\5\u008f\u0aaa\n\u008f\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0ab3\n\u0090"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091"+
		"\u0abd\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0ac2\n\u0091\3\u0092\3"+
		"\u0092\3\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0094\3\u0094\3\u0095"+
		"\3\u0095\3\u0096\3\u0096\5\u0096\u0ad1\n\u0096\3\u0097\3\u0097\5\u0097"+
		"\u0ad5\n\u0097\3\u0098\5\u0098\u0ad8\n\u0098\3\u0098\3\u0098\5\u0098\u0adc"+
		"\n\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\6\u009a\u0ae8\n\u009a\r\u009a\16\u009a\u0ae9\5\u009a"+
		"\u0aec\n\u009a\3\u009a\3\u009a\5\u009a\u0af0\n\u009a\3\u009b\3\u009b\3"+
		"\u009b\3\u009b\7\u009b\u0af6\n\u009b\f\u009b\16\u009b\u0af9\13\u009b\3"+
		"\u009b\3\u009b\3\u009b\3\u009c\5\u009c\u0aff\n\u009c\3\u009c\6\u009c\u0b02"+
		"\n\u009c\r\u009c\16\u009c\u0b03\5\u009c\u0b06\n\u009c\3\u009c\3\u009c"+
		"\3\u009d\5\u009d\u0b0b\n\u009d\3\u009d\6\u009d\u0b0e\n\u009d\r\u009d\16"+
		"\u009d\u0b0f\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0b18"+
		"\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0b1f\n\u009f"+
		"\3\u009f\3\u009f\5\u009f\u0b23\n\u009f\3\u009f\5\u009f\u0b26\n\u009f\3"+
		"\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\5\u00a1\u0b32\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2"+
		"\u0b38\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\5\u00a4\u0b41\n\u00a4\3\u00a4\5\u00a4\u0b44\n\u00a4\3\u00a5\3\u00a5\3"+
		"\u00a5\3\u00a5\3\u00a5\3\u00a5\7\u00a5\u0b4c\n\u00a5\f\u00a5\16\u00a5"+
		"\u0b4f\13\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\7\u00a5"+
		"\u0b57\n\u00a5\f\u00a5\16\u00a5\u0b5a\13\u00a5\5\u00a5\u0b5c\n\u00a5\3"+
		"\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0b63\n\u00a6\3\u00a6\5"+
		"\u00a6\u0b66\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0b6d"+
		"\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\5\u00a8\u0b78\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8"+
		"\u0b7e\n\u00a8\3\u00a8\3\u00a8\5\u00a8\u0b82\n\u00a8\3\u00a9\3\u00a9\3"+
		"\u00a9\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u0b8a\n\u00a9\f\u00a9\16\u00a9"+
		"\u0b8d\13\u00a9\5\u00a9\u0b8f\n\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa"+
		"\5\u00aa\u0b95\n\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0ba0\n\u00aa\5\u00aa\u0ba2\n\u00aa\5"+
		"\u00aa\u0ba4\n\u00aa\3\u00aa\5\u00aa\u0ba7\n\u00aa\3\u00ab\3\u00ab\5\u00ab"+
		"\u0bab\n\u00ab\3\u00ab\5\u00ab\u0bae\n\u00ab\3\u00ac\3\u00ac\5\u00ac\u0bb2"+
		"\n\u00ac\3\u00ac\3\u00ac\5\u00ac\u0bb6\n\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\5\u00ac\u0bbb\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0bc8\n\u00af\3\u00af"+
		"\3\u00af\5\u00af\u0bcc\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\5\u00af\u0bd4\n\u00af\3\u00b0\5\u00b0\u0bd7\n\u00b0\3\u00b0\3"+
		"\u00b0\3\u00b0\7\u00b0\u0bdc\n\u00b0\f\u00b0\16\u00b0\u0bdf\13\u00b0\3"+
		"\u00b1\3\u00b1\3\u00b1\3\u00b1\7\u00b1\u0be5\n\u00b1\f\u00b1\16\u00b1"+
		"\u0be8\13\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\7\u00b2\u0bef"+
		"\n\u00b2\f\u00b2\16\u00b2\u0bf2\13\u00b2\3\u00b2\3\u00b2\5\u00b2\u0bf6"+
		"\n\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0bfc\n\u00b2\3\u00b2"+
		"\3\u00b2\5\u00b2\u0c00\n\u00b2\3\u00b2\5\u00b2\u0c03\n\u00b2\3\u00b3\3"+
		"\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0c0b\n\u00b3\3\u00b3\5"+
		"\u00b3\u0c0e\n\u00b3\3\u00b3\3\u00b3\5\u00b3\u0c12\n\u00b3\3\u00b3\3\u00b3"+
		"\5\u00b3\u0c16\n\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0c1b\n\u00b3\3"+
		"\u00b3\5\u00b3\u0c1e\n\u00b3\3\u00b3\3\u00b3\5\u00b3\u0c22\n\u00b3\3\u00b3"+
		"\3\u00b3\5\u00b3\u0c26\n\u00b3\7\u00b3\u0c28\n\u00b3\f\u00b3\16\u00b3"+
		"\u0c2b\13\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\7\u00b4\u0c34\n\u00b4\f\u00b4\16\u00b4\u0c37\13\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b5\3\u00b5\7\u00b5\u0c42"+
		"\n\u00b5\f\u00b5\16\u00b5\u0c45\13\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\5\u00b6\u0c4c\n\u00b6\3\u00b7\3\u00b7\5\u00b7\u0c50\n\u00b7\3"+
		"\u00b7\3\u00b7\5\u00b7\u0c54\n\u00b7\3\u00b7\3\u00b7\3\u00b8\3\u00b8\5"+
		"\u00b8\u0c5a\n\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\7\u00b8\u0c60\n\u00b8"+
		"\f\u00b8\16\u00b8\u0c63\13\u00b8\5\u00b8\u0c65\n\u00b8\3\u00b8\5\u00b8"+
		"\u0c68\n\u00b8\3\u00b8\3\u00b8\5\u00b8\u0c6c\n\u00b8\3\u00b8\5\u00b8\u0c6f"+
		"\n\u00b8\3\u00b8\5\u00b8\u0c72\n\u00b8\3\u00b8\5\u00b8\u0c75\n\u00b8\3"+
		"\u00b9\3\u00b9\5\u00b9\u0c79\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0c85\n\u00bb\3"+
		"\u00bb\5\u00bb\u0c88\n\u00bb\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u0c8d\n\u00bc"+
		"\f\u00bc\16\u00bc\u0c90\13\u00bc\3\u00bd\3\u00bd\7\u00bd\u0c94\n\u00bd"+
		"\f\u00bd\16\u00bd\u0c97\13\u00bd\3\u00bd\3\u00bd\5\u00bd\u0c9b\n\u00bd"+
		"\3\u00be\3\u00be\7\u00be\u0c9f\n\u00be\f\u00be\16\u00be\u0ca2\13\u00be"+
		"\3\u00be\5\u00be\u0ca5\n\u00be\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0caa\n"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\7\u00bf\u0caf\n\u00bf\f\u00bf\16\u00bf"+
		"\u0cb2\13\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0cb7\n\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0cbe\n\u00bf\3\u00c0\5\u00c0"+
		"\u0cc1\n\u00c0\3\u00c0\5\u00c0\u0cc4\n\u00c0\3\u00c0\3\u00c0\5\u00c0\u0cc8"+
		"\n\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0ccd\n\u00c0\3\u00c0\3\u00c0"+
		"\7\u00c0\u0cd1\n\u00c0\f\u00c0\16\u00c0\u0cd4\13\u00c0\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\7\u00c2\u0cde\n\u00c2"+
		"\f\u00c2\16\u00c2\u0ce1\13\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\5\u00c3"+
		"\u0ce7\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u0cee\n"+
		"\u00c4\3\u00c4\3\u00c4\5\u00c4\u0cf2\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3"+
		"\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u0cfc\n\u00c5\3\u00c6\3"+
		"\u00c6\5\u00c6\u0d00\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u0d06"+
		"\n\u00c6\f\u00c6\16\u00c6\u0d09\13\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0d14\n\u00c7\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u0d1c\n\u00c8\f\u00c8"+
		"\16\u00c8\u0d1f\13\u00c8\3\u00c8\3\u00c8\5\u00c8\u0d23\n\u00c8\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\7\u00c9\u0d2b\n\u00c9\f\u00c9"+
		"\16\u00c9\u0d2e\13\u00c9\3\u00c9\3\u00c9\3\u00c9\7\u00c9\u0d33\n\u00c9"+
		"\f\u00c9\16\u00c9\u0d36\13\u00c9\5\u00c9\u0d38\n\u00c9\3\u00c9\3\u00c9"+
		"\3\u00ca\3\u00ca\5\u00ca\u0d3e\n\u00ca\3\u00cb\3\u00cb\3\u00cb\5\u00cb"+
		"\u0d43\n\u00cb\3\u00cb\5\u00cb\u0d46\n\u00cb\3\u00cc\3\u00cc\3\u00cc\5"+
		"\u00cc\u0d4b\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\7"+
		"\u00cc\u0d53\n\u00cc\f\u00cc\16\u00cc\u0d56\13\u00cc\3\u00cc\3\u00cc\5"+
		"\u00cc\u0d5a\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3"+
		"\u00cd\3\u00cd\3\u00cd\7\u00cd\u0d65\n\u00cd\f\u00cd\16\u00cd\u0d68\13"+
		"\u00cd\3\u00cd\3\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\7\u00ce"+
		"\u0d71\n\u00ce\f\u00ce\16\u00ce\u0d74\13\u00ce\3\u00ce\3\u00ce\5\u00ce"+
		"\u0d78\n\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\7\u00ce"+
		"\u0d80\n\u00ce\f\u00ce\16\u00ce\u0d83\13\u00ce\3\u00ce\3\u00ce\5\u00ce"+
		"\u0d87\n\u00ce\5\u00ce\u0d89\n\u00ce\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0d8e"+
		"\n\u00cf\3\u00cf\3\u00cf\5\u00cf\u0d92\n\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\5\u00cf\u0d98\n\u00cf\3\u00cf\3\u00cf\5\u00cf\u0d9c\n\u00cf\3"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\7\u00d1\u0da7\n\u00d1\f\u00d1\16\u00d1\u0daa\13\u00d1\3\u00d1\5\u00d1"+
		"\u0dad\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\7\u00d1"+
		"\u0db5\n\u00d1\f\u00d1\16\u00d1\u0db8\13\u00d1\5\u00d1\u0dba\n\u00d1\5"+
		"\u00d1\u0dbc\n\u00d1\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u0dc1\n\u00d2\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\7\u00d3\u0dc8\n\u00d3\f\u00d3\16\u00d3"+
		"\u0dcb\13\u00d3\3\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\7\u00d4\u0dd5\n\u00d4\f\u00d4\16\u00d4\u0dd8\13\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u0ddf\n\u00d5\3\u00d5\3\u00d5"+
		"\5\u00d5\u0de3\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d7\3\u00d7\7\u00d7"+
		"\u0dea\n\u00d7\f\u00d7\16\u00d7\u0ded\13\u00d7\3\u00d7\5\u00d7\u0df0\n"+
		"\u00d7\3\u00d7\7\u00d7\u0df3\n\u00d7\f\u00d7\16\u00d7\u0df6\13\u00d7\3"+
		"\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8"+
		"\u0e00\n\u00d8\5\u00d8\u0e02\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3"+
		"\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\7\u00da"+
		"\u0e10\n\u00da\f\u00da\16\u00da\u0e13\13\u00da\3\u00db\3\u00db\5\u00db"+
		"\u0e17\n\u00db\3\u00db\3\u00db\7\u00db\u0e1b\n\u00db\f\u00db\16\u00db"+
		"\u0e1e\13\u00db\3\u00db\3\u00db\3\u00dc\5\u00dc\u0e23\n\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\7\u00de\u0e33\n\u00de\f\u00de\16\u00de"+
		"\u0e36\13\u00de\3\u00de\3\u00de\3\u00df\3\u00df\5\u00df\u0e3c\n\u00df"+
		"\3\u00df\5\u00df\u0e3f\n\u00df\3\u00e0\5\u00e0\u0e42\n\u00e0\3\u00e0\3"+
		"\u00e0\3\u00e0\3\u00e0\7\u00e0\u0e48\n\u00e0\f\u00e0\16\u00e0\u0e4b\13"+
		"\u00e0\5\u00e0\u0e4d\n\u00e0\3\u00e0\3\u00e0\3\u00e1\3\u00e1\3\u00e1\3"+
		"\u00e1\5\u00e1\u0e55\n\u00e1\5\u00e1\u0e57\n\u00e1\3\u00e1\3\u00e1\5\u00e1"+
		"\u0e5b\n\u00e1\3\u00e1\5\u00e1\u0e5e\n\u00e1\3\u00e2\3\u00e2\3\u00e2\5"+
		"\u00e2\u0e63\n\u00e2\5\u00e2\u0e65\n\u00e2\3\u00e2\3\u00e2\5\u00e2\u0e69"+
		"\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e3\3\u00e3\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\5\u00e4\u0e75\n\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e6\3\u00e6\5\u00e6\u0e7e\n\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\7\u00e6\u0e84\n\u00e6\f\u00e6\16\u00e6\u0e87\13\u00e6\3\u00e7"+
		"\3\u00e7\5\u00e7\u0e8b\n\u00e7\3\u00e7\3\u00e7\5\u00e7\u0e8f\n\u00e7\3"+
		"\u00e8\3\u00e8\3\u00e8\5\u00e8\u0e94\n\u00e8\3\u00e8\5\u00e8\u0e97\n\u00e8"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\7\u00e9\u0e9d\n\u00e9\f\u00e9\16\u00e9"+
		"\u0ea0\13\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u0ea7"+
		"\n\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u0ead\n\u00eb\3\u00eb"+
		"\5\u00eb\u0eb0\n\u00eb\3\u00eb\5\u00eb\u0eb3\n\u00eb\3\u00ec\3\u00ec\3"+
		"\u00ec\3\u00ec\7\u00ec\u0eb9\n\u00ec\f\u00ec\16\u00ec\u0ebc\13\u00ec\3"+
		"\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u0ec5\n"+
		"\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\7\u00ed\u0ecf\n\u00ed\f\u00ed\16\u00ed\u0ed2\13\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\5\u00ed\u0ed8\n\u00ed\3\u00ee\3\u00ee\5\u00ee\u0edc\n"+
		"\u00ee\3\u00ee\3\u00ee\5\u00ee\u0ee0\n\u00ee\3\u00ee\5\u00ee\u0ee3\n\u00ee"+
		"\3\u00ee\5\u00ee\u0ee6\n\u00ee\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u0eeb\n"+
		"\u00ef\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0ef0\n\u00f0\3\u00f0\5\u00f0\u0ef3"+
		"\n\u00f0\3\u00f0\5\u00f0\u0ef6\n\u00f0\3\u00f1\3\u00f1\6\u00f1\u0efa\n"+
		"\u00f1\r\u00f1\16\u00f1\u0efb\3\u00f1\5\u00f1\u0eff\n\u00f1\3\u00f1\3"+
		"\u00f1\3\u00f2\3\u00f2\5\u00f2\u0f05\n\u00f2\3\u00f2\5\u00f2\u0f08\n\u00f2"+
		"\3\u00f3\5\u00f3\u0f0b\n\u00f3\3\u00f3\6\u00f3\u0f0e\n\u00f3\r\u00f3\16"+
		"\u00f3\u0f0f\3\u00f3\5\u00f3\u0f13\n\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\6\u00f4\u0f19\n\u00f4\r\u00f4\16\u00f4\u0f1a\3\u00f5\3\u00f5\6\u00f5"+
		"\u0f1f\n\u00f5\r\u00f5\16\u00f5\u0f20\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\7\u00f6\u0f29\n\u00f6\f\u00f6\16\u00f6\u0f2c\13\u00f6"+
		"\3\u00f6\3\u00f6\5\u00f6\u0f30\n\u00f6\3\u00f7\3\u00f7\3\u00f7\5\u00f7"+
		"\u0f35\n\u00f7\3\u00f7\3\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8"+
		"\u0f3d\n\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\5\u00f8\u0f47\n\u00f8\3\u00f8\3\u00f8\5\u00f8\u0f4b\n\u00f8\5"+
		"\u00f8\u0f4d\n\u00f8\3\u00f8\5\u00f8\u0f50\n\u00f8\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\7\u00f9\u0f5a\n\u00f9\f\u00f9"+
		"\16\u00f9\u0f5d\13\u00f9\3\u00f9\5\u00f9\u0f60\n\u00f9\3\u00f9\5\u00f9"+
		"\u0f63\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\7\u00fc\u0f75\n\u00fc\f\u00fc\16\u00fc\u0f78\13\u00fc\3\u00fc\3\u00fc"+
		"\5\u00fc\u0f7c\n\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u0f81\n\u00fc\3"+
		"\u00fc\3\u00fc\5\u00fc\u0f85\n\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3"+
		"\u00fd\5\u00fd\u0f8c\n\u00fd\3\u00fd\5\u00fd\u0f8f\n\u00fd\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\7\u00fe\u0f96\n\u00fe\f\u00fe\16\u00fe\u0f99"+
		"\13\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u0f9f\n\u00fe\3\u00ff"+
		"\3\u00ff\3\u00ff\5\u00ff\u0fa4\n\u00ff\3\u0100\3\u0100\5\u0100\u0fa8\n"+
		"\u0100\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u0fb0\n"+
		"\u0101\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u0fb6\n\u0101\3\u0102\3"+
		"\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u0fbe\n\u0102\3\u0102\5"+
		"\u0102\u0fc1\n\u0102\3\u0103\3\u0103\3\u0103\3\u0103\3\u0104\3\u0104\3"+
		"\u0104\5\u0104\u0fca\n\u0104\3\u0104\5\u0104\u0fcd\n\u0104\3\u0104\5\u0104"+
		"\u0fd0\n\u0104\3\u0105\3\u0105\3\u0105\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\5\u0106\u0fd9\n\u0106\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u0fdf\n"+
		"\u0107\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u0fe5\n\u0107\5\u0107\u0fe7"+
		"\n\u0107\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\5\u0108\u0ff4\n\u0108\5\u0108\u0ff6\n\u0108\3"+
		"\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u0fff\n"+
		"\u0109\5\u0109\u1001\n\u0109\3\u010a\3\u010a\5\u010a\u1005\n\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\5\u010a\u100b\n\u010a\3\u010a\3\u010a\5\u010a"+
		"\u100f\n\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010c\3\u010c"+
		"\3\u010d\3\u010d\3\u010d\7\u010d\u101b\n\u010d\f\u010d\16\u010d\u101e"+
		"\13\u010d\3\u010e\3\u010e\5\u010e\u1022\n\u010e\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u102d\n\u0110"+
		"\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\5\u0110\u1038\n\u0110\3\u0110\3\u0110\5\u0110\u103c\n\u0110\3\u0110\3"+
		"\u0110\3\u0110\7\u0110\u1041\n\u0110\f\u0110\16\u0110\u1044\13\u0110\3"+
		"\u0110\3\u0110\5\u0110\u1048\n\u0110\7\u0110\u104a\n\u0110\f\u0110\16"+
		"\u0110\u104d\13\u0110\3\u0110\3\u0110\5\u0110\u1051\n\u0110\3\u0110\3"+
		"\u0110\3\u0110\3\u0110\3\u0110\3\u0110\7\u0110\u1059\n\u0110\f\u0110\16"+
		"\u0110\u105c\13\u0110\3\u0111\3\u0111\3\u0111\5\u0111\u1061\n\u0111\3"+
		"\u0111\5\u0111\u1064\n\u0111\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3"+
		"\u0112\3\u0112\7\u0112\u106d\n\u0112\f\u0112\16\u0112\u1070\13\u0112\3"+
		"\u0113\3\u0113\5\u0113\u1074\n\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3"+
		"\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u107e\n\u0113\5\u0113\u1080\n\u0113"+
		"\5\u0113\u1082\n\u0113\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\5\u0114\u108c\n\u0114\3\u0114\3\u0114\5\u0114\u1090\n"+
		"\u0114\5\u0114\u1092\n\u0114\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3"+
		"\u0115\3\u0115\3\u0115\7\u0115\u109c\n\u0115\f\u0115\16\u0115\u109f\13"+
		"\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u10a6\n\u0115\3"+
		"\u0116\3\u0116\3\u0116\3\u0116\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\5\u0117\u10b3\n\u0117\3\u0117\5\u0117\u10b6\n\u0117\3"+
		"\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\7\u0117\u10c2\n\u0117\f\u0117\16\u0117\u10c5\13\u0117\3\u0118"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u10cc\n\u0118\3\u0118\3\u0118"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u10d4\n\u0118\3\u0118\3\u0118"+
		"\3\u0118\3\u0118\3\u0118\5\u0118\u10db\n\u0118\3\u0118\3\u0118\5\u0118"+
		"\u10df\n\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u10e6\n"+
		"\u0119\3\u011a\3\u011a\5\u011a\u10ea\n\u011a\3\u011a\3\u011a\3\u011a\5"+
		"\u011a\u10ef\n\u011a\7\u011a\u10f1\n\u011a\f\u011a\16\u011a\u10f4\13\u011a"+
		"\3\u011a\3\u011a\3\u011a\7\u011a\u10f9\n\u011a\f\u011a\16\u011a\u10fc"+
		"\13\u011a\3\u011a\5\u011a\u10ff\n\u011a\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\5\u011b\u1106\n\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u110b\n"+
		"\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\5\u011b"+
		"\u1114\n\u011b\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\7\u011c\u111b\n"+
		"\u011c\f\u011c\16\u011c\u111e\13\u011c\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\3\u011c\5\u011c\u1126\n\u011c\3\u011c\5\u011c\u1129\n\u011c\3"+
		"\u011c\3\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\5\u011d\u113d\n\u011d\3\u011e\3\u011e\5\u011e\u1141\n\u011e\3\u011f\5"+
		"\u011f\u1144\n\u011f\3\u011f\3\u011f\3\u011f\6\u011f\u1149\n\u011f\r\u011f"+
		"\16\u011f\u114a\3\u011f\5\u011f\u114e\n\u011f\3\u011f\3\u011f\5\u011f"+
		"\u1152\n\u011f\3\u011f\5\u011f\u1155\n\u011f\3\u0120\3\u0120\3\u0120\3"+
		"\u0120\3\u0120\5\u0120\u115c\n\u0120\3\u0121\5\u0121\u115f\n\u0121\3\u0121"+
		"\3\u0121\6\u0121\u1163\n\u0121\r\u0121\16\u0121\u1164\3\u0121\5\u0121"+
		"\u1168\n\u0121\3\u0121\3\u0121\5\u0121\u116c\n\u0121\3\u0121\5\u0121\u116f"+
		"\n\u0121\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u1176\n\u0122"+
		"\3\u0123\3\u0123\3\u0123\5\u0123\u117b\n\u0123\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\7\u0124\u1187"+
		"\n\u0124\f\u0124\16\u0124\u118a\13\u0124\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\5\u0124\u1190\n\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\5\u0125\u119b\n\u0125\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u11a4\n\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u11ad\n\u0126\3\u0126"+
		"\3\u0126\5\u0126\u11b1\n\u0126\3\u0126\3\u0126\5\u0126\u11b5\n\u0126\3"+
		"\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u11cf\n\u0126"+
		"\3\u0126\5\u0126\u11d2\n\u0126\3\u0126\5\u0126\u11d5\n\u0126\3\u0126\3"+
		"\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u11df\n"+
		"\u0126\3\u0126\3\u0126\5\u0126\u11e3\n\u0126\3\u0127\3\u0127\3\u0127\5"+
		"\u0127\u11e8\n\u0127\3\u0128\3\u0128\3\u0128\5\u0128\u11ed\n\u0128\3\u0129"+
		"\3\u0129\3\u0129\5\u0129\u11f2\n\u0129\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\5\u0129\u11fb\n\u0129\3\u0129\5\u0129\u11fe\n"+
		"\u0129\5\u0129\u1200\n\u0129\3\u0129\3\u0129\5\u0129\u1204\n\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u120b\n\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\5\u0129\u1212\n\u0129\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\5\u0129\u121a\n\u0129\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\5\u0129\u1229\n\u0129\3\u012a\3\u012a\3\u012a\5\u012a\u122e\n"+
		"\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1233\n\u012a\3\u012a\3\u012a\3"+
		"\u012a\3\u012a\5\u012a\u1239\n\u012a\3\u012a\5\u012a\u123c\n\u012a\3\u012a"+
		"\3\u012a\5\u012a\u1240\n\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\5\u012a\u124a\n\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1256"+
		"\n\u012a\5\u012a\u1258\n\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\5\u012a\u125f\n\u012a\3\u012a\3\u012a\5\u012a\u1263\n\u012a\3\u012a\3"+
		"\u012a\3\u012a\3\u012a\3\u012a\6\u012a\u126a\n\u012a\r\u012a\16\u012a"+
		"\u126b\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a"+
		"\u1275\n\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1283\n\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u128b\n\u012a\3\u012a"+
		"\5\u012a\u128e\n\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\5\u012a\u1297\n\u012a\3\u012a\3\u012a\7\u012a\u129b\n\u012a\f"+
		"\u012a\16\u012a\u129e\13\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\5\u012a\u12a7\n\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\5\u012a\u12af\n\u012a\3\u012a\5\u012a\u12b2\n\u012a\3"+
		"\u012a\5\u012a\u12b5\n\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3"+
		"\u012a\3\u012a\5\u012a\u12be\n\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u12c3"+
		"\n\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\7\u012a\u12ca\n\u012a"+
		"\f\u012a\16\u012a\u12cd\13\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u12d2"+
		"\n\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u12d7\n\u012a\3\u012a\5\u012a"+
		"\u12da\n\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u12df\n\u012a\3\u012a\3"+
		"\u012a\3\u012a\5\u012a\u12e4\n\u012a\7\u012a\u12e6\n\u012a\f\u012a\16"+
		"\u012a\u12e9\13\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u12ee\n\u012a\3"+
		"\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u12f4\n\u012a\3\u012a\3\u012a\3"+
		"\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u12fd\n\u012a\3\u012a\3"+
		"\u012a\3\u012a\5\u012a\u1302\n\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3"+
		"\u012a\3\u012a\5\u012a\u130a\n\u012a\3\u012a\3\u012a\5\u012a\u130e\n\u012a"+
		"\3\u012a\3\u012a\3\u012a\5\u012a\u1313\n\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\5\u012a\u1319\n\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\5\u012a\u1320\n\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1325\n\u012a\3"+
		"\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u132c\n\u012a\3\u012a\3"+
		"\u012a\5\u012a\u1330\n\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1335\n\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u133d\n\u012a"+
		"\3\u012a\5\u012a\u1340\n\u012a\3\u012a\5\u012a\u1343\n\u012a\3\u012a\5"+
		"\u012a\u1346\n\u012a\3\u012a\3\u012a\5\u012a\u134a\n\u012a\3\u012a\3\u012a"+
		"\3\u012a\5\u012a\u134f\n\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1354\n"+
		"\u012a\3\u012a\3\u012a\5\u012a\u1358\n\u012a\3\u012a\3\u012a\3\u012a\3"+
		"\u012a\3\u012a\5\u012a\u135f\n\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1364"+
		"\n\u012a\5\u012a\u1366\n\u012a\3\u012b\3\u012b\3\u012c\3\u012c\3\u012d"+
		"\3\u012d\3\u012e\3\u012e\3\u012e\5\u012e\u1371\n\u012e\3\u012e\3\u012e"+
		"\5\u012e\u1375\n\u012e\5\u012e\u1377\n\u012e\3\u012e\3\u012e\3\u012f\3"+
		"\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u1382\n\u012f\3"+
		"\u0130\3\u0130\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\5\u0131\u138d\n\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\7\u0132"+
		"\u1394\n\u0132\f\u0132\16\u0132\u1397\13\u0132\5\u0132\u1399\n\u0132\3"+
		"\u0133\3\u0133\5\u0133\u139d\n\u0133\3\u0133\5\u0133\u13a0\n\u0133\3\u0133"+
		"\3\u0133\5\u0133\u13a4\n\u0133\3\u0134\3\u0134\3\u0134\3\u0134\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u13b1\n\u0135"+
		"\3\u0136\3\u0136\3\u0136\5\u0136\u13b6\n\u0136\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\7\u0136\u13bc\n\u0136\f\u0136\16\u0136\u13bf\13\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\5\u0136\u13c5\n\u0136\3\u0136\3\u0136\5\u0136"+
		"\u13c9\n\u0136\3\u0137\3\u0137\3\u0137\5\u0137\u13ce\n\u0137\3\u0137\3"+
		"\u0137\5\u0137\u13d2\n\u0137\3\u0137\3\u0137\3\u0137\5\u0137\u13d7\n\u0137"+
		"\3\u0138\3\u0138\3\u0138\5\u0138\u13dc\n\u0138\3\u0138\5\u0138\u13df\n"+
		"\u0138\3\u0138\3\u0138\3\u0138\7\u0138\u13e4\n\u0138\f\u0138\16\u0138"+
		"\u13e7\13\u0138\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\5\u0139\u13f0\n\u0139\3\u0139\3\u0139\3\u0139\3\u0139\7\u0139\u13f6\n"+
		"\u0139\f\u0139\16\u0139\u13f9\13\u0139\3\u0139\5\u0139\u13fc\n\u0139\3"+
		"\u0139\3\u0139\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a"+
		"\u1406\n\u013a\3\u013a\5\u013a\u1409\n\u013a\5\u013a\u140b\n\u013a\3\u013b"+
		"\3\u013b\3\u013b\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1415"+
		"\n\u013c\5\u013c\u1417\n\u013c\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d"+
		"\u141d\n\u013d\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u1423\n\u013e\5"+
		"\u013e\u1425\n\u013e\3\u013f\3\u013f\3\u013f\3\u0140\3\u0140\3\u0140\3"+
		"\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\5\u0141\u1433\n\u0141\5"+
		"\u0141\u1435\n\u0141\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3"+
		"\u0142\3\u0142\5\u0142\u143f\n\u0142\3\u0143\3\u0143\3\u0143\3\u0143\3"+
		"\u0143\3\u0143\3\u0143\5\u0143\u1448\n\u0143\3\u0144\3\u0144\3\u0144\3"+
		"\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u1451\n\u0144\3\u0145\3\u0145\5"+
		"\u0145\u1455\n\u0145\3\u0145\3\u0145\5\u0145\u1459\n\u0145\3\u0145\3\u0145"+
		"\3\u0146\5\u0146\u145e\n\u0146\3\u0146\3\u0146\5\u0146\u1462\n\u0146\3"+
		"\u0146\5\u0146\u1465\n\u0146\3\u0147\3\u0147\5\u0147\u1469\n\u0147\3\u0148"+
		"\3\u0148\3\u0148\3\u0148\3\u0148\5\u0148\u1470\n\u0148\3\u0149\3\u0149"+
		"\5\u0149\u1474\n\u0149\3\u0149\3\u0149\3\u0149\3\u0149\7\u0149\u147a\n"+
		"\u0149\f\u0149\16\u0149\u147d\13\u0149\3\u014a\3\u014a\5\u014a\u1481\n"+
		"\u014a\3\u014b\3\u014b\3\u014c\3\u014c\3\u014d\3\u014d\3\u014e\3\u014e"+
		"\3\u014f\3\u014f\3\u0150\3\u0150\3\u0151\3\u0151\3\u0151\7\u0151\u1492"+
		"\n\u0151\f\u0151\16\u0151\u1495\13\u0151\3\u0151\3\u0151\5\u0151\u1499"+
		"\n\u0151\3\u0152\3\u0152\3\u0153\3\u0153\3\u0153\5\u0153\u14a0\n\u0153"+
		"\3\u0154\3\u0154\3\u0155\3\u0155\3\u0156\3\u0156\3\u0157\3\u0157\3\u0157"+
		"\7\u0157\u14ab\n\u0157\f\u0157\16\u0157\u14ae\13\u0157\3\u0158\3\u0158"+
		"\3\u0159\3\u0159\3\u0159\7\u0159\u14b5\n\u0159\f\u0159\16\u0159\u14b8"+
		"\13\u0159\3\u0159\3\u0159\5\u0159\u14bc\n\u0159\3\u015a\3\u015a\3\u015b"+
		"\3\u015b\3\u015b\7\u015b\u14c3\n\u015b\f\u015b\16\u015b\u14c6\13\u015b"+
		"\3\u015c\3\u015c\3\u015c\7\u015c\u14cb\n\u015c\f\u015c\16\u015c\u14ce"+
		"\13\u015c\3\u015d\3\u015d\3\u015d\7\u015d\u14d3\n\u015d\f\u015d\16\u015d"+
		"\u14d6\13\u015d\3\u015e\3\u015e\3\u015e\5\u015e\u14db\n\u015e\3\u015f"+
		"\3\u015f\3\u015f\5\u015f\u14e0\n\u015f\3\u0160\3\u0160\3\u0160\5\u0160"+
		"\u14e5\n\u0160\3\u0161\3\u0161\5\u0161\u14e9\n\u0161\3\u0161\3\u0161\3"+
		"\u0161\5\u0161\u14ee\n\u0161\3\u0161\5\u0161\u14f1\n\u0161\3\u0162\3\u0162"+
		"\3\u0163\3\u0163\5\u0163\u14f7\n\u0163\3\u0164\3\u0164\5\u0164\u14fb\n"+
		"\u0164\3\u0165\3\u0165\3\u0165\5\u0165\u1500\n\u0165\3\u0166\3\u0166\3"+
		"\u0167\3\u0167\3\u0167\7\u0167\u1507\n\u0167\f\u0167\16\u0167\u150a\13"+
		"\u0167\3\u0168\3\u0168\3\u0168\5\u0168\u150f\n\u0168\3\u0168\3\u0168\3"+
		"\u0168\5\u0168\u1514\n\u0168\3\u0169\3\u0169\3\u0169\7\u0169\u1519\n\u0169"+
		"\f\u0169\16\u0169\u151c\13\u0169\3\u016a\3\u016a\3\u016b\3\u016b\3\u016c"+
		"\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\5\u016c\u1529\n\u016c"+
		"\3\u016d\3\u016d\5\u016d\u152d\n\u016d\3\u016d\3\u016d\7\u016d\u1531\n"+
		"\u016d\f\u016d\16\u016d\u1534\13\u016d\3\u016d\3\u016d\5\u016d\u1538\n"+
		"\u016d\3\u016e\3\u016e\3\u016e\5\u016e\u153d\n\u016e\5\u016e\u153f\n\u016e"+
		"\3\u016e\3\u016e\3\u016e\5\u016e\u1544\n\u016e\7\u016e\u1546\n\u016e\f"+
		"\u016e\16\u016e\u1549\13\u016e\3\u016e\3\u016e\5\u016e\u154d\n\u016e\3"+
		"\u016f\3\u016f\3\u016f\3\u016f\3\u016f\5\u016f\u1554\n\u016f\3\u016f\3"+
		"\u016f\3\u016f\5\u016f\u1559\n\u016f\5\u016f\u155b\n\u016f\5\u016f\u155d"+
		"\n\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f"+
		"\5\u016f\u1567\n\u016f\3\u016f\3\u016f\3\u016f\5\u016f\u156c\n\u016f\7"+
		"\u016f\u156e\n\u016f\f\u016f\16\u016f\u1571\13\u016f\5\u016f\u1573\n\u016f"+
		"\3\u016f\3\u016f\5\u016f\u1577\n\u016f\3\u0170\3\u0170\3\u0170\3\u0171"+
		"\3\u0171\3\u0171\3\u0171\5\u0171\u1580\n\u0171\3\u0171\3\u0171\3\u0172"+
		"\3\u0172\5\u0172\u1586\n\u0172\3\u0172\3\u0172\5\u0172\u158a\n\u0172\5"+
		"\u0172\u158c\n\u0172\3\u0173\3\u0173\5\u0173\u1590\n\u0173\3\u0173\3\u0173"+
		"\5\u0173\u1594\n\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\5\u0173"+
		"\u159b\n\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\5\u0173"+
		"\u15a3\n\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\5\u0173"+
		"\u15ab\n\u0173\5\u0173\u15ad\n\u0173\3\u0174\3\u0174\3\u0174\3\u0174\5"+
		"\u0174\u15b3\n\u0174\3\u0174\5\u0174\u15b6\n\u0174\3\u0174\3\u0174\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\5\u0175\u15ce\n\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\5\u0175\u15d5\n\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175\u15f6"+
		"\n\u0175\3\u0176\3\u0176\3\u0176\5\u0176\u15fb\n\u0176\3\u0176\5\u0176"+
		"\u15fe\n\u0176\3\u0176\3\u0176\3\u0176\5\u0176\u1603\n\u0176\5\u0176\u1605"+
		"\n\u0176\3\u0176\3\u0176\7\u0176\u1609\n\u0176\f\u0176\16\u0176\u160c"+
		"\13\u0176\3\u0177\3\u0177\3\u0177\7\u0177\u1611\n\u0177\f\u0177\16\u0177"+
		"\u1614\13\u0177\3\u0178\3\u0178\5\u0178\u1618\n\u0178\3\u0178\3\u0178"+
		"\3\u0178\7\u0178\u161d\n\u0178\f\u0178\16\u0178\u1620\13\u0178\3\u0178"+
		"\3\u0178\5\u0178\u1624\n\u0178\3\u0178\5\u0178\u1627\n\u0178\3\u0179\3"+
		"\u0179\5\u0179\u162b\n\u0179\3\u0179\3\u0179\3\u0179\7\u0179\u1630\n\u0179"+
		"\f\u0179\16\u0179\u1633\13\u0179\3\u017a\3\u017a\3\u017a\5\u017a\u1638"+
		"\n\u017a\3\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u163e\n\u017a\3\u017a"+
		"\3\u017a\3\u017a\3\u017a\5\u017a\u1644\n\u017a\3\u017a\3\u017a\3\u017a"+
		"\3\u017a\5\u017a\u164a\n\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u164f\n"+
		"\u017a\5\u017a\u1651\n\u017a\3\u017a\5\u017a\u1654\n\u017a\3\u017a\3\u017a"+
		"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u165e\n\u017a"+
		"\3\u017a\5\u017a\u1661\n\u017a\5\u017a\u1663\n\u017a\5\u017a\u1665\n\u017a"+
		"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a"+
		"\3\u017a\3\u017a\3\u017a\5\u017a\u1673\n\u017a\3\u017b\3\u017b\3\u017c"+
		"\3\u017c\3\u017c\3\u017d\3\u017d\3\u017e\3\u017e\5\u017e\u167e\n\u017e"+
		"\3\u017e\3\u017e\3\u017f\3\u017f\5\u017f\u1684\n\u017f\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0181\3\u0181\3\u0182\3\u0182\3\u0183\3\u0183\3\u0183"+
		"\2\5\u021e\u0222\u022c\u0184\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \""+
		"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084"+
		"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c"+
		"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4"+
		"\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc"+
		"\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4"+
		"\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc"+
		"\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114"+
		"\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c"+
		"\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144"+
		"\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c"+
		"\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174"+
		"\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c"+
		"\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4"+
		"\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc"+
		"\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4"+
		"\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec"+
		"\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204"+
		"\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c"+
		"\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234"+
		"\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c"+
		"\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264"+
		"\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c"+
		"\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294"+
		"\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac"+
		"\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4"+
		"\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc"+
		"\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4"+
		"\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\2_\4\2\17\17\u00ce\u00ce"+
		"\4\2\6\6\u0140\u0140\5\2\u00ae\u00ae\u00e1\u00e1\u0152\u0152\4\2::\u0128"+
		"\u0128\5\2$$\u0130\u0130\u0191\u0191\4\2tt\u0080\u0080\4\2\4\4\33\33\5"+
		"\2oo\u00c5\u00c5\u01c3\u01c3\5\2\u0106\u0106\u0120\u0120\u0133\u0133\4"+
		"\2\u00a0\u00a0\u01c8\u01c8\4\2$$\u0191\u0191\4\2\3\3yy\5\2\3\3yy\u00fa"+
		"\u00fa\5\2\\\\\u0127\u0127\u0192\u0192\4\2\u00ed\u00ed\u0128\u0128\4\2"+
		"\u00f1\u00f1\u0199\u0199\5\2\u0098\u0098\u00c6\u00c6\u012f\u012f\4\2o"+
		"o\u014b\u014b\4\2mm\u00b5\u00b5\4\2\u01bf\u01bf\u021b\u021b\5\2kk\u00d3"+
		"\u00d3\u0157\u0157\5\2kk\u00d3\u00d3\u0111\u0111\5\2\u0097\u0097\u00e5"+
		"\u00e5\u010e\u010e\4\2\r\r\u0150\u0150\4\2\u00b1\u00b1\u00eb\u00eb\4\2"+
		"ZZnn\6\2\u00bf\u00bf\u00c4\u00c4\u010b\u010b\u012d\u012d\4\2kk\u022a\u022a"+
		"\3\3\u0233\u0233\3\2\u0233\u0233\3\2\u0164\u0165\4\2\u0122\u0122\u01dc"+
		"\u01dc\3\2JK\4\2\u0116\u0116\u01d2\u01d2\4\2\32\32\u00b5\u00b5\4\2\'\'"+
		"pp\5\2\b\bvv\u01be\u01be\4\2WW\u00ff\u00ff\5\2\u00a6\u00a6\u00d9\u00d9"+
		"\u0169\u0169\4\2\u0175\u0175\u01aa\u01aa\5\2\u0175\u0175\u018f\u018f\u01aa"+
		"\u01aa\4\2\u008c\u008c\u00b6\u00b6\4\2XX\u016b\u016b\4\2\u00b4\u00b4\u00d3"+
		"\u00d3\4\2\b\b\u01c2\u01c2\4\2\27\27\u017d\u017d\4\2\20\20qq\4\2\u0099"+
		"\u0099\u00d6\u00d6\4\2\b\b\u0099\u0099\4\2\u01a5\u01a5\u01a8\u01a8\4\2"+
		"\u00f1\u00f1\u019d\u019d\3\2\u00dc\u00df\3\2\u0230\u0231\4\2\u0224\u0224"+
		"\u0228\u0228\3\2\u0225\u0226\4\2jj\u00b8\u00b8\6\2\b\b\f\f\u008f\u008f"+
		"\u0190\u0190\5\2&&\u00d8\u00d8\u01b3\u01b3\4\2\b\bvv\4\2\61\61\u01df\u01df"+
		"\4\2vv\u01be\u01be\3\2\u013a\u013d\4\2..BB\4\2\u009a\u009a\u00d7\u00d7"+
		"\4\2\64\64\u0102\u0102\4\2\u01e0\u01e0\u01e3\u01e3\4\2\u0084\u0084\u010d"+
		"\u010d\4\2\u0088\u0088\u00fd\u00fd\4\2MMww\4\2\u00b0\u00b0\u0186\u0186"+
		"\7\2\u01fd\u01ff\u0201\u0206\u0208\u0209\u020b\u020b\u020f\u0212\3\2\u01f6"+
		"\u01fc\3\2\u01f0\u01f5\4\2\u0152\u0152\u016e\u016e\4\2\u009d\u009d\u0148"+
		"\u0148\4\2\u0114\u0114\u0173\u0173\3\2\u0085\u0086\4\2\u012b\u012b\u0193"+
		"\u0193\5\2\u0094\u0094\u01a1\u01a1\u01d3\u01d3\4\2@@\u016a\u016a\5\2@"+
		"@\u0111\u0111\u016a\u016a\4\2\u0134\u0134\u019e\u019e\4\2\u00b4\u00b4"+
		"\u0160\u0160\3\2\u013e\u013f\4\2aa\u01ec\u01ec\4\2\u00fb\u00fb\u0177\u0177"+
		"\4\2++\63\63\b\2aa\u00b2\u00b2\u00f5\u00f5\u00fb\u00fb\u0177\u0177\u01ec"+
		"\u01ec\3\2\u021b\u021c\4\2\u0216\u0216\u021d\u021dX\2\3\7\n\n\16\16\21"+
		"\30\32\33\36&))++-/\61\64\66:<<>DITWXZ_agijloruwxz|\177\u0081\u0084\u008c"+
		"\u008e\u008e\u0090\u0094\u0098\u009a\u009c\u00a0\u00a6\u00a7\u00ac\u00ac"+
		"\u00ae\u00ae\u00b0\u00b0\u00b2\u00b2\u00b4\u00ba\u00bc\u00be\u00c2\u00c4"+
		"\u00c6\u00c8\u00ca\u00cb\u00cd\u00cd\u00cf\u00de\u00e0\u00e0\u00e2\u00e3"+
		"\u00e6\u00ea\u00ec\u00f2\u00f5\u00f8\u00fa\u0106\u0108\u0108\u010b\u010d"+
		"\u0111\u0112\u0114\u0114\u0118\u011d\u011f\u0120\u0122\u0122\u0124\u0124"+
		"\u0127\u0127\u0129\u0129\u012b\u0136\u0140\u0140\u0143\u014a\u0151\u0156"+
		"\u0158\u0158\u015a\u0167\u0169\u0175\u0177\u0179\u017b\u017b\u017d\u0184"+
		"\u0186\u018b\u018d\u0194\u0196\u019a\u019c\u01a2\u01a6\u01a6\u01a9\u01b1"+
		"\u01b3\u01b7\u01b9\u01bc\u01bf\u01bf\u01c1\u01c2\u01c4\u01c6\u01c8\u01c8"+
		"\u01ca\u01d5\u01d8\u01d9\u01db\u01ff\u0201\u0206\u0208\u0209\u020b\u020c"+
		"\u020e\u0212\u023e\u023e\5\2\66\66\u0200\u0200\u020c\u020e\7\2TT\u01fd"+
		"\u01fd\u0207\u0207\u020a\u020a\u020f\u020f\2\u194b\2\u030f\3\2\2\2\4\u0332"+
		"\3\2\2\2\6\u0334\3\2\2\2\b\u0339\3\2\2\2\n\u034c\3\2\2\2\f\u0383\3\2\2"+
		"\2\16\u0387\3\2\2\2\20\u039f\3\2\2\2\22\u03a3\3\2\2\2\24\u03af\3\2\2\2"+
		"\26\u03bd\3\2\2\2\30\u03ca\3\2\2\2\32\u03e0\3\2\2\2\34\u03fc\3\2\2\2\36"+
		"\u0422\3\2\2\2 \u0424\3\2\2\2\"\u0435\3\2\2\2$\u0457\3\2\2\2&\u0459\3"+
		"\2\2\2(\u045e\3\2\2\2*\u0471\3\2\2\2,\u04a3\3\2\2\2.\u04c3\3\2\2\2\60"+
		"\u04eb\3\2\2\2\62\u04f0\3\2\2\2\64\u0509\3\2\2\2\66\u0521\3\2\2\28\u052a"+
		"\3\2\2\2:\u0533\3\2\2\2<\u053c\3\2\2\2>\u0540\3\2\2\2@\u0545\3\2\2\2B"+
		"\u055d\3\2\2\2D\u055f\3\2\2\2F\u0563\3\2\2\2H\u0597\3\2\2\2J\u05b3\3\2"+
		"\2\2L\u05b5\3\2\2\2N\u05c3\3\2\2\2P\u05cf\3\2\2\2R\u05d4\3\2\2\2T\u05da"+
		"\3\2\2\2V\u05dd\3\2\2\2X\u05e8\3\2\2\2Z\u05f7\3\2\2\2\\\u0608\3\2\2\2"+
		"^\u0619\3\2\2\2`\u0621\3\2\2\2b\u0626\3\2\2\2d\u0636\3\2\2\2f\u063a\3"+
		"\2\2\2h\u0652\3\2\2\2j\u0655\3\2\2\2l\u065b\3\2\2\2n\u0667\3\2\2\2p\u0670"+
		"\3\2\2\2r\u068c\3\2\2\2t\u0692\3\2\2\2v\u0695\3\2\2\2x\u069c\3\2\2\2z"+
		"\u06a4\3\2\2\2|\u06b0\3\2\2\2~\u06b2\3\2\2\2\u0080\u06b6\3\2\2\2\u0082"+
		"\u06bc\3\2\2\2\u0084\u06d8\3\2\2\2\u0086\u06fa\3\2\2\2\u0088\u072a\3\2"+
		"\2\2\u008a\u0734\3\2\2\2\u008c\u0736\3\2\2\2\u008e\u073b\3\2\2\2\u0090"+
		"\u0749\3\2\2\2\u0092\u074b\3\2\2\2\u0094\u0750\3\2\2\2\u0096\u0760\3\2"+
		"\2\2\u0098\u0781\3\2\2\2\u009a\u07a4\3\2\2\2\u009c\u07a8\3\2\2\2\u009e"+
		"\u07b7\3\2\2\2\u00a0\u07b9\3\2\2\2\u00a2\u07bc\3\2\2\2\u00a4\u07c1\3\2"+
		"\2\2\u00a6\u07cb\3\2\2\2\u00a8\u07e7\3\2\2\2\u00aa\u07e9\3\2\2\2\u00ac"+
		"\u07ed\3\2\2\2\u00ae\u0805\3\2\2\2\u00b0\u080d\3\2\2\2\u00b2\u0812\3\2"+
		"\2\2\u00b4\u0874\3\2\2\2\u00b6\u0877\3\2\2\2\u00b8\u087c\3\2\2\2\u00ba"+
		"\u08af\3\2\2\2\u00bc\u08b1\3\2\2\2\u00be\u08b8\3\2\2\2\u00c0\u08c1\3\2"+
		"\2\2\u00c2\u08cc\3\2\2\2\u00c4\u08d3\3\2\2\2\u00c6\u08d7\3\2\2\2\u00c8"+
		"\u08db\3\2\2\2\u00ca\u08df\3\2\2\2\u00cc\u08ef\3\2\2\2\u00ce\u08fc\3\2"+
		"\2\2\u00d0\u0903\3\2\2\2\u00d2\u090f\3\2\2\2\u00d4\u091c\3\2\2\2\u00d6"+
		"\u0921\3\2\2\2\u00d8\u0924\3\2\2\2\u00da\u0928\3\2\2\2\u00dc\u092d\3\2"+
		"\2\2\u00de\u0931\3\2\2\2\u00e0\u0942\3\2\2\2\u00e2\u0948\3\2\2\2\u00e4"+
		"\u0952\3\2\2\2\u00e6\u095f\3\2\2\2\u00e8\u096c\3\2\2\2\u00ea\u096e\3\2"+
		"\2\2\u00ec\u097c\3\2\2\2\u00ee\u098d\3\2\2\2\u00f0\u09a6\3\2\2\2\u00f2"+
		"\u09b0\3\2\2\2\u00f4\u09b4\3\2\2\2\u00f6\u09d7\3\2\2\2\u00f8\u09e3\3\2"+
		"\2\2\u00fa\u09ee\3\2\2\2\u00fc\u09f4\3\2\2\2\u00fe\u09ff\3\2\2\2\u0100"+
		"\u0a0b\3\2\2\2\u0102\u0a13\3\2\2\2\u0104\u0a22\3\2\2\2\u0106\u0a26\3\2"+
		"\2\2\u0108\u0a47\3\2\2\2\u010a\u0a4a\3\2\2\2\u010c\u0a50\3\2\2\2\u010e"+
		"\u0a55\3\2\2\2\u0110\u0a5d\3\2\2\2\u0112\u0a65\3\2\2\2\u0114\u0a68\3\2"+
		"\2\2\u0116\u0a78\3\2\2\2\u0118\u0a7d\3\2\2\2\u011a\u0a81\3\2\2\2\u011c"+
		"\u0aa9\3\2\2\2\u011e\u0aab\3\2\2\2\u0120\u0ac1\3\2\2\2\u0122\u0ac3\3\2"+
		"\2\2\u0124\u0ac8\3\2\2\2\u0126\u0aca\3\2\2\2\u0128\u0acc\3\2\2\2\u012a"+
		"\u0ace\3\2\2\2\u012c\u0ad2\3\2\2\2\u012e\u0ad7\3\2\2\2\u0130\u0add\3\2"+
		"\2\2\u0132\u0ae3\3\2\2\2\u0134\u0af1\3\2\2\2\u0136\u0b05\3\2\2\2\u0138"+
		"\u0b0a\3\2\2\2\u013a\u0b17\3\2\2\2\u013c\u0b19\3\2\2\2\u013e\u0b27\3\2"+
		"\2\2\u0140\u0b31\3\2\2\2\u0142\u0b37\3\2\2\2\u0144\u0b39\3\2\2\2\u0146"+
		"\u0b3c\3\2\2\2\u0148\u0b45\3\2\2\2\u014a\u0b5d\3\2\2\2\u014c\u0b6c\3\2"+
		"\2\2\u014e\u0b6e\3\2\2\2\u0150\u0b83\3\2\2\2\u0152\u0b92\3\2\2\2\u0154"+
		"\u0ba8\3\2\2\2\u0156\u0baf\3\2\2\2\u0158\u0bbc\3\2\2\2\u015a\u0bbf\3\2"+
		"\2\2\u015c\u0bc1\3\2\2\2\u015e\u0bd6\3\2\2\2\u0160\u0be0\3\2\2\2\u0162"+
		"\u0be9\3\2\2\2\u0164\u0c04\3\2\2\2\u0166\u0c2f\3\2\2\2\u0168\u0c3f\3\2"+
		"\2\2\u016a\u0c4b\3\2\2\2\u016c\u0c53\3\2\2\2\u016e\u0c57\3\2\2\2\u0170"+
		"\u0c76\3\2\2\2\u0172\u0c7a\3\2\2\2\u0174\u0c87\3\2\2\2\u0176\u0c89\3\2"+
		"\2\2\u0178\u0c91\3\2\2\2\u017a\u0c9c\3\2\2\2\u017c\u0cbd\3\2\2\2\u017e"+
		"\u0cc0\3\2\2\2\u0180\u0cd5\3\2\2\2\u0182\u0cd8\3\2\2\2\u0184\u0ce4\3\2"+
		"\2\2\u0186\u0ce8\3\2\2\2\u0188\u0cfb\3\2\2\2\u018a\u0cfd\3\2\2\2\u018c"+
		"\u0d0e\3\2\2\2\u018e\u0d15\3\2\2\2\u0190\u0d24\3\2\2\2\u0192\u0d3b\3\2"+
		"\2\2\u0194\u0d45\3\2\2\2\u0196\u0d47\3\2\2\2\u0198\u0d5f\3\2\2\2\u019a"+
		"\u0d77\3\2\2\2\u019c\u0d9b\3\2\2\2\u019e\u0d9d\3\2\2\2\u01a0\u0dbb\3\2"+
		"\2\2\u01a2\u0dc0\3\2\2\2\u01a4\u0dc2\3\2\2\2\u01a6\u0dce\3\2\2\2\u01a8"+
		"\u0de2\3\2\2\2\u01aa\u0de4\3\2\2\2\u01ac\u0de7\3\2\2\2\u01ae\u0e01\3\2"+
		"\2\2\u01b0\u0e03\3\2\2\2\u01b2\u0e07\3\2\2\2\u01b4\u0e16\3\2\2\2\u01b6"+
		"\u0e22\3\2\2\2\u01b8\u0e2a\3\2\2\2\u01ba\u0e2e\3\2\2\2\u01bc\u0e3b\3\2"+
		"\2\2\u01be\u0e41\3\2\2\2\u01c0\u0e50\3\2\2\2\u01c2\u0e64\3\2\2\2\u01c4"+
		"\u0e6d\3\2\2\2\u01c6\u0e6f\3\2\2\2\u01c8\u0e76\3\2\2\2\u01ca\u0e7b\3\2"+
		"\2\2\u01cc\u0e88\3\2\2\2\u01ce\u0e90\3\2\2\2\u01d0\u0e98\3\2\2\2\u01d2"+
		"\u0ea6\3\2\2\2\u01d4\u0ea8\3\2\2\2\u01d6\u0eb4\3\2\2\2\u01d8\u0ed7\3\2"+
		"\2\2\u01da\u0ed9\3\2\2\2\u01dc\u0ee7\3\2\2\2\u01de\u0eec\3\2\2\2\u01e0"+
		"\u0efe\3\2\2\2\u01e2\u0f02\3\2\2\2\u01e4\u0f0a\3\2\2\2\u01e6\u0f14\3\2"+
		"\2\2\u01e8\u0f1c\3\2\2\2\u01ea\u0f22\3\2\2\2\u01ec\u0f31\3\2\2\2\u01ee"+
		"\u0f38\3\2\2\2\u01f0\u0f51\3\2\2\2\u01f2\u0f64\3\2\2\2\u01f4\u0f68\3\2"+
		"\2\2\u01f6\u0f6b\3\2\2\2\u01f8\u0f8b\3\2\2\2\u01fa\u0f90\3\2\2\2\u01fc"+
		"\u0fa3\3\2\2\2\u01fe\u0fa5\3\2\2\2\u0200\u0fb5\3\2\2\2\u0202\u0fbd\3\2"+
		"\2\2\u0204\u0fc2\3\2\2\2\u0206\u0fc6\3\2\2\2\u0208\u0fd1\3\2\2\2\u020a"+
		"\u0fd4\3\2\2\2\u020c\u0fe6\3\2\2\2\u020e\u0fe8\3\2\2\2\u0210\u0ff7\3\2"+
		"\2\2\u0212\u1002\3\2\2\2\u0214\u1010\3\2\2\2\u0216\u1015\3\2\2\2\u0218"+
		"\u1017\3\2\2\2\u021a\u1021\3\2\2\2\u021c\u1023\3\2\2\2\u021e\u1050\3\2"+
		"\2\2\u0220\u105d\3\2\2\2\u0222\u1065\3\2\2\2\u0224\u1071\3\2\2\2\u0226"+
		"\u1091\3\2\2\2\u0228\u10a5\3\2\2\2\u022a\u10a7\3\2\2\2\u022c\u10ab\3\2"+
		"\2\2\u022e\u10de\3\2\2\2\u0230\u10e0\3\2\2\2\u0232\u10fe\3\2\2\2\u0234"+
		"\u1100\3\2\2\2\u0236\u1115\3\2\2\2\u0238\u113c\3\2\2\2\u023a\u1140\3\2"+
		"\2\2\u023c\u1143\3\2\2\2\u023e\u1156\3\2\2\2\u0240\u115e\3\2\2\2\u0242"+
		"\u1170\3\2\2\2\u0244\u1177\3\2\2\2\u0246\u118f\3\2\2\2\u0248\u1191\3\2"+
		"\2\2\u024a\u11e2\3\2\2\2\u024c\u11e7\3\2\2\2\u024e\u11e9\3\2\2\2\u0250"+
		"\u1228\3\2\2\2\u0252\u1365\3\2\2\2\u0254\u1367\3\2\2\2\u0256\u1369\3\2"+
		"\2\2\u0258\u136b\3\2\2\2\u025a\u136d\3\2\2\2\u025c\u137a\3\2\2\2\u025e"+
		"\u1383\3\2\2\2\u0260\u138c\3\2\2\2\u0262\u138e\3\2\2\2\u0264\u139f\3\2"+
		"\2\2\u0266\u13a5\3\2\2\2\u0268\u13b0\3\2\2\2\u026a\u13b2\3\2\2\2\u026c"+
		"\u13ca\3\2\2\2\u026e\u13d8\3\2\2\2\u0270\u13ea\3\2\2\2\u0272\u13ff\3\2"+
		"\2\2\u0274\u140c\3\2\2\2\u0276\u140f\3\2\2\2\u0278\u1418\3\2\2\2\u027a"+
		"\u141e\3\2\2\2\u027c\u1426\3\2\2\2\u027e\u1429\3\2\2\2\u0280\u1434\3\2"+
		"\2\2\u0282\u143e\3\2\2\2\u0284\u1440\3\2\2\2\u0286\u1449\3\2\2\2\u0288"+
		"\u1452\3\2\2\2\u028a\u1464\3\2\2\2\u028c\u1468\3\2\2\2\u028e\u146a\3\2"+
		"\2\2\u0290\u1473\3\2\2\2\u0292\u1480\3\2\2\2\u0294\u1482\3\2\2\2\u0296"+
		"\u1484\3\2\2\2\u0298\u1486\3\2\2\2\u029a\u1488\3\2\2\2\u029c\u148a\3\2"+
		"\2\2\u029e\u148c\3\2\2\2\u02a0\u148e\3\2\2\2\u02a2\u149a\3\2\2\2\u02a4"+
		"\u149c\3\2\2\2\u02a6\u14a1\3\2\2\2\u02a8\u14a3\3\2\2\2\u02aa\u14a5\3\2"+
		"\2\2\u02ac\u14a7\3\2\2\2\u02ae\u14af\3\2\2\2\u02b0\u14b1\3\2\2\2\u02b2"+
		"\u14bd\3\2\2\2\u02b4\u14bf\3\2\2\2\u02b6\u14c7\3\2\2\2\u02b8\u14cf\3\2"+
		"\2\2\u02ba\u14d7\3\2\2\2\u02bc\u14dc\3\2\2\2\u02be\u14e1\3\2\2\2\u02c0"+
		"\u14f0\3\2\2\2\u02c2\u14f2\3\2\2\2\u02c4\u14f6\3\2\2\2\u02c6\u14fa\3\2"+
		"\2\2\u02c8\u14fc\3\2\2\2\u02ca\u1501\3\2\2\2\u02cc\u1503\3\2\2\2\u02ce"+
		"\u150b\3\2\2\2\u02d0\u1515\3\2\2\2\u02d2\u151d\3\2\2\2\u02d4\u151f\3\2"+
		"\2\2\u02d6\u1521\3\2\2\2\u02d8\u152a\3\2\2\2\u02da\u1539\3\2\2\2\u02dc"+
		"\u154e\3\2\2\2\u02de\u1578\3\2\2\2\u02e0\u157f\3\2\2\2\u02e2\u158b\3\2"+
		"\2\2\u02e4\u15ac\3\2\2\2\u02e6\u15ae\3\2\2\2\u02e8\u15f5\3\2\2\2\u02ea"+
		"\u15fa\3\2\2\2\u02ec\u160d\3\2\2\2\u02ee\u1617\3\2\2\2\u02f0\u162a\3\2"+
		"\2\2\u02f2\u1672\3\2\2\2\u02f4\u1674\3\2\2\2\u02f6\u1676\3\2\2\2\u02f8"+
		"\u1679\3\2\2\2\u02fa\u167d\3\2\2\2\u02fc\u1683\3\2\2\2\u02fe\u1685\3\2"+
		"\2\2\u0300\u1689\3\2\2\2\u0302\u168b\3\2\2\2\u0304\u168d\3\2\2\2\u0306"+
		"\u0309\5\4\3\2\u0307\u0309\5\u0282\u0142\2\u0308\u0306\3\2\2\2\u0308\u0307"+
		"\3\2\2\2\u0309\u030b\3\2\2\2\u030a\u030c\7\u0233\2\2\u030b\u030a\3\2\2"+
		"\2\u030b\u030c\3\2\2\2\u030c\u030e\3\2\2\2\u030d\u0308\3\2\2\2\u030e\u0311"+
		"\3\2\2\2\u030f\u030d\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0312\3\2\2\2\u0311"+
		"\u030f\3\2\2\2\u0312\u0313\7\2\2\3\u0313\3\3\2\2\2\u0314\u0333\5\b\5\2"+
		"\u0315\u0333\5\30\r\2\u0316\u0333\5(\25\2\u0317\u0333\5\u00a4S\2\u0318"+
		"\u0333\5\62\32\2\u0319\u0333\5X-\2\u031a\u0333\5\u00be`\2\u031b\u0333"+
		"\5\u00aeX\2\u031c\u0333\5\n\6\2\u031d\u0333\5.\30\2\u031e\u0333\5\32\16"+
		"\2\u031f\u0333\5\34\17\2\u0320\u0333\5\u00acW\2\u0321\u0333\5\u00b2Z\2"+
		"\u0322\u0333\5\u00a6T\2\u0323\u0333\5\64\33\2\u0324\u0333\5l\67\2\u0325"+
		"\u0333\5\u00ba^\2\u0326\u0333\5\6\4\2\u0327\u0333\5\26\f\2\u0328\u0333"+
		"\5&\24\2\u0329\u0333\5\u00a2R\2\u032a\u0333\5\60\31\2\u032b\u0333\5V,"+
		"\2\u032c\u0333\5\u0140\u00a1\2\u032d\u0333\5\u00b6\\\2\u032e\u0333\5\u00b0"+
		"Y\2\u032f\u0333\5\u00b8]\2\u0330\u0333\5\u00bc_\2\u0331\u0333\5\u00d4"+
		"k\2\u0332\u0314\3\2\2\2\u0332\u0315\3\2\2\2\u0332\u0316\3\2\2\2\u0332"+
		"\u0317\3\2\2\2\u0332\u0318\3\2\2\2\u0332\u0319\3\2\2\2\u0332\u031a\3\2"+
		"\2\2\u0332\u031b\3\2\2\2\u0332\u031c\3\2\2\2\u0332\u031d\3\2\2\2\u0332"+
		"\u031e\3\2\2\2\u0332\u031f\3\2\2\2\u0332\u0320\3\2\2\2\u0332\u0321\3\2"+
		"\2\2\u0332\u0322\3\2\2\2\u0332\u0323\3\2\2\2\u0332\u0324\3\2\2\2\u0332"+
		"\u0325\3\2\2\2\u0332\u0326\3\2\2\2\u0332\u0327\3\2\2\2\u0332\u0328\3\2"+
		"\2\2\u0332\u0329\3\2\2\2\u0332\u032a\3\2\2\2\u0332\u032b\3\2\2\2\u0332"+
		"\u032c\3\2\2\2\u0332\u032d\3\2\2\2\u0332\u032e\3\2\2\2\u0332\u032f\3\2"+
		"\2\2\u0332\u0330\3\2\2\2\u0332\u0331\3\2\2\2\u0333\5\3\2\2\2\u0334\u0335"+
		"\7y\2\2\u0335\u0336\7\u00a7\2\2\u0336\u0337\5\u02ba\u015e\2\u0337\u0338"+
		"\7\u0233\2\2\u0338\7\3\2\2\2\u0339\u033a\7\t\2\2\u033a\u033b\7\u00a7\2"+
		"\2\u033b\u033c\5\u02ba\u015e\2\u033c\u033e\7C\2\2\u033d\u033f\7e\2\2\u033e"+
		"\u033d\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0343\3\2\2\2\u0340\u0342\5\u00d8"+
		"m\2\u0341\u0340\3\2\2\2\u0342\u0345\3\2\2\2\u0343\u0341\3\2\2\2\u0343"+
		"\u0344\3\2\2\2\u0344\u0348\3\2\2\2\u0345\u0343\3\2\2\2\u0346\u0347\7\u0166"+
		"\2\2\u0347\u0349\7\u0184\2\2\u0348\u0346\3\2\2\2\u0348\u0349\3\2\2\2\u0349"+
		"\u034a\3\2\2\2\u034a\u034b\7\u0233\2\2\u034b\t\3\2\2\2\u034c\u034f\7U"+
		"\2\2\u034d\u034e\7\u012a\2\2\u034e\u0350\7\u015f\2\2\u034f\u034d\3\2\2"+
		"\2\u034f\u0350\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u0352\7\u00a7\2\2\u0352"+
		"\u035e\5\u02ba\u015e\2\u0353\u0354\7\u0221\2\2\u0354\u0359\5\u00e4s\2"+
		"\u0355\u0356\7\u0227\2\2\u0356\u0358\5\u00e4s\2\u0357\u0355\3\2\2\2\u0358"+
		"\u035b\3\2\2\2\u0359\u0357\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035c\3\2"+
		"\2\2\u035b\u0359\3\2\2\2\u035c\u035d\7\u0222\2\2\u035d\u035f\3\2\2\2\u035e"+
		"\u0353\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0360\3\2\2\2\u0360\u0361\7\u0165"+
		"\2\2\u0361\u0368\5\u02e2\u0172\2\u0362\u0367\5\u00d6l\2\u0363\u0367\5"+
		"\f\7\2\u0364\u0367\5\20\t\2\u0365\u0367\7r\2\2\u0366\u0362\3\2\2\2\u0366"+
		"\u0363\3\2\2\2\u0366\u0364\3\2\2\2\u0366\u0365\3\2\2\2\u0367\u036a\3\2"+
		"\2\2\u0368\u0366\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u037f\3\2\2\2\u036a"+
		"\u0368\3\2\2\2\u036b\u036d\7\u0140\2\2\u036c\u036b\3\2\2\2\u036c\u036d"+
		"\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u037a\t\2\2\2\u036f\u0371\7h\2\2\u0370"+
		"\u036f\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0375\3\2\2\2\u0372\u0374\5\u00e8"+
		"u\2\u0373\u0372\3\2\2\2\u0374\u0377\3\2\2\2\u0375\u0373\3\2\2\2\u0375"+
		"\u0376\3\2\2\2\u0376\u0378\3\2\2\2\u0377\u0375\3\2\2\2\u0378\u037b\5\u0132"+
		"\u009a\2\u0379\u037b\5\u00dan\2\u037a\u0370\3\2\2\2\u037a\u0379\3\2\2"+
		"\2\u037b\u0380\3\2\2\2\u037c\u037d\t\3\2\2\u037d\u037e\7\u01c7\2\2\u037e"+
		"\u0380\5\u02a4\u0153\2\u037f\u036c\3\2\2\2\u037f\u037c\3\2\2\2\u0380\u0381"+
		"\3\2\2\2\u0381\u0382\7\u0233\2\2\u0382\13\3\2\2\2\u0383\u0385\7\u0131"+
		"\2\2\u0384\u0386\5\16\b\2\u0385\u0384\3\2\2\2\u0385\u0386\3\2\2\2\u0386"+
		"\r\3\2\2\2\u0387\u0388\7\u0221\2\2\u0388\u0389\7\u0134\2\2\u0389\u038a"+
		"\5\u021a\u010e\2\u038a\u0398\7*\2\2\u038b\u0399\7\f\2\2\u038c\u038d\t"+
		"\4\2\2\u038d\u038e\7\u0221\2\2\u038e\u0393\5\u02cc\u0167\2\u038f\u0390"+
		"\7\u0227\2\2\u0390\u0392\5\u02cc\u0167\2\u0391\u038f\3\2\2\2\u0392\u0395"+
		"\3\2\2\2\u0393\u0391\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0396\3\2\2\2\u0395"+
		"\u0393\3\2\2\2\u0396\u0397\7\u0222\2\2\u0397\u0399\3\2\2\2\u0398\u038b"+
		"\3\2\2\2\u0398\u038c\3\2\2\2\u0399\u039b\3\2\2\2\u039a\u039c\5\24\13\2"+
		"\u039b\u039a\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u039e"+
		"\7\u0222\2\2\u039e\17\3\2\2\2\u039f\u03a1\7\u0162\2\2\u03a0\u03a2\5\22"+
		"\n\2\u03a1\u03a0\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\21\3\2\2\2\u03a3\u03a4"+
		"\7\u015d\2\2\u03a4\u03a5\7\u0221\2\2\u03a5\u03aa\5\u02ce\u0168\2\u03a6"+
		"\u03a7\7\u0227\2\2\u03a7\u03a9\5\u02ce\u0168\2\u03a8\u03a6\3\2\2\2\u03a9"+
		"\u03ac\3\2\2\2\u03aa\u03a8\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ad\3\2"+
		"\2\2\u03ac\u03aa\3\2\2\2\u03ad\u03ae\7\u0222\2\2\u03ae\23\3\2\2\2\u03af"+
		"\u03b0\t\5\2\2\u03b0\u03b1\5\u021a\u010e\2\u03b1\u03b2\7*\2\2\u03b2\u03b3"+
		"\7\u0221\2\2\u03b3\u03b8\5\u02cc\u0167\2\u03b4\u03b5\7\u0227\2\2\u03b5"+
		"\u03b7\5\u02cc\u0167\2\u03b6\u03b4\3\2\2\2\u03b7\u03ba\3\2\2\2\u03b8\u03b6"+
		"\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03bb\3\2\2\2\u03ba\u03b8\3\2\2\2\u03bb"+
		"\u03bc\7\u0222\2\2\u03bc\25\3\2\2\2\u03bd\u03be\7y\2\2\u03be\u03c0\7\u0130"+
		"\2\2\u03bf\u03c1\7$\2\2\u03c0\u03bf\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1"+
		"\u03c5\3\2\2\2\u03c2\u03c3\5\u02d4\u016b\2\u03c3\u03c4\7\u021a\2\2\u03c4"+
		"\u03c6\3\2\2\2\u03c5\u03c2\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03c7\3\2"+
		"\2\2\u03c7\u03c8\5\u02a2\u0152\2\u03c8\u03c9\7\u0233\2\2\u03c9\27\3\2"+
		"\2\2\u03ca\u03cb\7\t\2\2\u03cb\u03cc\7\u0130\2\2\u03cc\u03cd\5\u02a2\u0152"+
		"\2\u03cd\u03cf\7C\2\2\u03ce\u03d0\7e\2\2\u03cf\u03ce\3\2\2\2\u03cf\u03d0"+
		"\3\2\2\2\u03d0\u03d2\3\2\2\2\u03d1\u03d3\t\6\2\2\u03d2\u03d1\3\2\2\2\u03d2"+
		"\u03d3\3\2\2\2\u03d3\u03d7\3\2\2\2\u03d4\u03d6\5\u00d8m\2\u03d5\u03d4"+
		"\3\2\2\2\u03d6\u03d9\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8"+
		"\u03dc\3\2\2\2\u03d9\u03d7\3\2\2\2\u03da\u03db\7\u0166\2\2\u03db\u03dd"+
		"\7\u0184\2\2\u03dc\u03da\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03de\3\2\2"+
		"\2\u03de\u03df\7\u0233\2\2\u03df\31\3\2\2\2\u03e0\u03e3\7U\2\2\u03e1\u03e2"+
		"\7\u012a\2\2\u03e2\u03e4\7\u015f\2\2\u03e3\u03e1\3\2\2\2\u03e3\u03e4\3"+
		"\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e9\7\u0130\2\2\u03e6\u03e7\5\u02d4"+
		"\u016b\2\u03e7\u03e8\7\u021a\2\2\u03e8\u03ea\3\2\2\2\u03e9\u03e6\3\2\2"+
		"\2\u03e9\u03ea\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ed\5\u02a2\u0152\2"+
		"\u03ec\u03ee\5\u00d6l\2\u03ed\u03ec\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee"+
		"\u03ef\3\2\2\2\u03ef\u03f3\t\2\2\2\u03f0\u03f2\5\36\20\2\u03f1\u03f0\3"+
		"\2\2\2\u03f2\u03f5\3\2\2\2\u03f3\u03f1\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4"+
		"\u03f6\3\2\2\2\u03f5\u03f3\3\2\2\2\u03f6\u03f8\7\u0083\2\2\u03f7\u03f9"+
		"\5\u02a2\u0152\2\u03f8\u03f7\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u03fa\3"+
		"\2\2\2\u03fa\u03fb\7\u0233\2\2\u03fb\33\3\2\2\2\u03fc\u03ff\7U\2\2\u03fd"+
		"\u03fe\7\u012a\2\2\u03fe\u0400\7\u015f\2\2\u03ff\u03fd\3\2\2\2\u03ff\u0400"+
		"\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0402\7\u0130\2\2\u0402\u0406\7$\2"+
		"\2\u0403\u0404\5\u02d4\u016b\2\u0404\u0405\7\u021a\2\2\u0405\u0407\3\2"+
		"\2\2\u0406\u0403\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u0408\3\2\2\2\u0408"+
		"\u0409\5\u02a2\u0152\2\u0409\u040d\t\2\2\2\u040a\u040c\5$\23\2\u040b\u040a"+
		"\3\2\2\2\u040c\u040f\3\2\2\2\u040d\u040b\3\2\2\2\u040d\u040e\3\2\2\2\u040e"+
		"\u0416\3\2\2\2\u040f\u040d\3\2\2\2\u0410\u0411\7\34\2\2\u0411\u0417\5"+
		"\u0104\u0083\2\u0412\u0414\7\u0083\2\2\u0413\u0415\5\u02a2\u0152\2\u0414"+
		"\u0413\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0417\3\2\2\2\u0416\u0410\3\2"+
		"\2\2\u0416\u0412\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u0419\7\u0233\2\2\u0419"+
		"\35\3\2\2\2\u041a\u0423\5\u00eav\2\u041b\u0423\5\u00ecw\2\u041c\u0423"+
		"\5\u00eex\2\u041d\u0423\5\u00f2z\2\u041e\u0423\5\u00f4{\2\u041f\u0423"+
		"\5\u00fc\177\2\u0420\u0423\5 \21\2\u0421\u0423\5\"\22\2\u0422\u041a\3"+
		"\2\2\2\u0422\u041b\3\2\2\2\u0422\u041c\3\2\2\2\u0422\u041d\3\2\2\2\u0422"+
		"\u041e\3\2\2\2\u0422\u041f\3\2\2\2\u0422\u0420\3\2\2\2\u0422\u0421\3\2"+
		"\2\2\u0423\37\3\2\2\2\u0424\u0425\7\u014e\2\2\u0425\u0431\5\u02fa\u017e"+
		"\2\u0426\u0427\7\u0221\2\2\u0427\u042c\5\u00e4s\2\u0428\u0429\7\u0227"+
		"\2\2\u0429\u042b\5\u00e4s\2\u042a\u0428\3\2\2\2\u042b\u042e\3\2\2\2\u042c"+
		"\u042a\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u042f\3\2\2\2\u042e\u042c\3\2"+
		"\2\2\u042f\u0430\7\u0222\2\2\u0430\u0432\3\2\2\2\u0431\u0426\3\2\2\2\u0431"+
		"\u0432\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0434\7\u0233\2\2\u0434!\3\2"+
		"\2\2\u0435\u0436\7\u00a7\2\2\u0436\u0442\5\u02fa\u017e\2\u0437\u0438\7"+
		"\u0221\2\2\u0438\u043d\5\u00e4s\2\u0439\u043a\7\u0227\2\2\u043a\u043c"+
		"\5\u00e4s\2\u043b\u0439\3\2\2\2\u043c\u043f\3\2\2\2\u043d\u043b\3\2\2"+
		"\2\u043d\u043e\3\2\2\2\u043e\u0440\3\2\2\2\u043f\u043d\3\2\2\2\u0440\u0441"+
		"\7\u0222\2\2\u0441\u0443\3\2\2\2\u0442\u0437\3\2\2\2\u0442\u0443\3\2\2"+
		"\2\u0443\u0444\3\2\2\2\u0444\u0445\7\u0165\2\2\u0445\u0447\5\u02e2\u0172"+
		"\2\u0446\u0448\7r\2\2\u0447\u0446\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u044a"+
		"\3\2\2\2\u0449\u044b\7\u0162\2\2\u044a\u0449\3\2\2\2\u044a\u044b\3\2\2"+
		"\2\u044b\u044c\3\2\2\2\u044c\u044d\7\u0233\2\2\u044d#\3\2\2\2\u044e\u0458"+
		"\5\u00eav\2\u044f\u0458\5\u00ecw\2\u0450\u0458\5\u00eex\2\u0451\u0458"+
		"\5\u00f2z\2\u0452\u0458\5\u00fc\177\2\u0453\u0458\5,\27\2\u0454\u0458"+
		"\5*\26\2\u0455\u0458\5 \21\2\u0456\u0458\5\"\22\2\u0457\u044e\3\2\2\2"+
		"\u0457\u044f\3\2\2\2\u0457\u0450\3\2\2\2\u0457\u0451\3\2\2\2\u0457\u0452"+
		"\3\2\2\2\u0457\u0453\3\2\2\2\u0457\u0454\3\2\2\2\u0457\u0455\3\2\2\2\u0457"+
		"\u0456\3\2\2\2\u0458%\3\2\2\2\u0459\u045a\7y\2\2\u045a\u045b\7\u014e\2"+
		"\2\u045b\u045c\5\u02bc\u015f\2\u045c\u045d\7\u0233\2\2\u045d\'\3\2\2\2"+
		"\u045e\u045f\7\t\2\2\u045f\u0460\7\u014e\2\2\u0460\u0461\5\u02bc\u015f"+
		"\2\u0461\u0463\7C\2\2\u0462\u0464\7e\2\2\u0463\u0462\3\2\2\2\u0463\u0464"+
		"\3\2\2\2\u0464\u0468\3\2\2\2\u0465\u0467\5\u00d8m\2\u0466\u0465\3\2\2"+
		"\2\u0467\u046a\3\2\2\2\u0468\u0466\3\2\2\2\u0468\u0469\3\2\2\2\u0469\u046d"+
		"\3\2\2\2\u046a\u0468\3\2\2\2\u046b\u046c\7\u0166\2\2\u046c\u046e\7\u0184"+
		"\2\2\u046d\u046b\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u046f\3\2\2\2\u046f"+
		"\u0470\7\u0233\2\2\u0470)\3\2\2\2\u0471\u0472\7\u00a7\2\2\u0472\u047e"+
		"\5\u02fa\u017e\2\u0473\u0474\7\u0221\2\2\u0474\u0479\5\u00e4s\2\u0475"+
		"\u0476\7\u0227\2\2\u0476\u0478\5\u00e4s\2\u0477\u0475\3\2\2\2\u0478\u047b"+
		"\3\2\2\2\u0479\u0477\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047c\3\2\2\2\u047b"+
		"\u0479\3\2\2\2\u047c\u047d\7\u0222\2\2\u047d\u047f\3\2\2\2\u047e\u0473"+
		"\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0480\3\2\2\2\u0480\u0481\7\u0165\2"+
		"\2\u0481\u0488\5\u02e2\u0172\2\u0482\u0487\5\u00d6l\2\u0483\u0487\5\f"+
		"\7\2\u0484\u0487\5\20\t\2\u0485\u0487\7r\2\2\u0486\u0482\3\2\2\2\u0486"+
		"\u0483\3\2\2\2\u0486\u0484\3\2\2\2\u0486\u0485\3\2\2\2\u0487\u048a\3\2"+
		"\2\2\u0488\u0486\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u049f\3\2\2\2\u048a"+
		"\u0488\3\2\2\2\u048b\u048d\7\u0140\2\2\u048c\u048b\3\2\2\2\u048c\u048d"+
		"\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u049a\t\2\2\2\u048f\u0491\7h\2\2\u0490"+
		"\u048f\3\2\2\2\u0490\u0491\3\2\2\2\u0491\u0495\3\2\2\2\u0492\u0494\5\u00e8"+
		"u\2\u0493\u0492\3\2\2\2\u0494\u0497\3\2\2\2\u0495\u0493\3\2\2\2\u0495"+
		"\u0496\3\2\2\2\u0496\u0498\3\2\2\2\u0497\u0495\3\2\2\2\u0498\u049b\5\u0132"+
		"\u009a\2\u0499\u049b\5\u00dan\2\u049a\u0490\3\2\2\2\u049a\u0499\3\2\2"+
		"\2\u049b\u04a0\3\2\2\2\u049c\u049d\t\3\2\2\u049d\u049e\7\u01c7\2\2\u049e"+
		"\u04a0\5\u02a4\u0153\2\u049f\u048c\3\2\2\2\u049f\u049c\3\2\2\2\u04a0\u04a1"+
		"\3\2\2\2\u04a1\u04a2\7\u0233\2\2\u04a2+\3\2\2\2\u04a3\u04a4\7\u014e\2"+
		"\2\u04a4\u04b0\5\u02fa\u017e\2\u04a5\u04a6\7\u0221\2\2\u04a6\u04ab\5\u00e4"+
		"s\2\u04a7\u04a8\7\u0227\2\2\u04a8\u04aa\5\u00e4s\2\u04a9\u04a7\3\2\2\2"+
		"\u04aa\u04ad\3\2\2\2\u04ab\u04a9\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04ae"+
		"\3\2\2\2\u04ad\u04ab\3\2\2\2\u04ae\u04af\7\u0222\2\2\u04af\u04b1\3\2\2"+
		"\2\u04b0\u04a5\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u04bf"+
		"\t\2\2\2\u04b3\u04b5\7h\2\2\u04b4\u04b3\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5"+
		"\u04b9\3\2\2\2\u04b6\u04b8\5\u00e8u\2\u04b7\u04b6\3\2\2\2\u04b8\u04bb"+
		"\3\2\2\2\u04b9\u04b7\3\2\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04bc\3\2\2\2\u04bb"+
		"\u04b9\3\2\2\2\u04bc\u04c0\5\u0132\u009a\2\u04bd\u04c0\5\u00dan\2\u04be"+
		"\u04c0\7\u0092\2\2\u04bf\u04b4\3\2\2\2\u04bf\u04bd\3\2\2\2\u04bf\u04be"+
		"\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1\u04c2\7\u0233\2\2\u04c2-\3\2\2\2\u04c3"+
		"\u04c6\7U\2\2\u04c4\u04c5\7\u012a\2\2\u04c5\u04c7\7\u015f\2\2\u04c6\u04c4"+
		"\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04c9\7\u014e\2"+
		"\2\u04c9\u04d5\5\u02bc\u015f\2\u04ca\u04cb\7\u0221\2\2\u04cb\u04d0\5\u00e4"+
		"s\2\u04cc\u04cd\7\u0227\2\2\u04cd\u04cf\5\u00e4s\2\u04ce\u04cc\3\2\2\2"+
		"\u04cf\u04d2\3\2\2\2\u04d0\u04ce\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1\u04d3"+
		"\3\2\2\2\u04d2\u04d0\3\2\2\2\u04d3\u04d4\7\u0222\2\2\u04d4\u04d6\3\2\2"+
		"\2\u04d5\u04ca\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6\u04d8\3\2\2\2\u04d7\u04d9"+
		"\5\u00d6l\2\u04d8\u04d7\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04da\3\2\2"+
		"\2\u04da\u04e7\t\2\2\2\u04db\u04dd\7h\2\2\u04dc\u04db\3\2\2\2\u04dc\u04dd"+
		"\3\2\2\2\u04dd\u04e1\3\2\2\2\u04de\u04e0\5\u00e8u\2\u04df\u04de\3\2\2"+
		"\2\u04e0\u04e3\3\2\2\2\u04e1\u04df\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2\u04e4"+
		"\3\2\2\2\u04e3\u04e1\3\2\2\2\u04e4\u04e8\5\u0132\u009a\2\u04e5\u04e8\5"+
		"\u00dan\2\u04e6\u04e8\7\u0092\2\2\u04e7\u04dc\3\2\2\2\u04e7\u04e5\3\2"+
		"\2\2\u04e7\u04e6\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ea\7\u0233\2\2\u04ea"+
		"/\3\2\2\2\u04eb\u04ec\7y\2\2\u04ec\u04ed\7\u01b7\2\2\u04ed\u04ee\5\u02be"+
		"\u0160\2\u04ee\u04ef\7\u0233\2\2\u04ef\61\3\2\2\2\u04f0\u04f1\7\t\2\2"+
		"\u04f1\u04f2\7\u01b7\2\2\u04f2\u0505\5\u02be\u0160\2\u04f3\u0506\t\7\2"+
		"\2\u04f4\u04f5\7\u015e\2\2\u04f5\u04f6\7\u01b2\2\2\u04f6\u0506\5\u02be"+
		"\u0160\2\u04f7\u04f9\7C\2\2\u04f8\u04fa\7e\2\2\u04f9\u04f8\3\2\2\2\u04f9"+
		"\u04fa\3\2\2\2\u04fa\u04fe\3\2\2\2\u04fb\u04fd\5\u00d8m\2\u04fc\u04fb"+
		"\3\2\2\2\u04fd\u0500\3\2\2\2\u04fe\u04fc\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff"+
		"\u0503\3\2\2\2\u0500\u04fe\3\2\2\2\u0501\u0502\7\u0166\2\2\u0502\u0504"+
		"\7\u0184\2\2\u0503\u0501\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u0506\3\2\2"+
		"\2\u0505\u04f3\3\2\2\2\u0505\u04f4\3\2\2\2\u0505\u04f7\3\2\2\2\u0506\u0507"+
		"\3\2\2\2\u0507\u0508\7\u0233\2\2\u0508\63\3\2\2\2\u0509\u050c\7U\2\2\u050a"+
		"\u050b\7\u012a\2\2\u050b\u050d\7\u015f\2\2\u050c\u050a\3\2\2\2\u050c\u050d"+
		"\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u050f\7\u01b7\2\2\u050f\u0513\5\u02be"+
		"\u0160\2\u0510\u0514\5:\36\2\u0511\u0514\5> \2\u0512\u0514\5@!\2\u0513"+
		"\u0510\3\2\2\2\u0513\u0511\3\2\2\2\u0513\u0512\3\2\2\2\u0514\u0516\3\2"+
		"\2\2\u0515\u0517\5\66\34\2\u0516\u0515\3\2\2\2\u0516\u0517\3\2\2\2\u0517"+
		"\u0519\3\2\2\2\u0518\u051a\t\7\2\2\u0519\u0518\3\2\2\2\u0519\u051a\3\2"+
		"\2\2\u051a\u051c\3\2\2\2\u051b\u051d\58\35\2\u051c\u051b\3\2\2\2\u051c"+
		"\u051d\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u051f\5B\"\2\u051f\u0520\7\u0233"+
		"\2\2\u0520\65\3\2\2\2\u0521\u0522\7\u009e\2\2\u0522\u0527\5\u02be\u0160"+
		"\2\u0523\u0524\7\u0227\2\2\u0524\u0526\5\u02be\u0160\2\u0525\u0523\3\2"+
		"\2\2\u0526\u0529\3\2\2\2\u0527\u0525\3\2\2\2\u0527\u0528\3\2\2\2\u0528"+
		"\67\3\2\2\2\u0529\u0527\3\2\2\2\u052a\u052b\7\u01d6\2\2\u052b\u052c\7"+
		"\u0221\2\2\u052c\u052d\5\u0216\u010c\2\u052d\u052e\7\u0222\2\2\u052e9"+
		"\3\2\2\2\u052f\u0534\7\33\2\2\u0530\u0534\7\4\2\2\u0531\u0532\7\u00c7"+
		"\2\2\u0532\u0534\7\u011e\2\2\u0533\u052f\3\2\2\2\u0533\u0530\3\2\2\2\u0533"+
		"\u0531\3\2\2\2\u0534\u0535\3\2\2\2\u0535\u0537\5L\'\2\u0536\u0538\5R*"+
		"\2\u0537\u0536\3\2\2\2\u0537\u0538\3\2\2\2\u0538\u053a\3\2\2\2\u0539\u053b"+
		"\5<\37\2\u053a\u0539\3\2\2\2\u053a\u053b\3\2\2\2\u053b;\3\2\2\2\u053c"+
		"\u053d\7\u00a2\2\2\u053d\u053e\7{\2\2\u053e\u053f\7\u016d\2\2\u053f=\3"+
		"\2\2\2\u0540\u0541\7\u00a2\2\2\u0541\u0543\5L\'\2\u0542\u0544\5R*\2\u0543"+
		"\u0542\3\2\2\2\u0543\u0544\3\2\2\2\u0544?\3\2\2\2\u0545\u0546\t\b\2\2"+
		"\u0546\u054b\5J&\2\u0547\u0548\7\u012a\2\2\u0548\u054a\5J&\2\u0549\u0547"+
		"\3\2\2\2\u054a\u054d\3\2\2\2\u054b\u0549\3\2\2\2\u054b\u054c\3\2\2\2\u054c"+
		"\u054e\3\2\2\2\u054d\u054b\3\2\2\2\u054e\u0556\7\u0123\2\2\u054f\u0557"+
		"\7^\2\2\u0550\u0551\5\u029e\u0150\2\u0551\u0552\7\u021a\2\2\u0552\u0554"+
		"\3\2\2\2\u0553\u0550\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u0555\3\2\2\2\u0555"+
		"\u0557\7\u0174\2\2\u0556\u054f\3\2\2\2\u0556\u0553\3\2\2\2\u0557A\3\2"+
		"\2\2\u0558\u0559\7D\2\2\u0559\u055e\7\u01b7\2\2\u055a\u055b\7-\2\2\u055b"+
		"\u055e\5\u02fa\u017e\2\u055c\u055e\5\u0136\u009c\2\u055d\u0558\3\2\2\2"+
		"\u055d\u055a\3\2\2\2\u055d\u055c\3\2\2\2\u055eC\3\2\2\2\u055f\u0561\5"+
		"\u02a0\u0151\2\u0560\u0562\5\u02d8\u016d\2\u0561\u0560\3\2\2\2\u0561\u0562"+
		"\3\2\2\2\u0562E\3\2\2\2\u0563\u0564\7D\2\2\u0564\u0568\7\u01b7\2\2\u0565"+
		"\u0567\5\u00e8u\2\u0566\u0565\3\2\2\2\u0567\u056a\3\2\2\2\u0568\u0566"+
		"\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u056c\3\2\2\2\u056a\u0568\3\2\2\2\u056b"+
		"\u056d\5H%\2\u056c\u056b\3\2\2\2\u056d\u056e\3\2\2\2\u056e\u056c\3\2\2"+
		"\2\u056e\u056f\3\2\2\2\u056f\u0570\3\2\2\2\u0570\u0571\7\u0083\2\2\u0571"+
		"\u0572\5\u02be\u0160\2\u0572G\3\2\2\2\u0573\u0574\7\33\2\2\u0574\u0575"+
		"\7\u0198\2\2\u0575\u0576\7\u00ce\2\2\u0576\u0577\5\u0136\u009c\2\u0577"+
		"\u0578\7\33\2\2\u0578\u0579\7\u0198\2\2\u0579\u057a\7\u0233\2\2\u057a"+
		"\u0598\3\2\2\2\u057b\u057c\7\33\2\2\u057c\u057d\7{\2\2\u057d\u057e\7\u016d"+
		"\2\2\u057e\u057f\7\u00ce\2\2\u057f\u0580\5\u0136\u009c\2\u0580\u0581\7"+
		"\33\2\2\u0581\u0582\7{\2\2\u0582\u0583\7\u016d\2\2\u0583\u0584\7\u0233"+
		"\2\2\u0584\u0598\3\2\2\2\u0585\u0586\7\4\2\2\u0586\u0587\7\u0198\2\2\u0587"+
		"\u0588\7\u00ce\2\2\u0588\u0589\5\u0136\u009c\2\u0589\u058a\7\4\2\2\u058a"+
		"\u058b\7\u0198\2\2\u058b\u058c\7\u0233\2\2\u058c\u0598\3\2\2\2\u058d\u058e"+
		"\7\4\2\2\u058e\u058f\7{\2\2\u058f\u0590\7\u016d\2\2\u0590\u0591\7\u00ce"+
		"\2\2\u0591\u0592\5\u0136\u009c\2\u0592\u0593\7\4\2\2\u0593\u0594\7{\2"+
		"\2\u0594\u0595\7\u016d\2\2\u0595\u0596\7\u0233\2\2\u0596\u0598\3\2\2\2"+
		"\u0597\u0573\3\2\2\2\u0597\u057b\3\2\2\2\u0597\u0585\3\2\2\2\u0597\u058d"+
		"\3\2\2\2\u0598I\3\2\2\2\u0599\u05b4\7\t\2\2\u059a\u05b4\7\n\2\2\u059b"+
		"\u059c\7\21\2\2\u059c\u05b4\7\u019a\2\2\u059d\u05b4\7\24\2\2\u059e\u05b4"+
		"\7?\2\2\u059f\u05b4\7U\2\2\u05a0\u05a1\7u\2\2\u05a1\u05b4\7\u019a\2\2"+
		"\u05a2\u05b4\7y\2\2\u05a3\u05b4\7\u00aa\2\2\u05a4\u05b4\7\u0108\2\2\u05a5"+
		"\u05b4\7\u015e\2\2\u05a6\u05b4\7\u0168\2\2\u05a7\u05b4\7\u01b9\2\2\u05a8"+
		"\u05b4\7d\2\2\u05a9\u05b4\7\u0196\2\2\u05aa\u05b4\7\u0187\2\2\u05ab\u05b4"+
		"\7b\2\2\u05ac\u05b4\7\u00e8\2\2\u05ad\u05b4\7\u00e7\2\2\u05ae\u05b4\7"+
		"\u0180\2\2\u05af\u05b4\7\u01a2\2\2\u05b0\u05b4\7^\2\2\u05b1\u05b4\7\u0174"+
		"\2\2\u05b2\u05b4\7\u009e\2\2\u05b3\u0599\3\2\2\2\u05b3\u059a\3\2\2\2\u05b3"+
		"\u059b\3\2\2\2\u05b3\u059d\3\2\2\2\u05b3\u059e\3\2\2\2\u05b3\u059f\3\2"+
		"\2\2\u05b3\u05a0\3\2\2\2\u05b3\u05a2\3\2\2\2\u05b3\u05a3\3\2\2\2\u05b3"+
		"\u05a4\3\2\2\2\u05b3\u05a5\3\2\2\2\u05b3\u05a6\3\2\2\2\u05b3\u05a7\3\2"+
		"\2\2\u05b3\u05a8\3\2\2\2\u05b3\u05a9\3\2\2\2\u05b3\u05aa\3\2\2\2\u05b3"+
		"\u05ab\3\2\2\2\u05b3\u05ac\3\2\2\2\u05b3\u05ad\3\2\2\2\u05b3\u05ae\3\2"+
		"\2\2\u05b3\u05af\3\2\2\2\u05b3\u05b0\3\2\2\2\u05b3\u05b1\3\2\2\2\u05b3"+
		"\u05b2\3\2\2\2\u05b4K\3\2\2\2\u05b5\u05ba\5N(\2\u05b6\u05b7\7\u012a\2"+
		"\2\u05b7\u05b9\5N(\2\u05b8\u05b6\3\2\2\2\u05b9\u05bc\3\2\2\2\u05ba\u05b8"+
		"\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb\u05bd\3\2\2\2\u05bc\u05ba\3\2\2\2\u05bd"+
		"\u05bf\7\u0123\2\2\u05be\u05c0\5P)\2\u05bf\u05be\3\2\2\2\u05bf\u05c0\3"+
		"\2\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05c2\5\u02ce\u0168\2\u05c2M\3\2\2\2"+
		"\u05c3\u05cd\t\t\2\2\u05c4\u05c5\7\u011e\2\2\u05c5\u05ca\5\u02cc\u0167"+
		"\2\u05c6\u05c7\7\u0227\2\2\u05c7\u05c9\5\u02cc\u0167\2\u05c8\u05c6\3\2"+
		"\2\2\u05c9\u05cc\3\2\2\2\u05ca\u05c8\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb"+
		"\u05ce\3\2\2\2\u05cc\u05ca\3\2\2\2\u05cd\u05c4\3\2\2\2\u05cd\u05ce\3\2"+
		"\2\2\u05ceO\3\2\2\2\u05cf\u05d0\7\u0105\2\2\u05d0\u05d1\7\u01a5\2\2\u05d1"+
		"\u05d2\5\u02ce\u0168\2\u05d2\u05d3\7\u011e\2\2\u05d3Q\3\2\2\2\u05d4\u05d6"+
		"\7\u015a\2\2\u05d5\u05d7\5T+\2\u05d6\u05d5\3\2\2\2\u05d7\u05d8\3\2\2\2"+
		"\u05d8\u05d6\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9S\3\2\2\2\u05da\u05db\t"+
		"\n\2\2\u05db\u05dc\5\u028a\u0146\2\u05dcU\3\2\2\2\u05dd\u05de\7y\2\2\u05de"+
		"\u05e0\7\u01ba\2\2\u05df\u05e1\7$\2\2\u05e0\u05df\3\2\2\2\u05e0\u05e1"+
		"\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2\u05e4\5\u02b4\u015b\2\u05e3\u05e5\t"+
		"\13\2\2\u05e4\u05e3\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6"+
		"\u05e7\7\u0233\2\2\u05e7W\3\2\2\2\u05e8\u05e9\7\t\2\2\u05e9\u05ea\7\u01ba"+
		"\2\2\u05ea\u05f0\5\u02b4\u015b\2\u05eb\u05f1\5Z.\2\u05ec\u05f1\5\\/\2"+
		"\u05ed\u05f1\5^\60\2\u05ee\u05f1\5f\64\2\u05ef\u05f1\5\u0088E\2\u05f0"+
		"\u05eb\3\2\2\2\u05f0\u05ec\3\2\2\2\u05f0\u05ed\3\2\2\2\u05f0\u05ee\3\2"+
		"\2\2\u05f0\u05ef\3\2\2\2\u05f1\u05f3\3\2\2\2\u05f2\u05f4\5h\65\2\u05f3"+
		"\u05f2\3\2\2\2\u05f3\u05f4\3\2\2\2\u05f4\u05f5\3\2\2\2\u05f5\u05f6\7\u0233"+
		"\2\2\u05f6Y\3\2\2\2\u05f7\u05f9\7C\2\2\u05f8\u05fa\7e\2\2\u05f9\u05f8"+
		"\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fc\3\2\2\2\u05fb\u05fd\t\f\2\2\u05fc"+
		"\u05fb\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u0601\3\2\2\2\u05fe\u0600\5\u00d8"+
		"m\2\u05ff\u05fe\3\2\2\2\u0600\u0603\3\2\2\2\u0601\u05ff\3\2\2\2\u0601"+
		"\u0602\3\2\2\2\u0602\u0606\3\2\2\2\u0603\u0601\3\2\2\2\u0604\u0605\7\u0166"+
		"\2\2\u0605\u0607\7\u0184\2\2\u0606\u0604\3\2\2\2\u0606\u0607\3\2\2\2\u0607"+
		"[\3\2\2\2\u0608\u060a\7\u015f\2\2\u0609\u060b\5\u00d6l\2\u060a\u0609\3"+
		"\2\2\2\u060a\u060b\3\2\2\2\u060b\u060c\3\2\2\2\u060c\u060d\7\17\2\2\u060d"+
		"\u060e\7\u011c\2\2\u060e\u060f\7\u0221\2\2\u060f\u0614\5\u008aF\2\u0610"+
		"\u0611\7\u0227\2\2\u0611\u0613\5\u008aF\2\u0612\u0610\3\2\2\2\u0613\u0616"+
		"\3\2\2\2\u0614\u0612\3\2\2\2\u0614\u0615\3\2\2\2\u0615\u0617\3\2\2\2\u0616"+
		"\u0614\3\2\2\2\u0617\u0618\7\u0222\2\2\u0618]\3\2\2\2\u0619\u061e\5`\61"+
		"\2\u061a\u061b\7\u0227\2\2\u061b\u061d\5`\61\2\u061c\u061a\3\2\2\2\u061d"+
		"\u0620\3\2\2\2\u061e\u061c\3\2\2\2\u061e\u061f\3\2\2\2\u061f_\3\2\2\2"+
		"\u0620\u061e\3\2\2\2\u0621\u0624";
	private static final String _serializedATNSegment1 =
		"\t\r\2\2\u0622\u0625\5\u009aN\2\u0623\u0625\5\u0092J\2\u0624\u0622\3\2"+
		"\2\2\u0624\u0623\3\2\2\2\u0625a\3\2\2\2\u0626\u0627\t\16\2\2\u0627\u0634"+
		"\7\23\2\2\u0628\u0635\5d\63\2\u0629\u062a\7\u0221\2\2\u062a\u062f\5d\63"+
		"\2\u062b\u062c\7\u0227\2\2\u062c\u062e\5d\63\2\u062d\u062b\3\2\2\2\u062e"+
		"\u0631\3\2\2\2\u062f\u062d\3\2\2\2\u062f\u0630\3\2\2\2\u0630\u0632\3\2"+
		"\2\2\u0631\u062f\3\2\2\2\u0632\u0633\7\u0222\2\2\u0633\u0635\3\2\2\2\u0634"+
		"\u0628\3\2\2\2\u0634\u0629\3\2\2\2\u0635c\3\2\2\2\u0636\u0638\5\u0296"+
		"\u014c\2\u0637\u0639\5\u02e2\u0172\2\u0638\u0637\3\2\2\2\u0638\u0639\3"+
		"\2\2\2\u0639e\3\2\2\2\u063a\u0640\7\u00fa\2\2\u063b\u063c\7\u00e0\2\2"+
		"\u063c\u0641\5\u021a\u010e\2\u063d\u063e\7|\2\2\u063e\u063f\7\u01ba\2"+
		"\2\u063f\u0641\5\u02e2\u0172\2\u0640\u063b\3\2\2\2\u0640\u063d\3\2\2\2"+
		"\u0641g\3\2\2\2\u0642\u0653\7\u00cd\2\2\u0643\u064d\7/\2\2\u0644\u0645"+
		"\7P\2\2\u0645\u0646\7\u01b2\2\2\u0646\u064e\7\u019f\2\2\u0647\u0649\7"+
		"\u0115\2\2\u0648\u0647\3\2\2\2\u0648\u0649\3\2\2\2\u0649\u064a\3\2\2\2"+
		"\u064a\u064b\7\u00b7\2\2\u064b\u064c\7\u01a5\2\2\u064c\u064e\7_\2\2\u064d"+
		"\u0644\3\2\2\2\u064d\u0648\3\2\2\2\u064d\u064e\3\2\2\2\u064e\u0650\3\2"+
		"\2\2\u064f\u0651\5j\66\2\u0650\u064f\3\2\2\2\u0650\u0651\3\2\2\2\u0651"+
		"\u0653\3\2\2\2\u0652\u0642\3\2\2\2\u0652\u0643\3\2\2\2\u0653i\3\2\2\2"+
		"\u0654\u0656\7\u00a0\2\2\u0655\u0654\3\2\2\2\u0655\u0656\3\2\2\2\u0656"+
		"\u0657\3\2\2\2\u0657\u0658\7\u008b\2\2\u0658\u0659\7\u00cc\2\2\u0659\u065a"+
		"\5\u02ce\u0168\2\u065ak\3\2\2\2\u065b\u065e\7U\2\2\u065c\u065d\7\u012a"+
		"\2\2\u065d\u065f\7\u015f\2\2\u065e\u065c\3\2\2\2\u065e\u065f\3\2\2\2\u065f"+
		"\u0660\3\2\2\2\u0660\u0663\7\u01ba\2\2\u0661\u0664\5n8\2\u0662\u0664\5"+
		"z>\2\u0663\u0661\3\2\2\2\u0663\u0662\3\2\2\2\u0664\u0665\3\2\2\2\u0665"+
		"\u0666\7\u0233\2\2\u0666m\3\2\2\2\u0667\u066a\5\u02b4\u015b\2\u0668\u0669"+
		"\7\u011f\2\2\u0669\u066b\7\u021d\2\2\u066a\u0668\3\2\2\2\u066a\u066b\3"+
		"\2\2\2\u066b\u066d\3\2\2\2\u066c\u066e\5p9\2\u066d\u066c\3\2\2\2\u066d"+
		"\u066e\3\2\2\2\u066eo\3\2\2\2\u066f\u0671\5\u00d6l\2\u0670\u066f\3\2\2"+
		"\2\u0670\u0671\3\2\2\2\u0671\u0674\3\2\2\2\u0672\u0675\5r:\2\u0673\u0675"+
		"\5t;\2\u0674\u0672\3\2\2\2\u0674\u0673\3\2\2\2\u0675\u0677\3\2\2\2\u0676"+
		"\u0678\5x=\2\u0677\u0676\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u0684\3\2\2"+
		"\2\u0679\u067a\7\u0221\2\2\u067a\u067f\5\u008aF\2\u067b\u067c\7\u0227"+
		"\2\2\u067c\u067e\5\u008aF\2\u067d\u067b\3\2\2\2\u067e\u0681\3\2\2\2\u067f"+
		"\u067d\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u0682\3\2\2\2\u0681\u067f\3\2"+
		"\2\2\u0682\u0683\7\u0222\2\2\u0683\u0685\3\2\2\2\u0684\u0679\3\2\2\2\u0684"+
		"\u0685\3\2\2\2\u0685\u0689\3\2\2\2\u0686\u0688\5\u0088E\2\u0687\u0686"+
		"\3\2\2\2\u0688\u068b\3\2\2\2\u0689\u0687\3\2\2\2\u0689\u068a\3\2\2\2\u068a"+
		"q\3\2\2\2\u068b\u0689\3\2\2\2\u068c\u0690\t\2\2\2\u068d\u0691\7\u011c"+
		"\2\2\u068e\u0691\5\u0102\u0082\2\u068f\u0691\5v<\2\u0690\u068d\3\2\2\2"+
		"\u0690\u068e\3\2\2\2\u0690\u068f\3\2\2\2\u0691s\3\2\2\2\u0692\u0693\7"+
		"\u01bc\2\2\u0693\u0694\5\u02e2\u0172\2\u0694u\3\2\2\2\u0695\u0696\7\u01a5"+
		"\2\2\u0696\u0697\7\u011e\2\2\u0697\u069a\5\u02e2\u0172\2\u0698\u0699\7"+
		"\u0115\2\2\u0699\u069b\7\u0117\2\2\u069a\u0698\3\2\2\2\u069a\u069b\3\2"+
		"\2\2\u069bw\3\2\2\2\u069c\u069d\7\u0092\2\2\u069d\u069e\7\u00fd\2\2\u069e"+
		"\u069f\5\u021a\u010e\2\u069f\u06a0\7\u00d5\2\2\u06a0\u06a1\7\u00d1\2\2"+
		"\u06a1\u06a2\7\u01c7\2\2\u06a2\u06a3\t\17\2\2\u06a3y\3\2\2\2\u06a4\u06a5"+
		"\7$\2\2\u06a5\u06a6\5\u02b4\u015b\2\u06a6\u06a8\t\2\2\2\u06a7\u06a9\5"+
		"|?\2\u06a8\u06a7\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06a8\3\2\2\2\u06aa"+
		"\u06ab\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u06ad\7\u0083\2\2\u06ad{\3\2"+
		"\2\2\u06ae\u06b1\5~@\2\u06af\u06b1\5\u0080A\2\u06b0\u06ae\3\2\2\2\u06b0"+
		"\u06af\3\2\2\2\u06b1}\3\2\2\2\u06b2\u06b3\t\20\2\2\u06b3\u06b4\7\u00f1"+
		"\2\2\u06b4\u06b5\5\u0084C\2\u06b5\177\3\2\2\2\u06b6\u06ba\t\21\2\2\u06b7"+
		"\u06bb\5\u0082B\2\u06b8\u06bb\5\u0084C\2\u06b9\u06bb\5\u0086D\2\u06ba"+
		"\u06b7\3\2\2\2\u06ba\u06b8\3\2\2\2\u06ba\u06b9\3\2\2\2\u06bb\u0081\3\2"+
		"\2\2\u06bc\u06bd\7\u014e\2\2\u06bd\u06be\5\u02bc\u015f\2\u06be\u06bf\7"+
		"\u0221\2\2\u06bf\u06c4\5\u00a0Q\2\u06c0\u06c1\7\u0227\2\2\u06c1\u06c3"+
		"\5\u00a0Q\2\u06c2\u06c0\3\2\2\2\u06c3\u06c6\3\2\2\2\u06c4\u06c2\3\2\2"+
		"\2\u06c4\u06c5\3\2\2\2\u06c5\u06c7\3\2\2\2\u06c6\u06c4\3\2\2\2\u06c7\u06c8"+
		"\7\u0222\2\2\u06c8\u06d6\t\2\2\2\u06c9\u06d7\5\u00dan\2\u06ca\u06cc\7"+
		"h\2\2\u06cb\u06ca\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06d0\3\2\2\2\u06cd"+
		"\u06cf\5\u00e8u\2\u06ce\u06cd\3\2\2\2\u06cf\u06d2\3\2\2\2\u06d0\u06ce"+
		"\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1\u06d3\3\2\2\2\u06d2\u06d0\3\2\2\2\u06d3"+
		"\u06d4\5\u0132\u009a\2\u06d4\u06d5\7\u0233\2\2\u06d5\u06d7\3\2\2\2\u06d6"+
		"\u06c9\3\2\2\2\u06d6\u06cb\3\2\2\2\u06d7\u0083\3\2\2\2\u06d8\u06d9\7\u00a7"+
		"\2\2\u06d9\u06e5\5\u02ba\u015e\2\u06da\u06db\7\u0221\2\2\u06db\u06e0\5"+
		"\u00a0Q\2\u06dc\u06dd\7\u0227\2\2\u06dd\u06df\5\u00a0Q\2\u06de\u06dc\3"+
		"\2\2\2\u06df\u06e2\3\2\2\2\u06e0\u06de\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1"+
		"\u06e3\3\2\2\2\u06e2\u06e0\3\2\2\2\u06e3\u06e4\7\u0222\2\2\u06e4\u06e6"+
		"\3\2\2\2\u06e5\u06da\3\2\2\2\u06e5\u06e6\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7"+
		"\u06e8\7\u0165\2\2\u06e8\u06e9\5\u02e2\u0172\2\u06e9\u06f7\t\2\2\2\u06ea"+
		"\u06f8\5\u00dan\2\u06eb\u06ed\7h\2\2\u06ec\u06eb\3\2\2\2\u06ec\u06ed\3"+
		"\2\2\2\u06ed\u06f1\3\2\2\2\u06ee\u06f0\5\u00e8u\2\u06ef\u06ee\3\2\2\2"+
		"\u06f0\u06f3\3\2\2\2\u06f1\u06ef\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u06f4"+
		"\3\2\2\2\u06f3\u06f1\3\2\2\2\u06f4\u06f5\5\u0132\u009a\2\u06f5\u06f6\7"+
		"\u0233\2\2\u06f6\u06f8\3\2\2\2\u06f7\u06ea\3\2\2\2\u06f7\u06ec\3\2\2\2"+
		"\u06f8\u0085\3\2\2\2\u06f9\u06fb\7\u0098\2\2\u06fa\u06f9\3\2\2\2\u06fa"+
		"\u06fb\3\2\2\2\u06fb\u06fd\3\2\2\2\u06fc\u06fe\7\u00c6\2\2\u06fd\u06fc"+
		"\3\2\2\2\u06fd\u06fe\3\2\2\2\u06fe\u06ff\3\2\2\2\u06ff\u0700\7L\2\2\u0700"+
		"\u0701\7\u00a7\2\2\u0701\u0713\5\u02e2\u0172\2\u0702\u0703\7\u0221\2\2"+
		"\u0703\u0704\7\u017b\2\2\u0704\u0705\7\u00bf\2\2\u0705\u0706\7\u012d\2"+
		"\2\u0706\u0707\5\u02e2\u0172\2\u0707\u0708\7\u0227\2\2\u0708\u0709\3\2"+
		"\2\2\u0709\u070e\5\u00a0Q\2\u070a\u070b\7\u0227\2\2\u070b\u070d\5\u00a0"+
		"Q\2\u070c\u070a\3\2\2\2\u070d\u0710\3\2\2\2\u070e\u070c\3\2\2\2\u070e"+
		"\u070f\3\2\2\2\u070f\u0711\3\2\2\2\u0710\u070e\3\2\2\2\u0711\u0712\7\u0222"+
		"\2\2\u0712\u0714\3\2\2\2\u0713\u0702\3\2\2\2\u0713\u0714\3\2\2\2\u0714"+
		"\u0715\3\2\2\2\u0715\u0716\7\u0165\2\2\u0716\u0717\7\u017b\2\2\u0717\u0718"+
		"\7\17\2\2\u0718\u0719\7\u0163\2\2\u0719\u0727\t\2\2\2\u071a\u0728\5\u00da"+
		"n\2\u071b\u071d\7h\2\2\u071c\u071b\3\2\2\2\u071c\u071d\3\2\2\2\u071d\u0721"+
		"\3\2\2\2\u071e\u0720\5\u00e8u\2\u071f\u071e\3\2\2\2\u0720\u0723\3\2\2"+
		"\2\u0721\u071f\3\2\2\2\u0721\u0722\3\2\2\2\u0722\u0724\3\2\2\2\u0723\u0721"+
		"\3\2\2\2\u0724\u0725\5\u0132\u009a\2\u0725\u0726\7\u0233\2\2\u0726\u0728"+
		"\3\2\2\2\u0727\u071a\3\2\2\2\u0727\u071c\3\2\2\2\u0728\u0087\3\2\2\2\u0729"+
		"\u072b\7\u0115\2\2\u072a\u0729\3\2\2\2\u072a\u072b\3\2\2\2\u072b\u072c"+
		"\3\2\2\2\u072c\u072d\t\22\2\2\u072d\u0089\3\2\2\2\u072e\u072f\5\u02fa"+
		"\u017e\2\u072f\u0731\5\u02e2\u0172\2\u0730\u0732\5\u008cG\2\u0731\u0730"+
		"\3\2\2\2\u0731\u0732\3\2\2\2\u0732\u0735\3\2\2\2\u0733\u0735\5\u008eH"+
		"\2\u0734\u072e\3\2\2\2\u0734\u0733\3\2\2\2\u0735\u008b\3\2\2\2\u0736\u0737"+
		"\7\u0092\2\2\u0737\u0738\7\u00fd\2\2\u0738\u0739\5\u021a\u010e\2\u0739"+
		"\u008d\3\2\2\2\u073a\u073c\5\u0088E\2\u073b\u073a\3\2\2\2\u073b\u073c"+
		"\3\2\2\2\u073c\u073e\3\2\2\2\u073d\u073f\5\u0090I\2\u073e\u073d\3\2\2"+
		"\2\u073f\u0740\3\2\2\2\u0740\u073e\3\2\2\2\u0740\u0741\3\2\2\2\u0741\u0744"+
		"\3\2\2\2\u0742\u0743\7\u0227\2\2\u0743\u0745\5\u009cO\2\u0744\u0742\3"+
		"\2\2\2\u0744\u0745\3\2\2\2\u0745\u008f\3\2\2\2\u0746\u074a\5\u0092J\2"+
		"\u0747\u074a\5\u0098M\2\u0748\u074a\5\u009aN\2\u0749\u0746\3\2\2\2\u0749"+
		"\u0747\3\2\2\2\u0749\u0748\3\2\2\2\u074a\u0091\3\2\2\2\u074b\u074e\t\21"+
		"\2\2\u074c\u074f\5\u0094K\2\u074d\u074f\5\u0096L\2\u074e\u074c\3\2\2\2"+
		"\u074e\u074d\3\2\2\2\u074f\u0093\3\2\2\2\u0750\u0751\7\u014e\2\2\u0751"+
		"\u0752\5\u02bc\u015f\2\u0752\u0753\7\u0221\2\2\u0753\u0758\5\u00a0Q\2"+
		"\u0754\u0755\7\u0227\2\2\u0755\u0757\5\u00a0Q\2\u0756\u0754\3\2\2\2\u0757"+
		"\u075a\3\2\2\2\u0758\u0756\3\2\2\2\u0758\u0759\3\2\2\2\u0759\u075b\3\2"+
		"\2\2\u075a\u0758\3\2\2\2\u075b\u075e\7\u0222\2\2\u075c\u075d\t\2\2\2\u075d"+
		"\u075f\5\u00dan\2\u075e\u075c\3\2\2\2\u075e\u075f\3\2\2\2\u075f\u0095"+
		"\3\2\2\2\u0760\u0761\7\u00a7\2\2\u0761\u076d\5\u02ba\u015e\2\u0762\u0763"+
		"\7\u0221\2\2\u0763\u0768\5\u00a0Q\2\u0764\u0765\7\u0227\2\2\u0765\u0767"+
		"\5\u00a0Q\2\u0766\u0764\3\2\2\2\u0767\u076a\3\2\2\2\u0768\u0766\3\2\2"+
		"\2\u0768\u0769\3\2\2\2\u0769\u076b\3\2\2\2\u076a\u0768\3\2\2\2\u076b\u076c"+
		"\7\u0222\2\2\u076c\u076e\3\2\2\2\u076d\u0762\3\2\2\2\u076d\u076e\3\2\2"+
		"\2\u076e\u076f\3\2\2\2\u076f\u0774\7\u0165\2\2\u0770\u0775\5\u02e2\u0172"+
		"\2\u0771\u0772\7\u017b\2\2\u0772\u0773\7\17\2\2\u0773\u0775\7\u0163\2"+
		"\2\u0774\u0770\3\2\2\2\u0774\u0771\3\2\2\2\u0775\u077e\3\2\2\2\u0776\u0777"+
		"\t\2\2\2\u0777\u077f\5\u00dan\2\u0778\u077a\7\u0092\2\2\u0779\u077b\7"+
		"\u01cd\2\2\u077a\u0779\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u077c\3\2\2\2"+
		"\u077c\u077d\7\u00fd\2\2\u077d\u077f\5\u021a\u010e\2\u077e\u0776\3\2\2"+
		"\2\u077e\u0778\3\2\2\2\u077e\u077f\3\2\2\2\u077f\u0097\3\2\2\2\u0780\u0782"+
		"\7\u0098\2\2\u0781\u0780\3\2\2\2\u0781\u0782\3\2\2\2\u0782\u0784\3\2\2"+
		"\2\u0783\u0785\7\u00c6\2\2\u0784\u0783\3\2\2\2\u0784\u0785\3\2\2\2\u0785"+
		"\u0786\3\2\2\2\u0786\u0787\7L\2\2\u0787\u0788\7\u00a7\2\2\u0788\u079a"+
		"\5\u02e2\u0172\2\u0789\u078a\7\u0221\2\2\u078a\u078b\7\u017b\2\2\u078b"+
		"\u078c\7\u00bf\2\2\u078c\u078d\7\u012d\2\2\u078d\u078e\5\u02e2\u0172\2"+
		"\u078e\u078f\7\u0227\2\2\u078f\u0790\3\2\2\2\u0790\u0795\5\u00a0Q\2\u0791"+
		"\u0792\7\u0227\2\2\u0792\u0794\5\u00a0Q\2\u0793\u0791\3\2\2\2\u0794\u0797"+
		"\3\2\2\2\u0795\u0793\3\2\2\2\u0795\u0796\3\2\2\2\u0796\u0798\3\2\2\2\u0797"+
		"\u0795\3\2\2\2\u0798\u0799\7\u0222\2\2\u0799\u079b\3\2\2\2\u079a\u0789"+
		"\3\2\2\2\u079a\u079b\3\2\2\2\u079b\u079c\3\2\2\2\u079c\u079d\7\u0165\2"+
		"\2\u079d\u079e\7\u017b\2\2\u079e\u079f\7\17\2\2\u079f\u07a2\7\u0163\2"+
		"\2\u07a0\u07a1\t\2\2\2\u07a1\u07a3\5\u00dan\2\u07a2\u07a0\3\2\2\2\u07a2"+
		"\u07a3\3\2\2\2\u07a3\u0099\3\2\2\2\u07a4\u07a5\t\20\2\2\u07a5\u07a6\7"+
		"\u00f1\2\2\u07a6\u07a7\5\u0096L\2\u07a7\u009b\3\2\2\2\u07a8\u07a9\7\u0147"+
		"\2\2\u07a9\u07aa\7\u0161\2\2\u07aa\u07ab\7\u0221\2\2\u07ab\u07b0\5\u009e"+
		"P\2\u07ac\u07ad\7\u0227\2\2\u07ad\u07af\5\u009eP\2\u07ae\u07ac\3\2\2\2"+
		"\u07af\u07b2\3\2\2\2\u07b0\u07ae\3\2\2\2\u07b0\u07b1\3\2\2\2\u07b1\u07b3"+
		"\3\2\2\2\u07b2\u07b0\3\2\2\2\u07b3\u07b4\7\u0222\2\2\u07b4\u009d\3\2\2"+
		"\2\u07b5\u07b8\5\u02fa\u017e\2\u07b6\u07b8\7k\2\2\u07b7\u07b5\3\2\2\2"+
		"\u07b7\u07b6\3\2\2\2\u07b8\u009f\3\2\2\2\u07b9\u07ba\5\u02a6\u0154\2\u07ba"+
		"\u07bb\5\u02e2\u0172\2\u07bb\u00a1\3\2\2\2\u07bc\u07bd\7y\2\2\u07bd\u07be"+
		"\7\u017c\2\2\u07be\u07bf\5\u02b6\u015c\2\u07bf\u07c0\7\u0233\2\2\u07c0"+
		"\u00a3\3\2\2\2\u07c1\u07c2\7\t\2\2\u07c2\u07c3\7\u017c\2\2\u07c3\u07c5"+
		"\5\u02b6\u015c\2\u07c4\u07c6\5\u00a8U\2\u07c5\u07c4\3\2\2\2\u07c6\u07c7"+
		"\3\2\2\2\u07c7\u07c5\3\2\2\2\u07c7\u07c8\3\2\2\2\u07c8\u07c9\3\2\2\2\u07c9"+
		"\u07ca\7\u0233\2\2\u07ca\u00a5\3\2\2\2\u07cb\u07cc\7U\2\2\u07cc\u07cd"+
		"\7\u017c\2\2\u07cd\u07d2\5\u02b6\u015c\2\u07ce\u07d1\5\u00aaV\2\u07cf"+
		"\u07d1\5\u00a8U\2\u07d0\u07ce\3\2\2\2\u07d0\u07cf\3\2\2\2\u07d1\u07d4"+
		"\3\2\2\2\u07d2\u07d0\3\2\2\2\u07d2\u07d3\3\2\2\2\u07d3\u07d5\3\2\2\2\u07d4"+
		"\u07d2\3\2\2\2\u07d5\u07d6\7\u0233\2\2\u07d6\u00a7\3\2\2\2\u07d7\u07d8"+
		"\7\u00b8\2\2\u07d8\u07d9\7*\2\2\u07d9\u07e8\7\u021b\2\2\u07da\u07db\7"+
		"\u00ef\2\2\u07db\u07e8\7\u021b\2\2\u07dc\u07e8\7\u010f\2\2\u07dd\u07de"+
		"\7\u00f6\2\2\u07de\u07e8\7\u021b\2\2\u07df\u07e8\7\u0110\2\2\u07e0\u07e8"+
		"\7]\2\2\u07e1\u07e8\7\u010c\2\2\u07e2\u07e3\7,\2\2\u07e3\u07e8\7\u021b"+
		"\2\2\u07e4\u07e8\7\u0109\2\2\u07e5\u07e8\7\u0128\2\2\u07e6\u07e8\7\u0113"+
		"\2\2\u07e7\u07d7\3\2\2\2\u07e7\u07da\3\2\2\2\u07e7\u07dc\3\2\2\2\u07e7"+
		"\u07dd\3\2\2\2\u07e7\u07df\3\2\2\2\u07e7\u07e0\3\2\2\2\u07e7\u07e1\3\2"+
		"\2\2\u07e7\u07e2\3\2\2\2\u07e7\u07e4\3\2\2\2\u07e7\u07e5\3\2\2\2\u07e7"+
		"\u07e6\3\2\2\2\u07e8\u00a9\3\2\2\2\u07e9\u07ea\7\u0195\2\2\u07ea\u07eb"+
		"\7\u01da\2\2\u07eb\u07ec\7\u021b\2\2\u07ec\u00ab\3\2\2\2\u07ed\u07ef\7"+
		"U\2\2\u07ee\u07f0\7\u01be\2\2\u07ef\u07ee\3\2\2\2\u07ef\u07f0\3\2\2\2"+
		"\u07f0\u07f1\3\2\2\2\u07f1\u07f2\7\u00bb\2\2\u07f2\u07f3\5\u02c2\u0162"+
		"\2\u07f3\u07f4\7\u0123\2\2\u07f4\u07f5\5\u02ce\u0168\2\u07f5\u07f6\7\u0221"+
		"\2\2\u07f6\u07fb\5\u02cc\u0167\2\u07f7\u07f8\7\u0227\2\2\u07f8\u07fa\5"+
		"\u02cc\u0167\2\u07f9\u07f7\3\2\2\2\u07fa\u07fd\3\2\2\2\u07fb\u07f9\3\2"+
		"\2\2\u07fb\u07fc\3\2\2\2\u07fc\u07fe\3\2\2\2\u07fd\u07fb\3\2\2\2\u07fe"+
		"\u0801\7\u0222\2\2\u07ff\u0800\7F\2\2\u0800\u0802\7\u019a\2\2\u0801\u07ff"+
		"\3\2\2\2\u0801\u0802\3\2\2\2\u0802\u0803\3\2\2\2\u0803\u0804\7\u0233\2"+
		"\2\u0804\u00ad\3\2\2\2\u0805\u0806\7\t\2\2\u0806\u0807\7\u00bb\2\2\u0807"+
		"\u0808\5\u02c2\u0162\2\u0808\u0809\7\u015e\2\2\u0809\u080a\7\u01b2\2\2"+
		"\u080a\u080b\5\u02c2\u0162\2\u080b\u080c\7\u0233\2\2\u080c\u00af\3\2\2"+
		"\2\u080d\u080e\7y\2\2\u080e\u080f\7\u00bb\2\2\u080f\u0810\5\u02c2\u0162"+
		"\2\u0810\u0811\7\u0233\2\2\u0811\u00b1\3\2\2\2\u0812\u0815\7U\2\2\u0813"+
		"\u0814\7\u00a8\2\2\u0814\u0816\7\u01a6\2\2\u0815\u0813\3\2\2\2\u0815\u0816"+
		"\3\2\2\2\u0816\u0817\3\2\2\2\u0817\u0818\7\u01a5\2\2\u0818\u0819\5\u02ce"+
		"\u0168\2\u0819\u081a\7\u0221\2\2\u081a\u081b\5\u02cc\u0167\2\u081b\u0822"+
		"\5\u02e4\u0173\2\u081c\u081d\7\u0227\2\2\u081d\u081e\5\u02cc\u0167\2\u081e"+
		"\u081f\5\u02e4\u0173\2\u081f\u0821\3\2\2\2\u0820\u081c\3\2\2\2\u0821\u0824"+
		"\3\2\2\2\u0822\u0820\3\2\2\2\u0822\u0823\3\2\2\2\u0823\u0825\3\2\2\2\u0824"+
		"\u0822\3\2\2\2\u0825\u082a\7\u0222\2\2\u0826\u0827\7\u0123\2\2\u0827\u0828"+
		"\7@\2\2\u0828\u0829\t\23\2\2\u0829\u082b\7\u016e\2\2\u082a\u0826\3\2\2"+
		"\2\u082a\u082b\3\2\2\2\u082b\u082f\3\2\2\2\u082c\u082d\7\u0179\2\2\u082d"+
		"\u082e\7V\2\2\u082e\u0830\t\24\2\2\u082f\u082c\3\2\2\2\u082f\u0830\3\2"+
		"\2\2\u0830\u0839\3\2\2\2\u0831\u0832\7\u0137\2\2\u0832\u0838\7\u021b\2"+
		"\2\u0833\u0834\7\u0139\2\2\u0834\u0838\7\u021b\2\2\u0835\u0836\7\u00c1"+
		"\2\2\u0836\u0838\7\u021b\2\2\u0837\u0831\3\2\2\2\u0837\u0833\3\2\2\2\u0837"+
		"\u0835\3\2\2\2\u0838\u083b\3\2\2\2\u0839\u0837\3\2\2\2\u0839\u083a\3\2"+
		"\2\2\u083a\u085a\3\2\2\2\u083b\u0839\3\2\2\2\u083c\u083d\7\u019b\2\2\u083d"+
		"\u0855\7\u0221\2\2\u083e\u083f\7\u00c0\2\2\u083f\u0856\5\u00b4[\2\u0840"+
		"\u0841\7\u0107\2\2\u0841\u0856\5\u00b4[\2\u0842\u0843\7\u00f3\2\2\u0843"+
		"\u0856\t\25\2\2\u0844\u0845\7\u0138\2\2\u0845\u0856\7\u021b\2\2\u0846"+
		"\u0847\7\u00a4\2\2\u0847\u0856\7\u021b\2\2\u0848\u0849\7\u00a3\2\2\u0849"+
		"\u084a\7\u00ad\2\2\u084a\u0856\7\u021b\2\2\u084b\u084e\7\u0125\2\2\u084c"+
		"\u084f\5\u00b4[\2\u084d\u084f\7\u0117\2\2\u084e\u084c\3\2\2\2\u084e\u084d"+
		"\3\2\2\2\u084f\u0856\3\2\2\2\u0850\u0851\7(\2\2\u0851\u0856\t\26\2\2\u0852"+
		"\u0853\7\u009b\2\2\u0853\u0856\t\27\2\2\u0854\u0856\7\u0082\2\2\u0855"+
		"\u083e\3\2\2\2\u0855\u0840\3\2\2\2\u0855\u0842\3\2\2\2\u0855\u0844\3\2"+
		"\2\2\u0855\u0846\3\2\2\2\u0855\u0848\3\2\2\2\u0855\u084b\3\2\2\2\u0855"+
		"\u0850\3\2\2\2\u0855\u0852\3\2\2\2\u0855\u0854\3\2\2\2\u0856\u0857\3\2"+
		"\2\2\u0857\u0855\3\2\2\2\u0857\u0858\3\2\2\2\u0858\u0859\3\2\2\2\u0859"+
		"\u085b\7\u0222\2\2\u085a\u083c\3\2\2\2\u085a\u085b\3\2\2\2\u085b\u085e"+
		"\3\2\2\2\u085c\u085d\7\u01a4\2\2\u085d\u085f\7\u023e\2\2\u085e\u085c\3"+
		"\2\2\2\u085e\u085f\3\2\2\2\u085f\u0861\3\2\2\2\u0860\u0862\t\30\2\2\u0861"+
		"\u0860\3\2\2\2\u0861\u0862\3\2\2\2\u0862\u0870\3\2\2\2\u0863\u086d\7E"+
		"\2\2\u0864\u086e\7\31\2\2\u0865\u086b\7\u00a2\2\2\u0866\u086c\7\u0121"+
		"\2\2\u0867\u0869\t\31\2\2\u0868\u086a\t\32\2\2\u0869\u0868\3\2\2\2\u0869"+
		"\u086a\3\2\2\2\u086a\u086c\3\2\2\2\u086b\u0866\3\2\2\2\u086b\u0867\3\2"+
		"\2\2\u086c\u086e\3\2\2\2\u086d\u0864\3\2\2\2\u086d\u0865\3\2\2\2\u086d"+
		"\u086e\3\2\2\2\u086e\u0871\3\2\2\2\u086f\u0871\7\u010a\2\2\u0870\u0863"+
		"\3\2\2\2\u0870\u086f\3\2\2\2\u0870\u0871\3\2\2\2\u0871\u0872\3\2\2\2\u0872"+
		"\u0873\7\u0233\2\2\u0873\u00b3\3\2\2\2\u0874\u0875\7\u021b\2\2\u0875\u0876"+
		"\7\u023e\2\2\u0876\u00b5\3\2\2\2\u0877\u0878\7y\2\2\u0878\u0879\7\u01a5"+
		"\2\2\u0879\u087a\5\u02ce\u0168\2\u087a\u087b\7\u0233\2\2\u087b\u00b7\3"+
		"\2\2\2\u087c\u087d\7?\2\2\u087d\u087e\7\u0123\2\2\u087e\u087f\7=\2\2\u087f"+
		"\u0880\5\u02ce\u0168\2\u0880\u0881\7\u021a\2\2\u0881\u0882\5\u02cc\u0167"+
		"\2\u0882\u0883\7\u00ce\2\2\u0883\u0884\5\u02f8\u017d\2\u0884\u00b9\3\2"+
		"\2\2\u0885\u0888\7U\2\2\u0886\u0887\7\u012a\2\2\u0887\u0889\7\u015f\2"+
		"\2\u0888\u0886\3\2\2\2\u0888\u0889\3\2\2\2\u0889\u088a\3\2\2\2\u088a\u088b"+
		"\7\u014f\2\2\u088b\u088c\7\u01a3\2\2\u088c\u088d\5\u02d2\u016a\2\u088d"+
		"\u0891\7\u00a2\2\2\u088e\u088f\5\u029e\u0150\2\u088f\u0890\7\u021a\2\2"+
		"\u0890\u0892\3\2\2\2\u0891\u088e\3\2\2\2\u0891\u0892\3\2\2\2\u0892\u0893"+
		"\3\2\2\2\u0893\u0896\5\u02d4\u016b\2\u0894\u0895\7\u0229\2\2\u0895\u0897"+
		"\5\u02ca\u0166\2\u0896\u0894\3\2\2\2\u0896\u0897\3\2\2\2\u0897\u08b0\3"+
		"\2\2\2\u0898\u089b\7U\2\2\u0899\u089a\7\u012a\2\2\u089a\u089c\7\u015f"+
		"\2\2\u089b\u0899\3\2\2\2\u089b\u089c\3\2\2\2\u089c\u089d\3\2\2\2\u089d"+
		"\u08a1\7\u01a3\2\2\u089e\u089f\5\u029e\u0150\2\u089f\u08a0\7\u021a\2\2"+
		"\u08a0\u08a2\3\2\2\2\u08a1\u089e\3\2\2\2\u08a1\u08a2\3\2\2\2\u08a2\u08a3"+
		"\3\2\2\2\u08a3\u08a4\5\u02d2\u016a\2\u08a4\u08a8\7\u00a2\2\2\u08a5\u08a6"+
		"\5\u029e\u0150\2\u08a6\u08a7\7\u021a\2\2\u08a7\u08a9\3\2\2\2\u08a8\u08a5"+
		"\3\2\2\2\u08a8\u08a9\3\2\2\2\u08a9\u08aa\3\2\2\2\u08aa\u08ad\5\u02d4\u016b"+
		"\2\u08ab\u08ac\7\u0229\2\2\u08ac\u08ae\5\u02ca\u0166\2\u08ad\u08ab\3\2"+
		"\2\2\u08ad\u08ae\3\2\2\2\u08ae\u08b0\3\2\2\2\u08af\u0885\3\2\2\2\u08af"+
		"\u0898\3\2\2\2\u08b0\u00bb\3\2\2\2\u08b1\u08b2\7?\2\2\u08b2\u08b3\7\u0123"+
		"\2\2\u08b3\u08b4\7\u01a5\2\2\u08b4\u08b5\5\u02ce\u0168\2\u08b5\u08b6\7"+
		"\u00ce\2\2\u08b6\u08b7\5\u02f8\u017d\2\u08b7\u00bd\3\2\2\2\u08b8\u08b9"+
		"\7\t\2\2\u08b9\u08ba\7\u01a5\2\2\u08ba\u08bf\5\u02ce\u0168\2\u08bb\u08c0"+
		"\5\u00c0a\2\u08bc\u08c0\5\u00c4c\2\u08bd\u08c0\5\u00c6d\2\u08be\u08c0"+
		"\5\u00c8e\2\u08bf\u08bb\3\2\2\2\u08bf\u08bc\3\2\2\2\u08bf\u08bd\3\2\2"+
		"\2\u08bf\u08be\3\2\2\2\u08c0\u00bf\3\2\2\2\u08c1\u08c4\7\3\2\2\u08c2\u08c3"+
		"\7J\2\2\u08c3\u08c5\5\u02b0\u0159\2\u08c4\u08c2\3\2\2\2\u08c4\u08c5\3"+
		"\2\2\2\u08c5\u08ca\3\2\2\2\u08c6\u08cb\5\u00d2j\2\u08c7\u08cb\5\u00ca"+
		"f\2\u08c8\u08cb\5\u00d0i\2\u08c9\u08cb\5\u00c2b\2\u08ca\u08c6\3\2\2\2"+
		"\u08ca\u08c7\3\2\2\2\u08ca\u08c8\3\2\2\2\u08ca\u08c9\3\2\2\2\u08cb\u00c1"+
		"\3\2\2\2\u08cc\u08cd\7\65\2\2\u08cd\u08ce\7\u0221\2\2\u08ce\u08cf\5\u0216"+
		"\u010c\2\u08cf\u08d1\7\u0222\2\2\u08d0\u08d2\7t\2\2\u08d1\u08d0\3\2\2"+
		"\2\u08d1\u08d2\3\2\2\2\u08d2\u00c3\3\2\2\2\u08d3\u08d4\7y\2\2\u08d4\u08d5"+
		"\7J\2\2\u08d5\u08d6\5\u02b0\u0159\2\u08d6\u00c5\3\2\2\2\u08d7\u08d8\7"+
		"\u0080\2\2\u08d8\u08d9\7J\2\2\u08d9\u08da\5\u02b0\u0159\2\u08da\u00c7"+
		"\3\2\2\2\u08db\u08dc\7t\2\2\u08dc\u08dd\7J\2\2\u08dd\u08de\5\u02b0\u0159"+
		"\2\u08de\u00c9\3\2\2\2\u08df\u08e0\7\u00a1\2\2\u08e0\u08e1\7\u00d4\2\2"+
		"\u08e1\u08e2\7\u0221\2\2\u08e2\u08e7\5\u02cc\u0167\2\u08e3\u08e4\7\u0227"+
		"\2\2\u08e4\u08e6\5\u02cc\u0167\2\u08e5\u08e3\3\2\2\2\u08e6\u08e9\3\2\2"+
		"\2\u08e7\u08e5\3\2\2\2\u08e7\u08e8\3\2\2\2\u08e8\u08ea\3\2\2\2\u08e9\u08e7"+
		"\3\2\2\2\u08ea\u08eb\7\u0222\2\2\u08eb\u08ed\5\u00ccg\2\u08ec\u08ee\5"+
		"\u00ceh\2\u08ed\u08ec\3\2\2\2\u08ed\u08ee\3\2\2\2\u08ee\u00cb\3\2\2\2"+
		"\u08ef\u08f0\7\u0159\2\2\u08f0\u08f1\5\u02ce\u0168\2\u08f1\u08f2\7\u0221"+
		"\2\2\u08f2\u08f7\5\u02cc\u0167\2\u08f3\u08f4\7\u0227\2\2\u08f4\u08f6\5"+
		"\u02cc\u0167\2\u08f5\u08f3\3\2\2\2\u08f6\u08f9\3\2\2\2\u08f7\u08f5\3\2"+
		"\2\2\u08f7\u08f8\3\2\2\2\u08f8\u08fa\3\2\2\2\u08f9\u08f7\3\2\2\2\u08fa"+
		"\u08fb\7\u0222\2\2\u08fb\u00cd\3\2\2\2\u08fc\u08fd\7\u0123\2\2\u08fd\u0901"+
		"\7o\2\2\u08fe\u0902\7/\2\2\u08ff\u0900\7\u0182\2\2\u0900\u0902\7\u0117"+
		"\2\2\u0901\u08fe\3\2\2\2\u0901\u08ff\3\2\2\2\u0902\u00cf\3\2\2\2\u0903"+
		"\u0904\7\u01be\2\2\u0904\u0905\7\u0221\2\2\u0905\u090a\5\u02cc\u0167\2"+
		"\u0906\u0907\7\u0227\2\2\u0907\u0909\5\u02cc\u0167\2\u0908\u0906\3\2\2"+
		"\2\u0909\u090c\3\2\2\2\u090a\u0908\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u090d"+
		"\3\2\2\2\u090c\u090a\3\2\2\2\u090d\u090e\7\u0222\2\2\u090e\u00d1\3\2\2"+
		"\2\u090f\u0910\7\u014c\2\2\u0910\u0911\7\u00d4\2\2\u0911\u0912\7\u0221"+
		"\2\2\u0912\u0917\5\u02cc\u0167\2\u0913\u0914\7\u0227\2\2\u0914\u0916\5"+
		"\u02cc\u0167\2\u0915\u0913\3\2\2\2\u0916\u0919\3\2\2\2\u0917\u0915\3\2"+
		"\2\2\u0917\u0918\3\2\2\2\u0918\u091a\3\2\2\2\u0919\u0917\3\2\2\2\u091a"+
		"\u091b\7\u0222\2\2\u091b\u00d3\3\2\2\2\u091c\u091d\7\34\2\2\u091d\u091e"+
		"\5\u0104\u0083\2\u091e\u091f\7\u0083\2\2\u091f\u0920\7\u0233\2\2\u0920"+
		"\u00d5\3\2\2\2\u0921\u0922\7\25\2\2\u0922\u0923\t\33\2\2\u0923\u00d7\3"+
		"\2\2\2\u0924\u0925\5\u02fa\u017e\2\u0925\u0926\7\u0235\2\2\u0926\u0927"+
		"\5\u021a\u010e\2\u0927\u00d9\3\2\2\2\u0928\u092b\7\u00d5\2\2\u0929\u092c"+
		"\5\u00dco\2\u092a\u092c\5\u00dep\2\u092b\u0929\3\2\2\2\u092b\u092a\3\2"+
		"\2\2\u092c\u00db\3\2\2\2\u092d\u092e\7\u00d1\2\2\u092e\u092f\7\u00fd\2"+
		"\2\u092f\u0930\7\u021d\2\2\u0930\u00dd\3\2\2\2\u0931\u0934\7\67\2\2\u0932"+
		"\u0933\7\u00fd\2\2\u0933\u0935\7\u021d\2\2\u0934\u0932\3\2\2\2\u0934\u0935"+
		"\3\2\2\2\u0935\u0936\3\2\2\2\u0936\u0937\7\u00db\2\2\u0937\u0939\5\u02fa"+
		"\u017e\2\u0938\u093a\5\u00e0q\2\u0939\u0938\3\2\2\2\u0939\u093a\3\2\2"+
		"\2\u093a\u093d\3\2\2\2\u093b\u093c\7\u01da\2\2\u093c\u093e\7N\2\2\u093d"+
		"\u093b\3\2\2\2\u093d\u093e\3\2\2\2\u093e\u0940\3\2\2\2\u093f\u0941\5\u00e2"+
		"r\2\u0940\u093f\3\2\2\2\u0940\u0941\3\2\2\2\u0941\u00df\3\2\2\2\u0942"+
		"\u0943\7\5\2\2\u0943\u0944\7\u00bf\2\2\u0944\u0945\7\u0221\2\2\u0945\u0946"+
		"\5\u0218\u010d\2\u0946\u0947\7\u0222\2\2\u0947\u00e1\3\2\2\2\u0948\u0949"+
		"\7\u0132\2\2\u0949\u094e\7\u0221\2\2\u094a\u094f\5\u0218\u010d\2\u094b"+
		"\u094c\7\u021a\2\2\u094c\u094d\7\u021a\2\2\u094d\u094f\7\u021a\2\2\u094e"+
		"\u094a\3\2\2\2\u094e\u094b\3\2\2\2\u094f\u0950\3\2\2\2\u0950\u0951\7\u0222"+
		"\2\2\u0951\u00e3\3\2\2\2\u0952\u0956\5\u02a6\u0154\2\u0953\u0955\t\34"+
		"\2\2\u0954\u0953\3\2\2\2\u0955\u0958\3\2\2\2\u0956\u0954\3\2\2\2\u0956"+
		"\u0957\3\2\2\2\u0957\u095a\3\2\2\2\u0958\u0956\3\2\2\2\u0959\u095b\5\u02e2"+
		"\u0172\2\u095a\u0959\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u095d\3\2\2\2\u095c"+
		"\u095e\5\u00e6t\2\u095d\u095c\3\2\2\2\u095d\u095e\3\2\2\2\u095e\u00e5"+
		"\3\2\2\2\u095f\u0960\t\35\2\2\u0960\u0961\5\u021a\u010e\2\u0961\u00e7"+
		"\3\2\2\2\u0962\u096d\5\u00eav\2\u0963\u096d\5\u00ecw\2\u0964\u096d\5\u00ee"+
		"x\2\u0965\u096d\5\u00f2z\2\u0966\u096d\5\u00f4{\2\u0967\u096d\5\u00fc"+
		"\177\2\u0968\u096d\5 \21\2\u0969\u096d\5\"\22\2\u096a\u096d\5,\27\2\u096b"+
		"\u096d\5*\26\2\u096c\u0962\3\2\2\2\u096c\u0963\3\2\2\2\u096c\u0964\3\2"+
		"\2\2\u096c\u0965\3\2\2\2\u096c\u0966\3\2\2\2\u096c\u0967\3\2\2\2\u096c"+
		"\u0968\3\2\2\2\u096c\u0969\3\2\2\2\u096c\u096a\3\2\2\2\u096c\u096b\3\2"+
		"\2\2\u096d\u00e9\3\2\2\2\u096e\u0970\5\u02fa\u017e\2\u096f\u0971\7I\2"+
		"\2\u0970\u096f\3\2\2\2\u0970\u0971\3\2\2\2\u0971\u0972\3\2\2\2\u0972\u0975"+
		"\5\u02e2\u0172\2\u0973\u0974\7\u0115\2\2\u0974\u0976\7\u0117\2\2\u0975"+
		"\u0973\3\2\2\2\u0975\u0976\3\2\2\2\u0976\u0978\3\2\2\2\u0977\u0979\5\u00e6"+
		"t\2\u0978\u0977\3\2\2\2\u0978\u0979\3\2\2\2\u0979\u097a\3\2\2\2\u097a"+
		"\u097b\7\u0233\2\2\u097b\u00eb\3\2\2\2\u097c\u097d\7\u01a0\2\2\u097d\u097e"+
		"\5\u02fa\u017e\2\u097e\u097f\7\u00ce\2\2\u097f\u0985\5\u02e2\u0172\2\u0980"+
		"\u0981\7\u0152\2\2\u0981\u0982\5\u021a\u010e\2\u0982\u0983\7\u0219\2\2"+
		"\u0983\u0984\5\u021a\u010e\2\u0984\u0986\3\2\2\2\u0985\u0980\3\2\2\2\u0985"+
		"\u0986\3\2\2\2\u0986\u0989\3\2\2\2\u0987\u0988\7\u0115\2\2\u0988\u098a"+
		"\7\u0117\2\2\u0989\u0987\3\2\2\2\u0989\u098a\3\2\2\2\u098a\u098b\3\2\2"+
		"\2\u098b\u098c\7\u0233\2\2\u098c\u00ed\3\2\2\2\u098d\u098e\7[\2\2\u098e"+
		"\u099a\5\u02fa\u017e\2\u098f\u0990\7\u0221\2\2\u0990\u0995\5\u00f0y\2"+
		"\u0991\u0992\7\u0227\2\2\u0992\u0994\5\u00f0y\2\u0993\u0991\3\2\2\2\u0994"+
		"\u0997\3\2\2\2\u0995\u0993\3\2\2\2\u0995\u0996\3\2\2\2\u0996\u0998\3\2"+
		"\2\2\u0997\u0995\3\2\2\2\u0998\u0999\7\u0222\2\2\u0999\u099b\3\2\2\2\u099a"+
		"\u098f\3\2\2\2\u099a\u099b\3\2\2\2\u099b\u099e\3\2\2\2\u099c\u099d\7\u0165"+
		"\2\2\u099d\u099f\5\u02e2\u0172\2\u099e\u099c\3\2\2\2\u099e\u099f\3\2\2"+
		"\2\u099f\u09a2\3\2\2\2\u09a0\u09a1\7\u00ce\2\2\u09a1\u09a3\5\u015e\u00b0"+
		"\2\u09a2\u09a0\3\2\2\2\u09a2\u09a3\3\2\2\2\u09a3\u09a4\3\2\2\2\u09a4\u09a5"+
		"\7\u0233\2\2\u09a5\u00ef\3\2\2\2\u09a6\u09ab\5\u02a6\u0154\2\u09a7\u09a9"+
		"\7\u00bf\2\2\u09a8\u09a7\3\2\2\2\u09a8\u09a9\3\2\2\2\u09a9\u09aa\3\2\2"+
		"\2\u09aa\u09ac\5\u02e2\u0172\2\u09ab\u09a8\3\2\2\2\u09ab\u09ac\3\2\2\2"+
		"\u09ac\u09ae\3\2\2\2\u09ad\u09af\5\u00e6t\2\u09ae\u09ad\3\2\2\2\u09ae"+
		"\u09af\3\2\2\2\u09af\u00f1\3\2\2\2\u09b0\u09b1\5\u02fa\u017e\2\u09b1\u09b2"+
		"\7\u0089\2\2\u09b2\u09b3\7\u0233\2\2\u09b3\u00f3\3\2\2\2\u09b4\u09d3\7"+
		"\u0147\2\2\u09b5\u09d4\7\u017f\2\2\u09b6\u09d4\7\30\2\2\u09b7\u09b8\7"+
		"\u008a\2\2\u09b8\u09b9\7\u0221\2\2\u09b9\u09ba\5\u02b8\u015d\2\u09ba\u09bb"+
		"\7\u0227\2\2\u09bb\u09bc\5\u02f6\u017c\2\u09bc\u09bd\7\u0222\2\2\u09bd"+
		"\u09d4\3\2\2\2\u09be\u09bf\7\u00c2\2\2\u09bf\u09c0\7\u0221\2\2\u09c0\u09c1"+
		"\5\u02fa\u017e\2\u09c1\u09c2\7\u0227\2\2\u09c2\u09c3\5\u021a\u010e\2\u09c3"+
		"\u09c4\7\u0222\2\2\u09c4\u09d4\3\2\2\2\u09c5\u09c6\7\u0161\2\2\u09c6\u09c9"+
		"\7\u0221\2\2\u09c7\u09ca\5\u02fa\u017e\2\u09c8\u09ca\7k\2\2\u09c9\u09c7"+
		"\3\2\2\2\u09c9\u09c8\3\2\2\2\u09ca\u09cd\3\2\2\2\u09cb\u09cc\7\u0227\2"+
		"\2\u09cc\u09ce\5\u02fa\u017e\2\u09cd\u09cb\3\2\2\2\u09ce\u09cf\3\2\2\2"+
		"\u09cf\u09cd\3\2\2\2\u09cf\u09d0\3\2\2\2\u09d0\u09d1\3\2\2\2\u09d1\u09d2"+
		"\7\u0222\2\2\u09d2\u09d4\3\2\2\2\u09d3\u09b5\3\2\2\2\u09d3\u09b6\3\2\2"+
		"\2\u09d3\u09b7\3\2\2\2\u09d3\u09be\3\2\2\2\u09d3\u09c5\3\2\2\2\u09d4\u09d5"+
		"\3\2\2\2\u09d5\u09d6\7\u0233\2\2\u09d6\u00f5\3\2\2\2\u09d7\u09d8\7\u0156"+
		"\2\2\u09d8\u09d9\7\u0221\2\2\u09d9\u09de\5\u00f8}\2\u09da\u09db\7\u0227"+
		"\2\2\u09db\u09dd\5\u00f8}\2\u09dc\u09da\3\2\2\2\u09dd\u09e0\3\2\2\2\u09de"+
		"\u09dc\3\2\2\2\u09de\u09df\3\2\2\2\u09df\u09e1\3\2\2\2\u09e0\u09de\3\2"+
		"\2\2\u09e1\u09e2\7\u0222\2\2\u09e2\u00f7\3\2\2\2\u09e3\u09e5\5\u02cc\u0167"+
		"\2\u09e4\u09e6\5\u02e2\u0172\2\u09e5\u09e4\3\2\2\2\u09e5\u09e6\3\2\2\2"+
		"\u09e6\u09e9\3\2\2\2\u09e7\u09e8\7\u0115\2\2\u09e8\u09ea\7\u0117\2\2\u09e9"+
		"\u09e7\3\2\2\2\u09e9\u09ea\3\2\2\2\u09ea\u09ec\3\2\2\2\u09eb\u09ed\5\u00e6"+
		"t\2\u09ec\u09eb\3\2\2\2\u09ec\u09ed\3\2\2\2\u09ed\u00f9\3\2\2\2\u09ee"+
		"\u09ef\7\u015b\2\2\u09ef\u09f2\7[\2\2\u09f0\u09f1\7\u0165\2\2\u09f1\u09f3"+
		"\5\u02e2\u0172\2\u09f2\u09f0\3\2\2\2\u09f2\u09f3\3\2\2\2\u09f3\u00fb\3"+
		"\2\2\2\u09f4\u09f5\7\u01ba\2\2\u09f5\u09f6\5\u02fa\u017e\2\u09f6\u09fb"+
		"\7\u00ce\2\2\u09f7\u09fc\5\u00fe\u0080\2\u09f8\u09fc\5\u0102\u0082\2\u09f9"+
		"\u09fc\5\u00f6|\2\u09fa\u09fc\5\u00fa~\2\u09fb\u09f7\3\2\2\2\u09fb\u09f8"+
		"\3\2\2\2\u09fb\u09f9\3\2\2\2\u09fb\u09fa\3\2\2\2\u09fc\u09fd\3\2\2\2\u09fd"+
		"\u09fe\7\u0233\2\2\u09fe\u00fd\3\2\2\2\u09ff\u0a00\7\u01a5\2\2\u0a00\u0a01"+
		"\7\u011e\2\2\u0a01\u0a03\5\u02e2\u0172\2\u0a02\u0a04\5\u0100\u0081\2\u0a03"+
		"\u0a02\3\2\2\2\u0a03\u0a04\3\2\2\2\u0a04\u0a07\3\2\2\2\u0a05\u0a06\7\u0115"+
		"\2\2\u0a06\u0a08\7\u0117\2\2\u0a07\u0a05\3\2\2\2\u0a07\u0a08\3\2\2\2\u0a08"+
		"\u00ff\3\2\2\2\u0a09\u0a0c\7\u00ba\2\2\u0a0a\u0a0c\7\u00bb\2\2\u0a0b\u0a09"+
		"\3\2\2\2\u0a0b\u0a0a\3\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d\u0a0e\7*\2\2\u0a0e"+
		"\u0a0f\5\u02e2\u0172\2\u0a0f\u0101\3\2\2\2\u0a10\u0a14\7\u01ce\2\2\u0a11"+
		"\u0a12\7\u01cf\2\2\u0a12\u0a14\7\16\2\2\u0a13\u0a10\3\2\2\2\u0a13\u0a11"+
		"\3\2\2\2\u0a14\u0a15\3\2\2\2\u0a15\u0a16\7\u0221\2\2\u0a16\u0a17\5\u021a"+
		"\u010e\2\u0a17\u0a18\7\u0222\2\2\u0a18\u0a19\7\u011e\2\2\u0a19\u0a1c\5"+
		"\u02e2\u0172\2\u0a1a\u0a1b\7\u0115\2\2\u0a1b\u0a1d\7\u0117\2\2\u0a1c\u0a1a"+
		"\3\2\2\2\u0a1c\u0a1d\3\2\2\2\u0a1d\u0103\3\2\2\2\u0a1e\u0a1f\5\u0108\u0085"+
		"\2\u0a1f\u0a20\t\36\2\2\u0a20\u0a23\3\2\2\2\u0a21\u0a23\5\u0106\u0084"+
		"\2\u0a22\u0a1e\3\2\2\2\u0a22\u0a21\3\2\2\2\u0a23\u0a24\3\2\2\2\u0a24\u0a22"+
		"\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0105\3\2\2\2\u0a26\u0a27\7\u0231\2"+
		"\2\u0a27\u0a28\7\u0231\2\2\u0a28\u0a29\5\u02b2\u015a\2\u0a29\u0a2a\7\u0230"+
		"\2\2\u0a2a\u0a2b\7\u0230\2\2\u0a2b\u0107\3\2\2\2\u0a2c\u0a2d\7U\2\2\u0a2d"+
		"\u0a48\5\u010a\u0086\2\u0a2e\u0a2f\7\t\2\2\u0a2f\u0a48\5\u010a\u0086\2"+
		"\u0a30\u0a32\7\u00aa\2\2\u0a31\u0a33\7\b\2\2\u0a32\u0a31\3\2\2\2\u0a32"+
		"\u0a33\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u0a48\5\u010a\u0086\2\u0a35\u0a36"+
		"\7\u01b9\2\2\u0a36\u0a48\5\u010a\u0086\2\u0a37\u0a48\5\u0132\u009a\2\u0a38"+
		"\u0a48\5\u0138\u009d\2\u0a39\u0a48\5\u010c\u0087\2\u0a3a\u0a48\5\u010e"+
		"\u0088\2\u0a3b\u0a48\5\u0110\u0089\2\u0a3c\u0a48\5\u0112\u008a\2\u0a3d"+
		"\u0a48\5\u0114\u008b\2\u0a3e\u0a48\5\u011a\u008e\2\u0a3f\u0a48\5\u011e"+
		"\u0090\2\u0a40\u0a48\5\u0128\u0095\2\u0a41\u0a48\5\u012a\u0096\2\u0a42"+
		"\u0a48\5\u012c\u0097\2\u0a43\u0a48\5\u023a\u011e\2\u0a44\u0a48\5\u013a"+
		"\u009e\2\u0a45\u0a48\5\u012e\u0098\2\u0a46\u0a48\5\u0130\u0099\2\u0a47"+
		"\u0a2c\3\2\2\2\u0a47\u0a2e\3\2\2\2\u0a47\u0a30\3\2\2\2\u0a47\u0a35\3\2"+
		"\2\2\u0a47\u0a37\3\2\2\2\u0a47\u0a38\3\2\2\2\u0a47\u0a39\3\2\2\2\u0a47"+
		"\u0a3a\3\2\2\2\u0a47\u0a3b\3\2\2\2\u0a47\u0a3c\3\2\2\2\u0a47\u0a3d\3\2"+
		"\2\2\u0a47\u0a3e\3\2\2\2\u0a47\u0a3f\3\2\2\2\u0a47\u0a40\3\2\2\2\u0a47"+
		"\u0a41\3\2\2\2\u0a47\u0a42\3\2\2\2\u0a47\u0a43\3\2\2\2\u0a47\u0a44\3\2"+
		"\2\2\u0a47\u0a45\3\2\2\2\u0a47\u0a46\3\2\2\2\u0a48\u0109\3\2\2\2\u0a49"+
		"\u0a4b\n\37\2\2\u0a4a\u0a49\3\2\2\2\u0a4b\u0a4c\3\2\2\2\u0a4c\u0a4a\3"+
		"\2\2\2\u0a4c\u0a4d\3\2\2\2\u0a4d\u010b\3\2\2\2\u0a4e\u0a51\5\u02ec\u0177"+
		"\2\u0a4f\u0a51\5\u02ea\u0176\2\u0a50\u0a4e\3\2\2\2\u0a50\u0a4f\3\2\2\2"+
		"\u0a51\u0a52\3\2\2\2\u0a52\u0a53\7\u022a\2\2\u0a53\u0a54\5\u021a\u010e"+
		"\2\u0a54\u010d\3\2\2\2\u0a55\u0a57\7O\2\2\u0a56\u0a58\5\u02b2\u015a\2"+
		"\u0a57\u0a56\3\2\2\2\u0a57\u0a58\3\2\2\2\u0a58\u0a5b\3\2\2\2\u0a59\u0a5a"+
		"\7\u01d6\2\2\u0a5a\u0a5c\5\u0216\u010c\2\u0a5b\u0a59\3\2\2\2\u0a5b\u0a5c"+
		"\3\2\2\2\u0a5c\u010f\3\2\2\2\u0a5d\u0a5f\7\u0090\2\2\u0a5e\u0a60\5\u02b2"+
		"\u015a\2\u0a5f\u0a5e\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60\u0a63\3\2\2\2\u0a61"+
		"\u0a62\7\u01d6\2\2\u0a62\u0a64\5\u0216\u010c\2\u0a63\u0a61\3\2\2\2\u0a63"+
		"\u0a64\3\2\2\2\u0a64\u0111\3\2\2\2\u0a65\u0a66\7\u00a9\2\2\u0a66\u0a67"+
		"\5\u02b2\u015a\2\u0a67\u0113\3\2\2\2\u0a68\u0a69\7\u00b3\2\2\u0a69\u0a6a"+
		"\5\u0216\u010c\2\u0a6a\u0a6b\7\u01a7\2\2\u0a6b\u0a6f\5\u0104\u0083\2\u0a6c"+
		"\u0a6e\5\u0116\u008c\2\u0a6d\u0a6c\3\2\2\2\u0a6e\u0a71\3\2\2\2\u0a6f\u0a6d"+
		"\3\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70\u0a73\3\2\2\2\u0a71\u0a6f\3\2\2\2\u0a72"+
		"\u0a74\5\u0118\u008d\2\u0a73\u0a72\3\2\2\2\u0a73\u0a74\3\2\2\2\u0a74\u0a75"+
		"\3\2\2\2\u0a75\u0a76\7\u0083\2\2\u0a76\u0a77\7\u00b3\2\2\u0a77\u0115\3"+
		"\2\2\2\u0a78\u0a79\7~\2\2\u0a79\u0a7a\5\u0216\u010c\2\u0a7a\u0a7b\7\u01a7"+
		"\2\2\u0a7b\u0a7c\5\u0104\u0083\2\u0a7c\u0117\3\2\2\2\u0a7d\u0a7e\7}\2"+
		"\2\u0a7e\u0a7f\5\u0104\u0083\2\u0a7f\u0119\3\2\2\2\u0a80\u0a82\5\u02b2"+
		"\u015a\2\u0a81\u0a80\3\2\2\2\u0a81\u0a82\3\2\2\2\u0a82\u0a87\3\2\2\2\u0a83"+
		"\u0a84\7\u01d8\2\2\u0a84\u0a88\5\u0216\u010c\2\u0a85\u0a86\7\u00a2\2\2"+
		"\u0a86\u0a88\5\u011c\u008f\2\u0a87\u0a83\3\2\2\2\u0a87\u0a85\3\2\2\2\u0a87"+
		"\u0a88\3\2\2\2\u0a88\u0a89\3\2\2\2\u0a89\u0a8a\7\u00ea\2\2\u0a8a\u0a8b"+
		"\5\u0104\u0083\2\u0a8b\u0a8c\7\u0083\2\2\u0a8c\u0a8e\7\u00ea\2\2\u0a8d"+
		"\u0a8f\5\u02b2\u015a\2\u0a8e\u0a8d\3\2\2\2\u0a8e\u0a8f\3\2\2\2\u0a8f\u011b"+
		"\3\2\2\2\u0a90\u0a91\5\u02c2\u0162\2\u0a91\u0a93\7\u00bf\2\2\u0a92\u0a94"+
		"\7\u0167\2\2\u0a93\u0a92\3\2\2\2\u0a93\u0a94\3\2\2\2\u0a94\u0a95\3\2\2"+
		"\2\u0a95\u0a96\5\u0124\u0093\2\u0a96\u0a97\7\u0219\2\2\u0a97\u0a98\5\u0126"+
		"\u0094\2\u0a98\u0aaa\3\2\2\2\u0a99\u0a9a\5\u02c6\u0164\2\u0a9a\u0aa7\7"+
		"\u00bf\2\2\u0a9b\u0aa1\5\u02c4\u0163\2\u0a9c\u0a9e\7\u0221\2\2\u0a9d\u0a9f"+
		"\5\u0218\u010d\2\u0a9e\u0a9d\3\2\2\2\u0a9e\u0a9f\3\2\2\2\u0a9f\u0aa0\3"+
		"\2\2\2\u0aa0\u0aa2\7\u0222\2\2\u0aa1\u0a9c\3\2\2\2\u0aa1\u0aa2\3\2\2\2"+
		"\u0aa2\u0aa8\3\2\2\2\u0aa3\u0aa4\7\u0221\2\2\u0aa4\u0aa5\5\u015e\u00b0"+
		"\2\u0aa5\u0aa6\7\u0222\2\2\u0aa6\u0aa8\3\2\2\2\u0aa7\u0a9b\3\2\2\2\u0aa7"+
		"\u0aa3\3\2\2\2\u0aa8\u0aaa\3\2\2\2\u0aa9\u0a90\3\2\2\2\u0aa9\u0a99\3\2"+
		"\2\2\u0aaa\u011d\3\2\2\2\u0aab\u0aac\7\u009f\2\2\u0aac\u0aad\5\u02c2\u0162"+
		"\2\u0aad\u0aae\7\u00bf\2\2\u0aae\u0aaf\5\u0120\u0091\2\u0aaf\u0ab2\5\u013a"+
		"\u009e\2\u0ab0\u0ab1\7\u0172\2\2\u0ab1\u0ab3\7\u008b\2\2\u0ab2\u0ab0\3"+
		"\2\2\2\u0ab2\u0ab3\3\2\2\2\u0ab3\u011f\3\2\2\2\u0ab4\u0ab5\5\u0124\u0093"+
		"\2\u0ab5\u0ab6\7\u0219\2\2\u0ab6\u0ab7\5\u0126\u0094\2\u0ab7\u0ac2\3\2"+
		"\2\2\u0ab8\u0ab9\7\u00bd\2\2\u0ab9\u0aba\7\u011e\2\2\u0aba\u0abc\5\u02c8"+
		"\u0165\2\u0abb\u0abd\5\u0122\u0092\2\u0abc\u0abb\3\2\2\2\u0abc\u0abd\3"+
		"\2\2\2\u0abd\u0ac2\3\2\2\2\u0abe\u0abf\7\u01c9\2\2\u0abf\u0ac0\7\u011e"+
		"\2\2\u0ac0\u0ac2\5\u02c2\u0162\2\u0ac1\u0ab4\3\2\2\2\u0ac1\u0ab8\3\2\2"+
		"\2\u0ac1\u0abe\3\2\2\2\u0ac2\u0121\3\2\2\2\u0ac3\u0ac4\7\35\2\2\u0ac4"+
		"\u0ac5\5\u0124\u0093\2\u0ac5\u0ac6\7\13\2\2\u0ac6\u0ac7\5\u0126\u0094"+
		"\2\u0ac7\u0123\3\2\2\2\u0ac8\u0ac9\5\u022c\u0117\2\u0ac9\u0125\3\2\2\2"+
		"\u0aca\u0acb\5\u022c\u0117\2\u0acb\u0127\3\2\2\2\u0acc\u0acd\7\u0117\2"+
		"\2\u0acd\u0129\3\2\2\2\u0ace\u0ad0\7\u0151\2\2\u0acf\u0ad1\5\u02b8\u015d"+
		"\2\u0ad0\u0acf\3\2\2\2\u0ad0\u0ad1\3\2\2\2\u0ad1\u012b\3\2\2\2\u0ad2\u0ad4"+
		"\7\u0165\2\2\u0ad3\u0ad5\5\u021a\u010e\2\u0ad4\u0ad3\3\2\2\2\u0ad4\u0ad5"+
		"\3\2\2\2\u0ad5\u012d\3\2\2\2\u0ad6\u0ad8\7-\2\2\u0ad7\u0ad6\3\2\2\2\u0ad7"+
		"\u0ad8\3\2\2\2\u0ad8\u0ad9\3\2\2\2\u0ad9\u0adb\5\u02a0\u0151\2\u0ada\u0adc"+
		"\5\u02d8\u016d\2\u0adb\u0ada\3\2\2\2\u0adb\u0adc\3\2\2\2\u0adc\u012f\3"+
		"\2\2\2\u0add\u0ade\7\u0141\2\2\u0ade\u0adf\7\u016d\2\2\u0adf\u0ae0\7\u0221"+
		"\2\2\u0ae0\u0ae1\5\u021a\u010e\2\u0ae1\u0ae2\7\u0222\2\2\u0ae2\u0131\3"+
		"\2\2\2\u0ae3\u0ae4\7\34\2\2\u0ae4\u0aeb\5\u0104\u0083\2\u0ae5\u0ae7\7"+
		"\u0089\2\2\u0ae6\u0ae8\5\u0134\u009b\2\u0ae7\u0ae6\3\2\2\2\u0ae8\u0ae9"+
		"\3\2\2\2\u0ae9\u0ae7\3\2\2\2\u0ae9\u0aea\3\2\2\2\u0aea\u0aec\3\2\2\2\u0aeb"+
		"\u0ae5\3\2\2\2\u0aeb\u0aec\3\2\2\2\u0aec\u0aed\3\2\2\2\u0aed\u0aef\7\u0083"+
		"\2\2\u0aee\u0af0\5\u02b2\u015a\2\u0aef\u0aee\3\2\2\2\u0aef\u0af0\3\2\2"+
		"\2\u0af0\u0133\3\2\2\2\u0af1\u0af2\7\u01d6\2\2\u0af2\u0af7\5\u02b8\u015d"+
		"\2\u0af3\u0af4\7\u012a\2\2\u0af4\u0af6\5\u02b8\u015d\2\u0af5\u0af3\3\2"+
		"\2\2\u0af6\u0af9\3\2\2\2\u0af7\u0af5\3\2\2\2\u0af7\u0af8\3\2\2\2\u0af8"+
		"\u0afa\3\2\2\2\u0af9\u0af7\3\2\2\2\u0afa\u0afb\7\u01a7\2\2\u0afb\u0afc"+
		"\5\u0104\u0083\2\u0afc\u0135\3\2\2\2\u0afd\u0aff\7h\2\2\u0afe\u0afd\3"+
		"\2\2\2\u0afe\u0aff\3\2\2\2\u0aff\u0b01\3\2\2\2\u0b00\u0b02\5\u00e8u\2"+
		"\u0b01\u0b00\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03\u0b01\3\2\2\2\u0b03\u0b04"+
		"\3\2\2\2\u0b04\u0b06\3\2\2\2\u0b05\u0afe\3\2\2\2\u0b05\u0b06\3\2\2\2\u0b06"+
		"\u0b07\3\2\2\2\u0b07\u0b08\5\u0132\u009a\2\u0b08\u0137\3\2\2\2\u0b09\u0b0b"+
		"\7h\2\2\u0b0a\u0b09\3\2\2\2\u0b0a\u0b0b\3\2\2\2\u0b0b\u0b0d\3\2\2\2\u0b0c"+
		"\u0b0e\5\u00e8u\2\u0b0d\u0b0c\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0b0d"+
		"\3\2\2\2\u0b0f\u0b10\3\2\2\2\u0b10\u0b11\3\2\2\2\u0b11\u0b12\5\u0132\u009a"+
		"\2\u0b12\u0139\3\2\2\2\u0b13\u0b18\5\u013c\u009f\2\u0b14\u0b18\5\u0140"+
		"\u00a1\2\u0b15\u0b18\5\u0142\u00a2\2\u0b16\u0b18\5\u014c\u00a7\2\u0b17"+
		"\u0b13\3\2\2\2\u0b17\u0b14\3\2\2\2\u0b17\u0b15\3\2\2\2\u0b17\u0b16\3\2"+
		"\2\2\u0b18\u013b\3\2\2\2\u0b19\u0b1a\7\u008e\2\2\u0b1a\u0b1b\7\u00b5\2"+
		"\2\u0b1b\u0b25\5\u021a\u010e\2\u0b1c\u0b1e\5\u0290\u0149\2\u0b1d\u0b1f"+
		"\5\u0262\u0132\2\u0b1e\u0b1d\3\2\2\2\u0b1e\u0b1f\3\2\2\2\u0b1f\u0b26\3"+
		"\2\2\2\u0b20\u0b22\5\u0262\u0132\2\u0b21\u0b23\5\u013e\u00a0\2\u0b22\u0b21"+
		"\3\2\2\2\u0b22\u0b23\3\2\2\2\u0b23\u0b26\3\2\2\2\u0b24\u0b26\5\u013e\u00a0"+
		"\2\u0b25\u0b1c\3\2\2\2\u0b25\u0b20\3\2\2\2\u0b25\u0b24\3\2\2\2\u0b25\u0b26"+
		"\3\2\2\2\u0b26\u013d\3\2\2\2\u0b27\u0b28\t \2\2\u0b28\u0b29\5\u0290\u0149"+
		"\2\u0b29\u013f\3\2\2\2\u0b2a\u0b32\5\u01ee\u00f8\2\u0b2b\u0b32\5\u01fa"+
		"\u00fe\2\u0b2c\u0b32\5\u015e\u00b0\2\u0b2d\u0b32\5\u01d4\u00eb\2\u0b2e"+
		"\u0b32\5\u01da\u00ee\2\u0b2f\u0b32\5\u01dc\u00ef\2\u0b30\u0b32\5\u015c"+
		"\u00af\2\u0b31\u0b2a\3\2\2\2\u0b31\u0b2b\3\2\2\2\u0b31\u0b2c\3\2\2\2\u0b31"+
		"\u0b2d\3\2\2\2\u0b31\u0b2e\3\2\2\2\u0b31\u0b2f\3\2\2\2\u0b31\u0b30\3\2"+
		"\2\2\u0b32\u0141\3\2\2\2\u0b33\u0b38\5\u0144\u00a3\2\u0b34\u0b38\5\u0146"+
		"\u00a4\2\u0b35\u0b38\5\u0148\u00a5\2\u0b36\u0b38\5\u014a\u00a6\2\u0b37"+
		"\u0b33\3\2\2\2\u0b37\u0b34\3\2\2\2\u0b37\u0b35\3\2\2\2\u0b37\u0b36\3\2"+
		"\2\2\u0b38\u0143\3\2\2\2\u0b39\u0b3a\79\2\2\u0b3a\u0b3b\5\u02c4\u0163"+
		"\2\u0b3b\u0145\3\2\2\2\u0b3c\u0b3d\7\u0124\2\2\u0b3d\u0b43\5\u02c4\u0163"+
		"\2\u0b3e\u0b40\7\u0221\2\2\u0b3f\u0b41\5\u0218\u010d\2\u0b40\u0b3f\3\2"+
		"\2\2\u0b40\u0b41\3\2\2\2\u0b41\u0b42\3\2\2\2\u0b42\u0b44\7\u0222\2\2\u0b43"+
		"\u0b3e\3\2\2\2\u0b43\u0b44\3\2\2\2\u0b44\u0147\3\2\2\2\u0b45\u0b46\7\u0096"+
		"\2\2\u0b46\u0b5b\5\u02c4\u0163\2\u0b47\u0b48\7\u00cc\2\2\u0b48\u0b4d\5"+
		"\u02c0\u0161\2\u0b49\u0b4a\7\u0227\2\2\u0b4a\u0b4c\5\u02c0\u0161\2\u0b4b"+
		"\u0b49\3\2\2\2\u0b4c\u0b4f\3\2\2\2\u0b4d\u0b4b\3\2\2\2\u0b4d\u0b4e\3\2"+
		"\2\2\u0b4e\u0b5c\3\2\2\2\u0b4f\u0b4d\3\2\2\2\u0b50\u0b51\7)\2\2\u0b51"+
		"\u0b52\7<\2\2\u0b52\u0b53\7\u00cc\2\2\u0b53\u0b58\5\u02c0\u0161\2\u0b54"+
		"\u0b55\7\u0227\2\2\u0b55\u0b57\5\u02c0\u0161\2\u0b56\u0b54\3\2\2\2\u0b57"+
		"\u0b5a\3\2\2\2\u0b58\u0b56\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59\u0b5c\3\2"+
		"\2\2\u0b5a\u0b58\3\2\2\2\u0b5b\u0b47\3\2\2\2\u0b5b\u0b50\3\2\2\2\u0b5c"+
		"\u0149\3\2\2\2\u0b5d\u0b5e\7\u0124\2\2\u0b5e\u0b5f\5\u02c0\u0161\2\u0b5f"+
		"\u0b62\7\u00a2\2\2\u0b60\u0b63\5\u015e\u00b0\2\u0b61\u0b63\5\u021a\u010e"+
		"\2\u0b62\u0b60\3\2\2\2\u0b62\u0b61\3\2\2\2\u0b63\u0b65\3\2\2\2\u0b64\u0b66"+
		"\5\u0262\u0132\2\u0b65\u0b64\3\2\2\2\u0b65\u0b66\3\2\2\2\u0b66\u014b\3"+
		"\2\2\2\u0b67\u0b6d\5\u014e\u00a8\2\u0b68\u0b6d\5\u0150\u00a9\2\u0b69\u0b6d"+
		"\5\u0152\u00aa\2\u0b6a\u0b6d\5\u0156\u00ac\2\u0b6b\u0b6d\5\u0158\u00ad"+
		"\2\u0b6c\u0b67\3\2\2\2\u0b6c\u0b68\3\2\2\2\u0b6c\u0b69\3\2\2\2\u0b6c\u0b6a"+
		"\3\2\2\2\u0b6c\u0b6b\3\2\2\2\u0b6d\u014d\3\2\2\2\u0b6e\u0b6f\7\u0182\2"+
		"\2\u0b6f\u0b7d\7\u01b4\2\2\u0b70\u0b71\7\u0154\2\2\u0b71\u0b7e\t!\2\2"+
		"\u0b72\u0b73\7\u00cf\2\2\u0b73\u0b77\7\u00da\2\2\u0b74\u0b78\7\u017e\2"+
		"\2\u0b75\u0b76\7\u0154\2\2\u0b76\u0b78\7A\2\2\u0b77\u0b74\3\2\2\2\u0b77"+
		"\u0b75\3\2\2\2\u0b78\u0b7e\3\2\2\2\u0b79\u0b7a\7\u01c6\2\2\u0b7a\u0b7b"+
		"\7\u016a\2\2\u0b7b\u0b7c\7\u0179\2\2\u0b7c\u0b7e\5\u029a\u014e\2\u0b7d"+
		"\u0b70\3\2\2\2\u0b7d\u0b72\3\2\2\2\u0b7d\u0b79\3\2\2\2\u0b7d\u0b7e\3\2"+
		"\2\2\u0b7e\u0b81\3\2\2\2\u0b7f\u0b80\7\u00fd\2\2\u0b80\u0b82\5\u02f8\u017d"+
		"\2\u0b81\u0b7f\3\2\2\2\u0b81\u0b82\3\2\2\2\u0b82\u014f\3\2\2\2\u0b83\u0b84"+
		"\7\u0182\2\2\u0b84\u0b8e\t\"\2\2\u0b85\u0b8f\7\b\2\2\u0b86\u0b8b\5\u02b0"+
		"\u0159\2\u0b87\u0b88\7\u0227\2\2\u0b88\u0b8a\5\u02b0\u0159\2\u0b89\u0b87"+
		"\3\2\2\2\u0b8a\u0b8d\3\2\2\2\u0b8b\u0b89\3\2\2\2\u0b8b\u0b8c\3\2\2\2\u0b8c"+
		"\u0b8f\3\2\2\2\u0b8d\u0b8b\3\2\2\2\u0b8e\u0b85\3\2\2\2\u0b8e\u0b86\3\2"+
		"\2\2\u0b8f\u0b90\3\2\2\2\u0b90\u0b91\t\24\2\2\u0b91\u0151\3\2\2\2\u0b92"+
		"\u0b94\7@\2\2\u0b93\u0b95\7\u01db\2\2\u0b94\u0b93\3\2\2\2\u0b94\u0b95"+
		"\3\2\2\2\u0b95\u0ba3\3\2\2\2\u0b96\u0b97\7?\2\2\u0b97\u0ba4\5\u021a\u010e"+
		"\2\u0b98\u0ba1\7\u00a0\2\2\u0b99\u0b9a\7R\2\2\u0b9a\u0ba2\5\u021a\u010e"+
		"\2\u0b9b\u0ba2\7Q\2\2\u0b9c\u0b9f\5\u021a\u010e\2\u0b9d\u0b9e\7\u0227"+
		"\2\2\u0b9e\u0ba0\5\u021a\u010e\2\u0b9f\u0b9d\3\2\2\2\u0b9f\u0ba0\3\2\2"+
		"\2\u0ba0\u0ba2\3\2\2\2\u0ba1\u0b99\3\2\2\2\u0ba1\u0b9b\3\2\2\2\u0ba1\u0b9c"+
		"\3\2\2\2\u0ba2\u0ba4\3\2\2\2\u0ba3\u0b96\3\2\2\2\u0ba3\u0b98\3\2\2\2\u0ba3"+
		"\u0ba4\3\2\2\2\u0ba4\u0ba6\3\2\2\2\u0ba5\u0ba7\5\u0154\u00ab\2\u0ba6\u0ba5"+
		"\3\2\2\2\u0ba6\u0ba7\3\2\2\2\u0ba7\u0153\3\2\2\2\u0ba8\u0baa\7\u01dc\2"+
		"\2\u0ba9\u0bab\t#\2\2\u0baa\u0ba9\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0bad"+
		"\3\2\2\2\u0bac\u0bae\t$\2\2\u0bad\u0bac\3\2\2\2\u0bad\u0bae\3\2\2\2\u0bae"+
		"\u0155\3\2\2\2\u0baf\u0bb1\7\u016a\2\2\u0bb0\u0bb2\7\u01db\2\2\u0bb1\u0bb0"+
		"\3\2\2\2\u0bb1\u0bb2\3\2\2\2\u0bb2\u0bba\3\2\2\2\u0bb3\u0bb5\7\u01b2\2"+
		"\2\u0bb4\u0bb6\7\u0171\2\2\u0bb5\u0bb4\3\2\2\2\u0bb5\u0bb6\3\2\2\2\u0bb6"+
		"\u0bb7\3\2\2\2\u0bb7\u0bbb\5\u0298\u014d\2\u0bb8\u0bb9\7\u00a0\2\2\u0bb9"+
		"\u0bbb\5\u02f8\u017d\2\u0bba\u0bb3\3\2\2\2\u0bba\u0bb8\3\2\2\2\u0bba\u0bbb"+
		"\3\2\2\2\u0bbb\u0157\3\2\2\2\u0bbc\u0bbd\7\u0171\2\2\u0bbd\u0bbe\5\u0298"+
		"\u014d\2\u0bbe\u0159\3\2\2\2\u0bbf\u0bc0\5\2\2\2\u0bc0\u015b\3\2\2\2\u0bc1"+
		"\u0bc2\7\u0091\2\2\u0bc2\u0bc7\7\u0143\2\2\u0bc3\u0bc4\7\u0182\2\2\u0bc4"+
		"\u0bc5\7\u0197\2\2\u0bc5\u0bc6\7\u0235\2\2\u0bc6\u0bc8\5\u02f8\u017d\2"+
		"\u0bc7\u0bc3\3\2\2\2\u0bc7\u0bc8\3\2\2\2\u0bc8\u0bcb\3\2\2\2\u0bc9\u0bca"+
		"\7\u00cc\2\2\u0bca\u0bcc\5\u02ce\u0168\2\u0bcb\u0bc9\3\2\2\2\u0bcb\u0bcc"+
		"\3\2\2\2\u0bcc\u0bcd\3\2\2\2\u0bcd\u0bd3\7\u00a2\2\2\u0bce\u0bd4\5\u015e"+
		"\u00b0\2\u0bcf\u0bd4\5\u01d4\u00eb\2\u0bd0\u0bd4\5\u01da\u00ee\2\u0bd1"+
		"\u0bd4\5\u01dc\u00ef\2\u0bd2\u0bd4\5\u01ee\u00f8\2\u0bd3\u0bce\3\2\2\2"+
		"\u0bd3\u0bcf\3\2\2\2\u0bd3\u0bd0\3\2\2\2\u0bd3\u0bd1\3\2\2\2\u0bd3\u0bd2"+
		"\3\2\2\2\u0bd4\u015d\3\2\2\2\u0bd5\u0bd7\5\u0160\u00b1\2\u0bd6\u0bd5\3"+
		"\2\2\2\u0bd6\u0bd7\3\2\2\2\u0bd7\u0bd8\3\2\2\2\u0bd8\u0bdd\5\u0168\u00b5"+
		"\2\u0bd9\u0bdc\5\u01ce\u00e8\2\u0bda\u0bdc\5\u01ca\u00e6\2\u0bdb\u0bd9"+
		"\3\2\2\2\u0bdb\u0bda\3\2\2\2\u0bdc\u0bdf\3\2\2\2\u0bdd\u0bdb\3\2\2\2\u0bdd"+
		"\u0bde\3\2\2\2\u0bde\u015f\3\2\2\2\u0bdf\u0bdd\3\2\2\2\u0be0\u0be1\7\u01da"+
		"\2\2\u0be1\u0be6\5\u0162\u00b2\2\u0be2\u0be3\7\u0227\2\2\u0be3\u0be5\5"+
		"\u0162\u00b2\2\u0be4\u0be2\3\2\2\2\u0be5\u0be8\3\2\2\2\u0be6\u0be4\3\2"+
		"\2\2\u0be6\u0be7\3\2\2\2\u0be7\u0161\3\2\2\2\u0be8\u0be6\3\2\2\2\u0be9"+
		"\u0bf5\5\u02ae\u0158\2\u0bea\u0beb\7\u0221\2\2\u0beb\u0bf0\5\u02cc\u0167"+
		"\2\u0bec\u0bed\7\u0227\2\2\u0bed\u0bef\5\u02cc\u0167\2\u0bee\u0bec\3\2"+
		"\2\2\u0bef\u0bf2\3\2\2\2\u0bf0\u0bee\3\2\2\2\u0bf0\u0bf1\3\2\2\2\u0bf1"+
		"\u0bf3\3\2\2\2\u0bf2\u0bf0\3\2\2\2\u0bf3\u0bf4\7\u0222\2\2\u0bf4\u0bf6"+
		"\3\2\2\2\u0bf5\u0bea\3\2\2\2\u0bf5\u0bf6\3\2\2\2\u0bf6\u0bf7\3\2\2\2\u0bf7"+
		"\u0bf8\7\17\2\2\u0bf8\u0bf9\7\u0221\2\2\u0bf9\u0bfb\5\u0168\u00b5\2\u0bfa"+
		"\u0bfc\5\u01ca\u00e6\2\u0bfb\u0bfa\3\2\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc\u0bfd"+
		"\3\2\2\2\u0bfd\u0bff\7\u0222\2\2\u0bfe\u0c00\5\u0164\u00b3\2\u0bff\u0bfe"+
		"\3\2\2\2\u0bff\u0c00\3\2\2\2\u0c00\u0c02\3\2\2\2\u0c01\u0c03\5\u0166\u00b4"+
		"\2\u0c02\u0c01\3\2\2\2\u0c02\u0c03\3\2\2\2\u0c03\u0163\3\2\2\2\u0c04\u0c05"+
		"\7\u0176\2\2\u0c05\u0c06\t%\2\2\u0c06\u0c07\7\u0099\2\2\u0c07\u0c08\7"+
		"*\2\2\u0c08\u0c0a\5\u02cc\u0167\2\u0c09\u0c0b\7\20\2\2\u0c0a\u0c09\3\2"+
		"\2\2\u0c0a\u0c0b\3\2\2\2\u0c0b\u0c0d\3\2\2\2\u0c0c\u0c0e\7q\2\2\u0c0d"+
		"\u0c0c\3\2\2\2\u0c0d\u0c0e\3\2\2\2\u0c0e\u0c11\3\2\2\2\u0c0f\u0c10\7\u0118"+
		"\2\2\u0c10\u0c12\7\u0099\2\2\u0c11\u0c0f\3\2\2\2\u0c11\u0c12\3\2\2\2\u0c12"+
		"\u0c15\3\2\2\2\u0c13\u0c14\7\u0118\2\2\u0c14\u0c16\7\u00d6\2\2\u0c15\u0c13"+
		"\3\2\2\2\u0c15\u0c16\3\2\2\2\u0c16\u0c29\3\2\2\2\u0c17\u0c18\7\u0227\2"+
		"\2\u0c18\u0c1a\5\u02cc\u0167\2\u0c19\u0c1b\7\20\2\2\u0c1a\u0c19\3\2\2"+
		"\2\u0c1a\u0c1b\3\2\2\2\u0c1b\u0c1d\3\2\2\2\u0c1c\u0c1e\7q\2\2\u0c1d\u0c1c"+
		"\3\2\2\2\u0c1d\u0c1e\3\2\2\2\u0c1e\u0c21\3\2\2\2\u0c1f\u0c20\7\u0118\2"+
		"\2\u0c20\u0c22\7\u0099\2\2\u0c21\u0c1f\3\2\2\2\u0c21\u0c22\3\2\2\2\u0c22"+
		"\u0c25\3\2\2\2\u0c23\u0c24\7\u0118\2\2\u0c24\u0c26\7\u00d6\2\2\u0c25\u0c23"+
		"\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26\u0c28\3\2\2\2\u0c27\u0c17\3\2\2\2\u0c28"+
		"\u0c2b\3\2\2\2\u0c29\u0c27\3\2\2\2\u0c29\u0c2a\3\2\2\2\u0c2a\u0c2c\3\2"+
		"\2\2\u0c2b\u0c29\3\2\2\2\u0c2c\u0c2d\7\u0182\2\2\u0c2d\u0c2e\5\u02cc\u0167"+
		"\2\u0c2e\u0165\3\2\2\2\u0c2f\u0c30\7]\2\2\u0c30\u0c35\5\u02cc\u0167\2"+
		"\u0c31\u0c32\7\u0227\2\2\u0c32\u0c34\5\u02cc\u0167\2\u0c33\u0c31\3\2\2"+
		"\2\u0c34\u0c37\3\2\2\2\u0c35\u0c33\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36\u0c38"+
		"\3\2\2\2\u0c37\u0c35\3\2\2\2\u0c38\u0c39\7\u0182\2\2\u0c39\u0c3a\5\u02cc"+
		"\u0167\2\u0c3a\u0c3b\7\u01b2\2\2\u0c3b\u0c3c\5\u021a\u010e\2\u0c3c\u0c3d"+
		"\7k\2\2\u0c3d\u0c3e\5\u021a\u010e\2\u0c3e\u0167\3\2\2\2\u0c3f\u0c43\5"+
		"\u016a\u00b6\2\u0c40\u0c42\5\u016c\u00b7\2\u0c41\u0c40\3\2\2\2\u0c42\u0c45"+
		"\3\2\2\2\u0c43\u0c41\3\2\2\2\u0c43\u0c44\3\2\2\2\u0c44\u0169\3\2\2\2\u0c45"+
		"\u0c43\3\2\2\2\u0c46\u0c4c\5\u016e\u00b8\2\u0c47\u0c48\7\u0221\2\2\u0c48"+
		"\u0c49\5\u0168\u00b5\2\u0c49\u0c4a\7\u0222\2\2\u0c4a\u0c4c\3\2\2\2\u0c4b"+
		"\u0c46\3\2\2\2\u0c4b\u0c47\3\2\2\2\u0c4c\u016b\3\2\2\2\u0c4d\u0c4f\7\u01bd"+
		"\2\2\u0c4e\u0c50\7\b\2\2\u0c4f\u0c4e\3\2\2\2\u0c4f\u0c50\3\2\2\2\u0c50"+
		"\u0c54\3\2\2\2\u0c51\u0c54\7\u00c9\2\2\u0c52\u0c54\7\u00f4\2\2\u0c53\u0c4d"+
		"\3\2\2\2\u0c53\u0c51\3\2\2\2\u0c53\u0c52\3\2\2\2\u0c54\u0c55\3\2\2\2\u0c55"+
		"\u0c56\5\u016a\u00b6\2\u0c56\u016d\3\2\2\2\u0c57\u0c59\7\u017a\2\2\u0c58"+
		"\u0c5a\t&\2\2\u0c59\u0c58\3\2\2\2\u0c59\u0c5a\3\2\2\2\u0c5a\u0c64\3\2"+
		"\2\2\u0c5b\u0c65\7\u0224\2\2\u0c5c\u0c61\5\u0170\u00b9\2\u0c5d\u0c5e\7"+
		"\u0227\2\2\u0c5e\u0c60\5\u0170\u00b9\2\u0c5f\u0c5d\3\2\2\2\u0c60\u0c63"+
		"\3\2\2\2\u0c61\u0c5f\3\2\2\2\u0c61\u0c62\3\2\2\2\u0c62\u0c65\3\2\2\2\u0c63"+
		"\u0c61\3\2\2\2\u0c64\u0c5b\3\2\2\2\u0c64\u0c5c\3\2\2\2\u0c65\u0c67\3\2"+
		"\2\2\u0c66\u0c68\5\u0290\u0149\2\u0c67\u0c66\3\2\2\2\u0c67\u0c68\3\2\2"+
		"\2\u0c68\u0c69\3\2\2\2\u0c69\u0c6b\5\u0172\u00ba\2\u0c6a\u0c6c\5\u028e"+
		"\u0148\2\u0c6b\u0c6a\3\2\2\2\u0c6b\u0c6c\3\2\2\2\u0c6c\u0c6e\3\2\2\2\u0c6d"+
		"\u0c6f\5\u019c\u00cf\2\u0c6e\u0c6d\3\2\2\2\u0c6e\u0c6f\3\2\2\2\u0c6f\u0c71"+
		"\3\2\2\2\u0c70\u0c72\5\u01a0\u00d1\2\u0c71\u0c70\3\2\2\2\u0c71\u0c72\3"+
		"\2\2\2\u0c72\u0c74\3\2\2\2\u0c73\u0c75\5\u01ac\u00d7\2\u0c74\u0c73\3\2"+
		"\2\2\u0c74\u0c75\3\2\2\2\u0c75\u016f\3\2\2\2\u0c76\u0c78\5\u0174\u00bb"+
		"\2\u0c77\u0c79\5\u028a\u0146\2\u0c78\u0c77\3\2\2\2\u0c78\u0c79\3\2\2\2"+
		"\u0c79\u0171\3\2\2\2\u0c7a\u0c7b\7\u00a5\2\2\u0c7b\u0c7c\5\u0176\u00bc"+
		"\2\u0c7c\u0173\3\2\2\2\u0c7d\u0c7e\5\u02ce\u0168\2\u0c7e\u0c7f\7\u021a"+
		"\2\2\u0c7f\u0c80\7\u0224\2\2\u0c80\u0c88\3\2\2\2\u0c81\u0c82\5\u0300\u0181"+
		"\2\u0c82\u0c83\7\u021a\2\2\u0c83\u0c85\3\2\2\2\u0c84\u0c81\3\2\2\2\u0c84"+
		"\u0c85\3\2\2\2\u0c85\u0c86\3\2\2\2\u0c86\u0c88\5\u021a\u010e\2\u0c87\u0c7d"+
		"\3\2\2\2\u0c87\u0c84\3\2\2\2\u0c88\u0175\3\2\2\2\u0c89\u0c8e\5\u0178\u00bd"+
		"\2\u0c8a\u0c8b\7\u0227\2\2\u0c8b\u0c8d\5\u0178\u00bd\2\u0c8c\u0c8a\3\2"+
		"\2\2\u0c8d\u0c90\3\2\2\2\u0c8e\u0c8c\3\2\2\2\u0c8e\u0c8f\3\2\2\2\u0c8f"+
		"\u0177\3\2\2\2\u0c90\u0c8e\3\2\2\2\u0c91\u0c95\5\u017a\u00be\2\u0c92\u0c94"+
		"\5\u017e\u00c0\2\u0c93\u0c92\3\2\2\2\u0c94\u0c97\3\2\2\2\u0c95\u0c93\3"+
		"\2\2\2\u0c95\u0c96\3\2\2\2\u0c96\u0c9a\3\2\2\2\u0c97\u0c95\3\2\2\2\u0c98"+
		"\u0c9b\5\u018a\u00c6\2\u0c99\u0c9b\5\u0196\u00cc\2\u0c9a\u0c98\3\2\2\2"+
		"\u0c9a\u0c99\3\2\2\2\u0c9a\u0c9b\3\2\2\2\u0c9b\u0179\3\2\2\2\u0c9c\u0ca0"+
		"\5\u017c\u00bf\2\u0c9d\u0c9f\5\u0188\u00c5\2\u0c9e\u0c9d\3\2\2\2\u0c9f"+
		"\u0ca2\3\2\2\2\u0ca0\u0c9e\3\2\2\2\u0ca0\u0ca1\3\2\2\2\u0ca1\u0ca4\3\2"+
		"\2\2\u0ca2\u0ca0\3\2\2\2\u0ca3\u0ca5\5\u028c\u0147\2\u0ca4\u0ca3\3\2\2"+
		"\2\u0ca4\u0ca5\3\2\2\2\u0ca5\u017b\3\2\2\2\u0ca6\u0ca9\5\u020c\u0107\2"+
		"\u0ca7\u0caa\5\u018a\u00c6\2\u0ca8\u0caa\5\u0196\u00cc\2\u0ca9\u0ca7\3"+
		"\2\2\2\u0ca9\u0ca8\3\2\2\2\u0ca9\u0caa\3\2\2\2\u0caa\u0cbe\3\2\2\2\u0cab"+
		"\u0cac\7\u0221\2\2\u0cac\u0cb0\5\u0178\u00bd\2\u0cad\u0caf\5\u016c\u00b7"+
		"\2\u0cae\u0cad\3\2\2\2\u0caf\u0cb2\3\2\2\2\u0cb0\u0cae\3\2\2\2\u0cb0\u0cb1"+
		"\3\2\2\2\u0cb1\u0cb3\3\2\2\2\u0cb2\u0cb0\3\2\2\2\u0cb3\u0cb6\7\u0222\2"+
		"\2\u0cb4\u0cb7\5\u018a\u00c6\2\u0cb5\u0cb7\5\u0196\u00cc\2\u0cb6\u0cb4"+
		"\3\2\2\2\u0cb6\u0cb5\3\2\2\2\u0cb6\u0cb7\3\2\2\2\u0cb7\u0cbe\3\2\2\2\u0cb8"+
		"\u0cb9\7\u0122\2\2\u0cb9\u0cba\7\u0221\2\2\u0cba\u0cbb\5\u020c\u0107\2"+
		"\u0cbb\u0cbc\7\u0222\2\2\u0cbc\u0cbe\3\2\2\2\u0cbd\u0ca6\3\2\2\2\u0cbd"+
		"\u0cab\3\2\2\2\u0cbd\u0cb8\3\2\2\2\u0cbe\u017d\3\2\2\2\u0cbf\u0cc1\5\u0186"+
		"\u00c4\2\u0cc0\u0cbf\3\2\2\2\u0cc0\u0cc1\3\2\2\2\u0cc1\u0cc3\3\2\2\2\u0cc2"+
		"\u0cc4\t\'\2\2\u0cc3\u0cc2\3\2\2\2\u0cc3\u0cc4\3\2\2\2\u0cc4\u0cc7\3\2"+
		"\2\2\u0cc5\u0cc8\7\u00c3\2\2\u0cc6\u0cc8\5\u0184\u00c3\2\u0cc7\u0cc5\3"+
		"\2\2\2\u0cc7\u0cc6\3\2\2\2\u0cc7\u0cc8\3\2\2\2\u0cc8\u0cc9\3\2\2\2\u0cc9"+
		"\u0cca\7\u00d2\2\2\u0cca\u0ccc\5\u017a\u00be\2\u0ccb\u0ccd\5\u0186\u00c4"+
		"\2\u0ccc\u0ccb\3\2\2\2\u0ccc\u0ccd\3\2\2\2\u0ccd\u0cd2\3\2\2\2\u0cce\u0cd1"+
		"\5\u0180\u00c1\2\u0ccf\u0cd1\5\u0182\u00c2\2\u0cd0\u0cce\3\2\2\2\u0cd0"+
		"\u0ccf\3\2\2\2\u0cd1\u0cd4\3\2\2\2\u0cd2\u0cd0\3\2\2\2\u0cd2\u0cd3\3\2"+
		"\2\2\u0cd3\u017f\3\2\2\2\u0cd4\u0cd2\3\2\2\2\u0cd5\u0cd6\7\u0123\2\2\u0cd6"+
		"\u0cd7\5\u0216\u010c\2\u0cd7\u0181\3\2\2\2\u0cd8\u0cd9\7\u01c7\2\2\u0cd9"+
		"\u0cda\7\u0221\2\2\u0cda\u0cdf\5\u02cc\u0167\2\u0cdb\u0cdc\7\u0227\2\2"+
		"\u0cdc\u0cde\5\u02cc\u0167\2\u0cdd\u0cdb\3\2\2\2\u0cde\u0ce1\3\2\2\2\u0cdf"+
		"\u0cdd\3\2\2\2\u0cdf\u0ce0\3\2\2\2\u0ce0\u0ce2\3\2\2\2\u0ce1\u0cdf\3\2"+
		"\2\2\u0ce2\u0ce3\7\u0222\2\2\u0ce3\u0183\3\2\2\2\u0ce4\u0ce6\t(\2\2\u0ce5"+
		"\u0ce7\7\u012c\2\2\u0ce6\u0ce5\3\2\2\2\u0ce6\u0ce7\3\2\2\2\u0ce7\u0185"+
		"\3\2\2\2\u0ce8\u0ce9\7\u0134\2\2\u0ce9\u0cf1\7*\2\2\u0cea\u0ced\7\u0221"+
		"\2\2\u0ceb\u0cee\5\u0168\u00b5\2\u0cec\u0cee\5\u0218\u010d\2\u0ced\u0ceb"+
		"\3\2\2\2\u0ced\u0cec\3\2\2\2\u0ced\u0cee\3\2\2\2\u0cee\u0cef\3\2\2\2\u0cef"+
		"\u0cf2\7\u0222\2\2\u0cf0\u0cf2\5\u0218\u010d\2\u0cf1\u0cea\3\2\2\2\u0cf1"+
		"\u0cf0\3\2\2\2\u0cf2\u0187\3\2\2\2\u0cf3\u0cf4\7\u01d0\2\2\u0cf4\u0cf5"+
		"\7\35\2\2\u0cf5\u0cf6\t)\2\2\u0cf6\u0cfc\5\u021a\u010e\2\u0cf7\u0cf8\7"+
		"\17\2\2\u0cf8\u0cf9\7\u011e\2\2\u0cf9\u0cfa\t*\2\2\u0cfa\u0cfc\5\u021a"+
		"\u010e\2\u0cfb\u0cf3\3\2\2\2\u0cfb\u0cf7\3\2\2\2\u0cfc\u0189\3\2\2\2\u0cfd"+
		"\u0cff\7\u0142\2\2\u0cfe\u0d00\7\u01eb\2\2\u0cff\u0cfe\3\2\2\2\u0cff\u0d00"+
		"\3\2\2\2\u0d00\u0d01\3\2\2\2\u0d01\u0d02\7\u0221\2\2\u0d02\u0d07\5\u018c"+
		"\u00c7\2\u0d03\u0d04\7\u0227\2\2\u0d04\u0d06\5\u018c\u00c7\2\u0d05\u0d03"+
		"\3\2\2\2\u0d06\u0d09\3\2\2\2\u0d07\u0d05\3\2\2\2\u0d07\u0d08\3\2\2\2\u0d08"+
		"\u0d0a\3\2\2\2\u0d09\u0d07\3\2\2\2\u0d0a\u0d0b\5\u018e\u00c8\2\u0d0b\u0d0c"+
		"\5\u0190\u00c9\2\u0d0c\u0d0d\7\u0222\2\2\u0d0d\u018b\3\2\2\2\u0d0e\u0d0f"+
		"\5\u02ac\u0157\2\u0d0f\u0d10\7\u0221\2\2\u0d10\u0d11\5\u021a\u010e\2\u0d11"+
		"\u0d13\7\u0222\2\2\u0d12\u0d14\5\u028a\u0146\2\u0d13\u0d12\3\2\2\2\u0d13"+
		"\u0d14\3\2\2\2\u0d14\u018d\3\2\2\2\u0d15\u0d22\7\u00a2\2\2\u0d16\u0d23"+
		"\5\u02cc\u0167\2\u0d17\u0d18\7\u0221\2\2\u0d18\u0d1d\5\u02cc\u0167\2\u0d19"+
		"\u0d1a\7\u0227\2\2\u0d1a\u0d1c\5\u02cc\u0167\2\u0d1b\u0d19\3\2\2\2\u0d1c"+
		"\u0d1f\3\2\2\2\u0d1d\u0d1b\3\2\2\2\u0d1d\u0d1e\3\2\2\2\u0d1e\u0d20\3\2"+
		"\2\2\u0d1f\u0d1d\3\2\2\2\u0d20\u0d21\7\u0222\2\2\u0d21\u0d23\3\2\2\2\u0d22"+
		"\u0d16\3\2\2\2\u0d22\u0d17\3\2\2\2\u0d23\u018f\3\2\2\2\u0d24\u0d25\7\u00bf"+
		"\2\2\u0d25\u0d37\7\u0221\2\2\u0d26\u0d38\5\u0168\u00b5\2\u0d27\u0d2c\7"+
		"\f\2\2\u0d28\u0d29\7\u0227\2\2\u0d29\u0d2b\7\f\2\2\u0d2a\u0d28\3\2\2\2"+
		"\u0d2b\u0d2e\3\2\2\2\u0d2c\u0d2a\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u0d38"+
		"\3\2\2\2\u0d2e\u0d2c\3\2\2\2\u0d2f\u0d34\5\u0192\u00ca\2\u0d30\u0d31\7"+
		"\u0227\2\2\u0d31\u0d33\5\u0192\u00ca\2\u0d32\u0d30\3\2\2\2\u0d33\u0d36"+
		"\3\2\2\2\u0d34\u0d32\3\2\2\2\u0d34\u0d35\3\2\2\2\u0d35\u0d38\3\2\2\2\u0d36"+
		"\u0d34\3\2\2\2\u0d37\u0d26\3\2\2\2\u0d37\u0d27\3\2\2\2\u0d37\u0d2f\3\2"+
		"\2\2\u0d38\u0d39\3\2\2\2\u0d39\u0d3a\7\u0222\2\2\u0d3a\u0191\3\2\2\2\u0d3b"+
		"\u0d3d\5\u0194\u00cb\2\u0d3c\u0d3e\5\u028a\u0146\2\u0d3d\u0d3c\3\2\2\2"+
		"\u0d3d\u0d3e\3\2\2\2\u0d3e\u0193\3\2\2\2\u0d3f\u0d46\5\u021a\u010e\2\u0d40"+
		"\u0d42\7\u0221\2\2\u0d41\u0d43\5\u0218\u010d\2\u0d42\u0d41\3\2\2\2\u0d42"+
		"\u0d43\3\2\2\2\u0d43\u0d44\3\2\2\2\u0d44\u0d46\7\u0222\2\2\u0d45\u0d3f"+
		"\3\2\2\2\u0d45\u0d40\3\2\2\2\u0d46\u0195\3\2\2\2\u0d47\u0d4a\7\u01c0\2"+
		"\2\u0d48\u0d49\t+\2\2\u0d49\u0d4b\7\u0118\2\2\u0d4a\u0d48\3\2\2\2\u0d4a"+
		"\u0d4b\3\2\2\2\u0d4b\u0d4c\3\2\2\2\u0d4c\u0d59\7\u0221\2\2\u0d4d\u0d5a"+
		"\5\u02cc\u0167\2\u0d4e\u0d4f\7\u0221\2\2\u0d4f\u0d54\5\u02cc\u0167\2\u0d50"+
		"\u0d51\7\u0227\2\2\u0d51\u0d53\5\u02cc\u0167\2\u0d52\u0d50\3\2\2\2\u0d53"+
		"\u0d56\3\2\2\2\u0d54\u0d52\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55\u0d57\3\2"+
		"\2\2\u0d56\u0d54\3\2\2\2\u0d57\u0d58\7\u0222\2\2\u0d58\u0d5a\3\2\2\2\u0d59"+
		"\u0d4d\3\2\2\2\u0d59\u0d4e\3\2\2\2\u0d5a\u0d5b\3\2\2\2\u0d5b\u0d5c\5\u018e"+
		"\u00c8\2\u0d5c\u0d5d\5\u0198\u00cd\2\u0d5d\u0d5e\7\u0222\2\2\u0d5e\u0197"+
		"\3\2\2\2\u0d5f\u0d60\7\u00bf\2\2\u0d60\u0d61\7\u0221\2\2\u0d61\u0d66\5"+
		"\u019a\u00ce\2\u0d62\u0d63\7\u0227\2\2\u0d63\u0d65\5\u019a\u00ce\2\u0d64"+
		"\u0d62\3\2\2\2\u0d65\u0d68\3\2\2\2\u0d66\u0d64\3\2\2\2\u0d66\u0d67\3\2"+
		"\2\2\u0d67\u0d69\3\2\2\2\u0d68\u0d66\3\2\2\2\u0d69\u0d6a\7\u0222\2\2\u0d6a"+
		"\u0199\3\2\2\2\u0d6b\u0d78\5\u02cc\u0167\2\u0d6c\u0d6d\7\u0221\2\2\u0d6d"+
		"\u0d72\5\u02cc\u0167\2\u0d6e\u0d6f\7\u0227\2\2\u0d6f\u0d71\5\u02cc\u0167"+
		"\2\u0d70\u0d6e\3\2\2\2\u0d71\u0d74\3\2\2\2\u0d72\u0d70\3\2\2\2\u0d72\u0d73"+
		"\3\2\2\2\u0d73\u0d75\3\2\2\2\u0d74\u0d72\3\2\2\2\u0d75\u0d76\7\u0222\2"+
		"\2\u0d76\u0d78\3\2\2\2\u0d77\u0d6b\3\2\2\2\u0d77\u0d6c\3\2\2\2\u0d78\u0d88"+
		"\3\2\2\2\u0d79\u0d86\7\17\2\2\u0d7a\u0d87\5\u02f2\u017a\2\u0d7b\u0d7c"+
		"\7\u0221\2\2\u0d7c\u0d81\5\u02f2\u017a\2\u0d7d\u0d7e\7\u0227\2\2\u0d7e"+
		"\u0d80\5\u02f2\u017a\2\u0d7f\u0d7d\3\2\2\2\u0d80\u0d83\3\2\2\2\u0d81\u0d7f"+
		"\3\2\2\2\u0d81\u0d82\3\2\2\2\u0d82\u0d84\3\2\2\2\u0d83\u0d81\3\2\2\2\u0d84"+
		"\u0d85\7\u0222\2\2\u0d85\u0d87\3\2\2\2\u0d86\u0d7a\3\2\2\2\u0d86\u0d7b"+
		"\3\2\2\2\u0d87\u0d89\3\2\2\2\u0d88\u0d79\3\2\2\2\u0d88\u0d89\3\2\2\2\u0d89"+
		"\u019b\3\2\2\2\u0d8a\u0d8b\7H\2\2\u0d8b\u0d8d\7*\2\2\u0d8c\u0d8e\7\u010c"+
		"\2\2\u0d8d\u0d8c\3\2\2\2\u0d8d\u0d8e\3\2\2\2\u0d8e\u0d8f\3\2\2\2\u0d8f"+
		"\u0d91\5\u0216\u010c\2\u0d90\u0d92\5\u019e\u00d0\2\u0d91\u0d90\3\2\2\2"+
		"\u0d91\u0d92\3\2\2\2\u0d92\u0d9c\3\2\2\2\u0d93\u0d94\5\u019e\u00d0\2\u0d94"+
		"\u0d95\7H\2\2\u0d95\u0d97\7*\2\2\u0d96\u0d98\7\u010c\2\2\u0d97\u0d96\3"+
		"\2\2\2\u0d97\u0d98\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99\u0d9a\5\u0216\u010c"+
		"\2\u0d9a\u0d9c\3\2\2\2\u0d9b\u0d8a\3\2\2\2\u0d9b\u0d93\3\2\2\2\u0d9c\u019d"+
		"\3\2\2\2\u0d9d\u0d9e\7\u0195\2\2\u0d9e\u0d9f\7\u01da\2\2\u0d9f\u0da0\5"+
		"\u0216\u010c\2\u0da0\u019f\3\2\2\2\u0da1\u0da2\7\u00ab\2\2\u0da2\u0da3"+
		"\7*\2\2\u0da3\u0da8\5\u01a2\u00d2\2\u0da4\u0da5\7\u0227\2\2\u0da5\u0da7"+
		"\5\u01a2\u00d2\2\u0da6\u0da4\3\2\2\2\u0da7\u0daa\3\2\2\2\u0da8\u0da6\3"+
		"\2\2\2\u0da8\u0da9\3\2\2\2\u0da9\u0dac\3\2\2\2\u0daa\u0da8\3\2\2\2\u0dab"+
		"\u0dad\5\u01aa\u00d6\2\u0dac\u0dab\3\2\2\2\u0dac\u0dad\3\2\2\2\u0dad\u0dbc"+
		"\3\2\2\2\u0dae\u0db9\5\u01aa\u00d6\2\u0daf\u0db0\7\u00ab\2\2\u0db0\u0db1"+
		"\7*\2\2\u0db1\u0db6\5\u01a2\u00d2\2\u0db2\u0db3\7\u0227\2\2\u0db3\u0db5"+
		"\5\u01a2\u00d2\2\u0db4\u0db2\3\2\2\2\u0db5\u0db8\3\2\2\2\u0db6\u0db4\3"+
		"\2\2\2\u0db6\u0db7\3\2\2\2\u0db7\u0dba\3\2\2\2\u0db8\u0db6\3\2\2\2\u0db9"+
		"\u0daf\3\2\2\2\u0db9\u0dba\3\2\2\2\u0dba\u0dbc\3\2\2\2\u0dbb\u0da1\3\2"+
		"\2\2\u0dbb\u0dae\3\2\2\2\u0dbc\u01a1\3\2\2\2\u0dbd\u0dc1\5\u01a6\u00d4"+
		"\2\u0dbe\u0dc1\5\u01a4\u00d3\2\u0dbf\u0dc1\5\u021a\u010e\2\u0dc0\u0dbd"+
		"\3\2\2\2\u0dc0\u0dbe\3\2\2\2\u0dc0\u0dbf\3\2\2\2\u0dc1\u01a3\3\2\2\2\u0dc2"+
		"\u0dc3\t,\2\2\u0dc3\u0dc4\7\u0221\2\2\u0dc4\u0dc9\5\u01a8\u00d5\2\u0dc5"+
		"\u0dc6\7\u0227\2\2\u0dc6\u0dc8\5\u01a8\u00d5\2\u0dc7\u0dc5\3\2\2\2\u0dc8"+
		"\u0dcb\3\2\2\2\u0dc9\u0dc7\3\2\2\2\u0dc9\u0dca\3\2\2\2\u0dca\u0dcc\3\2"+
		"\2\2\u0dcb\u0dc9\3\2\2\2\u0dcc\u0dcd\7\u0222\2\2\u0dcd\u01a5\3\2\2\2\u0dce"+
		"\u0dcf\7\u00ac\2\2\u0dcf\u0dd0\7\u0183\2\2\u0dd0\u0dd1\7\u0221\2\2\u0dd1"+
		"\u0dd6\5\u01a8\u00d5\2\u0dd2\u0dd3\7\u0227\2\2\u0dd3\u0dd5\5\u01a8\u00d5"+
		"\2\u0dd4\u0dd2\3\2\2\2\u0dd5\u0dd8\3\2\2\2\u0dd6\u0dd4\3\2\2\2\u0dd6\u0dd7"+
		"\3\2\2\2\u0dd7\u0dd9\3\2\2\2\u0dd8\u0dd6\3\2\2\2\u0dd9\u0dda\7\u0222\2"+
		"\2\u0dda\u01a7\3\2\2\2\u0ddb\u0de3\5\u01a4\u00d3\2\u0ddc\u0dde\7\u0221"+
		"\2\2\u0ddd\u0ddf\5\u0218\u010d\2\u0dde\u0ddd\3\2\2\2\u0dde\u0ddf\3\2\2"+
		"\2\u0ddf\u0de0\3\2\2\2\u0de0\u0de3\7\u0222\2\2\u0de1\u0de3\5\u021a\u010e"+
		"\2\u0de2\u0ddb\3\2\2\2\u0de2\u0ddc\3\2\2\2\u0de2\u0de1\3\2\2\2\u0de3\u01a9"+
		"\3\2\2\2\u0de4\u0de5\7\u00af\2\2\u0de5\u0de6\5\u0216\u010c\2\u0de6\u01ab"+
		"\3\2\2\2\u0de7\u0deb\7\u00f8\2\2\u0de8\u0dea\5\u01ae\u00d8\2\u0de9\u0de8"+
		"\3\2\2\2\u0dea\u0ded\3\2\2\2\u0deb\u0de9\3\2\2\2\u0deb\u0dec\3\2\2\2\u0dec"+
		"\u0def\3\2\2\2\u0ded\u0deb\3\2\2\2\u0dee\u0df0\5\u01b0\u00d9\2\u0def\u0dee"+
		"\3\2\2\2\u0def\u0df0\3\2\2\2\u0df0\u0df4\3\2\2\2\u0df1\u0df3\5\u01b2\u00da"+
		"\2\u0df2\u0df1\3\2\2\2\u0df3\u0df6\3\2\2\2\u0df4\u0df2\3\2\2\2\u0df4\u0df5"+
		"\3\2\2\2\u0df5\u0df7\3\2\2\2\u0df6\u0df4\3\2\2\2\u0df7\u0df8\5\u01b4\u00db"+
		"\2\u0df8\u01ad\3\2\2\2\u0df9\u0dfa\t-\2\2\u0dfa\u0e02\7\u0101\2\2\u0dfb"+
		"\u0dff\7\u01be\2\2\u0dfc\u0e00\7s\2\2\u0dfd\u0dfe\7\u018b\2\2\u0dfe\u0e00"+
		"\7\u0158\2\2\u0dff\u0dfc\3\2\2\2\u0dff\u0dfd\3\2\2\2\u0e00\u0e02\3\2\2"+
		"\2\u0e01\u0df9\3\2\2\2\u0e01\u0dfb\3\2\2\2\u0e02\u01af\3\2\2\2\u0e03\u0e04"+
		"\7\u0165\2\2\u0e04\u0e05\t.\2\2\u0e05\u0e06\7\u016e\2\2\u0e06\u01b1\3"+
		"\2\2\2\u0e07\u0e08\7\u0158\2\2\u0e08\u0e09\5\u02a8\u0155\2\u0e09\u0e0a"+
		"\7\u0123\2\2\u0e0a\u0e0b\7\u0221\2\2\u0e0b\u0e0c\5\u0168\u00b5\2\u0e0c"+
		"\u0e0d\7\u0222\2\2\u0e0d\u0e11\5\u01b6\u00dc\2\u0e0e\u0e10\5\u01ae\u00d8"+
		"\2\u0e0f\u0e0e\3\2\2\2\u0e10\u0e13\3\2\2\2\u0e11\u0e0f\3\2\2\2\u0e11\u0e12"+
		"\3\2\2\2\u0e12\u01b3\3\2\2\2\u0e13\u0e11\3\2\2\2\u0e14\u0e15\7\u00ec\2"+
		"\2\u0e15\u0e17\5\u02aa\u0156\2\u0e16\u0e14\3\2\2\2\u0e16\u0e17\3\2\2\2"+
		"\u0e17\u0e18\3\2\2\2\u0e18\u0e1c\5\u01b6\u00dc\2\u0e19\u0e1b\5\u01ae\u00d8"+
		"\2\u0e1a\u0e19\3\2\2\2\u0e1b\u0e1e\3\2\2\2\u0e1c\u0e1a\3\2\2\2\u0e1c\u0e1d"+
		"\3\2\2\2\u0e1d\u0e1f\3\2\2\2\u0e1e\u0e1c\3\2\2\2\u0e1f\u0e20\5\u01be\u00e0"+
		"\2\u0e20\u01b5\3\2\2\2\u0e21\u0e23\5\u01b8\u00dd\2\u0e22\u0e21\3\2\2\2"+
		"\u0e22\u0e23\3\2\2\2\u0e23\u0e24\3\2\2\2\u0e24\u0e25\7s\2\2\u0e25\u0e26"+
		"\7*\2\2\u0e26\u0e27\5\u01ba\u00de\2\u0e27\u0e28\7\u00f0\2\2\u0e28\u0e29"+
		"\5\u01ba\u00de\2\u0e29\u01b7\3\2\2\2\u0e2a\u0e2b\7\u0134\2\2\u0e2b\u0e2c"+
		"\7*\2\2\u0e2c\u0e2d\5\u01ba\u00de\2\u0e2d\u01b9\3\2\2\2\u0e2e\u0e2f\7"+
		"\u0221\2\2\u0e2f\u0e34\5\u01bc\u00df\2\u0e30\u0e31\7\u0227\2\2\u0e31\u0e33"+
		"\5\u01bc\u00df\2\u0e32\u0e30\3\2\2\2\u0e33\u0e36\3\2\2\2\u0e34\u0e32\3"+
		"\2\2\2\u0e34\u0e35\3\2\2\2\u0e35\u0e37\3\2\2\2\u0e36\u0e34\3\2\2\2\u0e37"+
		"\u0e38\7\u0222\2\2\u0e38\u01bb\3\2\2\2\u0e39\u0e3c\5\u021a\u010e\2\u0e3a"+
		"\u0e3c\5\u016e\u00b8\2\u0e3b\u0e39\3\2\2\2\u0e3b\u0e3a\3\2\2\2\u0e3c\u0e3e"+
		"\3\2\2\2\u0e3d\u0e3f\5\u028a\u0146\2\u0e3e\u0e3d\3\2\2\2\u0e3e\u0e3f\3"+
		"\2\2\2\u0e3f\u01bd\3\2\2\2\u0e40\u0e42\5\u01c0\u00e1\2\u0e41\u0e40\3\2"+
		"\2\2\u0e41\u0e42\3\2\2\2\u0e42\u0e43\3\2\2\2\u0e43\u0e4c\7\u0221\2\2\u0e44"+
		"\u0e49\5\u01c2\u00e2\2\u0e45\u0e46\7\u0227\2\2\u0e46\u0e48\5\u01c2\u00e2"+
		"\2\u0e47\u0e45\3\2\2\2\u0e48\u0e4b\3\2\2\2\u0e49\u0e47\3\2\2\2\u0e49\u0e4a"+
		"\3\2\2\2\u0e4a\u0e4d\3\2\2\2\u0e4b\u0e49\3\2\2\2\u0e4c\u0e44\3\2\2\2\u0e4c"+
		"\u0e4d\3\2\2\2\u0e4d\u0e4e\3\2\2\2\u0e4e\u0e4f\7\u0222\2\2\u0e4f\u01bf"+
		"\3\2\2\2\u0e50\u0e56\7\u016f\2\2\u0e51\u0e57\7\u01c3\2\2\u0e52\u0e54\7"+
		"\u01c4\2\2\u0e53\u0e55\7\b\2\2\u0e54\u0e53\3\2\2\2\u0e54\u0e55\3\2\2\2"+
		"\u0e55\u0e57\3\2\2\2\u0e56\u0e51\3\2\2\2\u0e56\u0e52\3\2\2\2\u0e56\u0e57"+
		"\3\2\2\2\u0e57\u0e5a\3\2\2\2\u0e58\u0e59\t/\2\2\u0e59\u0e5b\7\u0128\2"+
		"\2\u0e5a\u0e58\3\2\2\2\u0e5a\u0e5b\3\2\2\2\u0e5b\u0e5d\3\2\2\2\u0e5c\u0e5e"+
		"\5\u01c6\u00e4\2\u0e5d\u0e5c\3\2\2\2\u0e5d\u0e5e\3\2\2\2\u0e5e\u01c1\3"+
		"\2\2\2\u0e5f\u0e65\7\u01c3\2\2\u0e60\u0e62\7\u01c4\2\2\u0e61\u0e63\7\b"+
		"\2\2\u0e62\u0e61\3\2\2\2\u0e62\u0e63\3\2\2\2\u0e63\u0e65\3\2\2\2\u0e64"+
		"\u0e5f\3\2\2\2\u0e64\u0e60\3\2\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e66\3\2"+
		"\2\2\u0e66\u0e68\5\u01c4\u00e3\2\u0e67\u0e69\5\u01ca\u00e6\2\u0e68\u0e67"+
		"\3\2\2\2\u0e68\u0e69\3\2\2\2\u0e69\u0e6a\3\2\2\2\u0e6a\u0e6b\7\u0235\2"+
		"\2\u0e6b\u0e6c\5\u021a\u010e\2\u0e6c\u01c3\3\2\2\2\u0e6d\u0e6e\5\u0230"+
		"\u0119\2\u0e6e\u01c5\3\2\2\2\u0e6f\u0e70\7\u00d0\2\2\u0e70\u0e71\7\u0221"+
		"\2\2\u0e71\u0e72\5\u021a\u010e\2\u0e72\u0e74\7\u0222\2\2\u0e73\u0e75\5"+
		"\u01c8\u00e5\2\u0e74\u0e73\3\2\2\2\u0e74\u0e75\3\2\2\2\u0e75\u01c7\3\2"+
		"\2\2\u0e76\u0e77\7\u01c1\2\2\u0e77\u0e78\7\u0221\2\2\u0e78\u0e79\5\u0216"+
		"\u010c\2\u0e79\u0e7a\7\u0222\2\2\u0e7a\u01c9\3\2\2\2\u0e7b\u0e7d\7\u0128"+
		"\2\2\u0e7c\u0e7e\7\u0188\2\2\u0e7d\u0e7c\3\2\2\2\u0e7d\u0e7e\3\2\2\2\u0e7e"+
		"\u0e7f\3\2\2\2\u0e7f\u0e80\7*\2\2\u0e80\u0e85\5\u01cc\u00e7\2\u0e81\u0e82"+
		"\7\u0227\2\2\u0e82\u0e84\5\u01cc\u00e7\2\u0e83\u0e81\3\2\2\2\u0e84\u0e87"+
		"\3\2\2\2\u0e85\u0e83\3\2\2\2\u0e85\u0e86\3\2\2\2\u0e86\u01cb\3\2\2\2\u0e87"+
		"\u0e85\3\2\2\2\u0e88\u0e8a\5\u021a\u010e\2\u0e89\u0e8b\t\60\2\2\u0e8a"+
		"\u0e89\3\2\2\2\u0e8a\u0e8b\3\2\2\2\u0e8b\u0e8e\3\2\2\2\u0e8c\u0e8d\7\u0118"+
		"\2\2\u0e8d\u0e8f\t\61\2\2\u0e8e\u0e8c\3\2\2\2\u0e8e\u0e8f\3\2\2\2\u0e8f"+
		"\u01cd\3\2\2\2\u0e90\u0e91\7\u00a2\2\2\u0e91\u0e93\7\u01c3\2\2\u0e92\u0e94"+
		"\5\u01d0\u00e9\2\u0e93\u0e92\3\2\2\2\u0e93\u0e94\3\2\2\2\u0e94\u0e96\3"+
		"\2\2\2\u0e95\u0e97\5\u01d2\u00ea\2\u0e96\u0e95\3\2\2\2\u0e96\u0e97\3\2"+
		"\2\2\u0e97\u01cf\3\2\2\2\u0e98\u0e99\7\u011e\2\2\u0e99\u0e9e\5\u02cc\u0167"+
		"\2\u0e9a\u0e9b\7\u0227\2\2\u0e9b\u0e9d\5\u02cc\u0167\2\u0e9c\u0e9a\3\2"+
		"\2\2\u0e9d\u0ea0\3\2\2\2\u0e9e\u0e9c\3\2\2\2\u0e9e\u0e9f\3\2\2\2\u0e9f"+
		"\u01d1\3\2\2\2\u0ea0\u0e9e\3\2\2\2\u0ea1\u0ea2\7\u018d\2\2\u0ea2\u0ea7"+
		"\7\u00e3\2\2\u0ea3\u0ea7\7\u0116\2\2\u0ea4\u0ea5\7\u01d2\2\2\u0ea5\u0ea7"+
		"\5\u021a\u010e\2\u0ea6\u0ea1\3\2\2\2\u0ea6\u0ea3\3\2\2\2\u0ea6\u0ea4\3"+
		"\2\2\2\u0ea7\u01d3\3\2\2\2\u0ea8\u0ea9\7\u01c3\2\2\u0ea9\u0eaa\5\u0202"+
		"\u0102\2\u0eaa\u0eac\5\u01d6\u00ec\2\u0eab\u0ead\5\u028e\u0148\2\u0eac"+
		"\u0eab\3\2\2\2\u0eac\u0ead\3\2\2\2\u0ead\u0eaf\3\2\2\2\u0eae\u0eb0\5\u0204"+
		"\u0103\2\u0eaf\u0eae\3\2\2\2\u0eaf\u0eb0\3\2\2\2\u0eb0\u0eb2\3\2\2\2\u0eb1"+
		"\u0eb3\5\u0206\u0104\2\u0eb2\u0eb1\3\2\2\2\u0eb2\u0eb3\3\2\2\2\u0eb3\u01d5"+
		"\3\2\2\2\u0eb4\u0ec4\7\u0182\2\2\u0eb5\u0eba\5\u01d8\u00ed\2\u0eb6\u0eb7"+
		"\7\u0227\2\2\u0eb7\u0eb9\5\u01d8\u00ed\2\u0eb8\u0eb6\3\2\2\2\u0eb9\u0ebc"+
		"\3\2\2\2\u0eba\u0eb8\3\2\2\2\u0eba\u0ebb\3\2\2\2\u0ebb\u0ec5\3\2\2\2\u0ebc"+
		"\u0eba\3\2\2\2\u0ebd\u0ebe\7\u01ca\2\2\u0ebe\u0ebf\7\u0221\2\2\u0ebf\u0ec0"+
		"\5\u02fa\u017e\2\u0ec0\u0ec1\7\u0222\2\2\u0ec1\u0ec2\7\u0235\2\2\u0ec2"+
		"\u0ec3\5\u021a\u010e\2\u0ec3\u0ec5\3\2\2\2\u0ec4\u0eb5\3\2\2\2\u0ec4\u0ebd"+
		"\3\2\2\2\u0ec5\u01d7\3\2\2\2\u0ec6\u0ec7\5\u02cc\u0167\2\u0ec7\u0ec8\7"+
		"\u0235\2\2\u0ec8\u0ec9\5\u021a\u010e\2\u0ec9\u0ed8\3\2\2\2\u0eca\u0ecb"+
		"\7\u0221\2\2\u0ecb\u0ed0\5\u02cc\u0167\2\u0ecc\u0ecd\7\u0227\2\2\u0ecd"+
		"\u0ecf\5\u02cc\u0167\2\u0ece\u0ecc\3\2\2\2\u0ecf\u0ed2\3\2\2\2\u0ed0\u0ece"+
		"\3\2\2\2\u0ed0\u0ed1\3\2\2\2\u0ed1\u0ed3\3\2\2\2\u0ed2\u0ed0\3\2\2\2\u0ed3"+
		"\u0ed4\7\u0222\2\2\u0ed4\u0ed5\7\u0235\2\2\u0ed5\u0ed6\5\u0168\u00b5\2"+
		"\u0ed6\u0ed8\3\2\2\2\u0ed7\u0ec6\3\2\2\2\u0ed7\u0eca\3\2\2\2\u0ed8\u01d9"+
		"\3\2\2\2\u0ed9\u0edb\7o\2\2\u0eda\u0edc\7\u00a5\2\2\u0edb\u0eda\3\2\2"+
		"\2\u0edb\u0edc\3\2\2\2\u0edc\u0edd\3\2\2\2\u0edd\u0edf\5\u0202\u0102\2"+
		"\u0ede\u0ee0\5\u028e\u0148\2\u0edf\u0ede\3\2\2\2\u0edf\u0ee0\3\2\2\2\u0ee0"+
		"\u0ee2\3\2\2\2\u0ee1\u0ee3\5\u0204\u0103\2\u0ee2\u0ee1\3\2\2\2\u0ee2\u0ee3"+
		"\3\2\2\2\u0ee3\u0ee5\3\2\2\2\u0ee4\u0ee6\5\u0206\u0104\2\u0ee5\u0ee4\3"+
		"\2\2\2\u0ee5\u0ee6\3\2\2\2\u0ee6\u01db\3\2\2\2\u0ee7\u0eea\7\u00c5\2\2"+
		"\u0ee8\u0eeb\5\u01de\u00f0\2\u0ee9\u0eeb\5\u01e0\u00f1\2\u0eea\u0ee8\3"+
		"\2\2\2\u0eea\u0ee9\3\2\2\2\u0eeb\u01dd\3\2\2\2\u0eec\u0ef2\5\u01ea\u00f6"+
		"\2\u0eed\u0eef\5\u01ec\u00f7\2\u0eee\u0ef0\5\u0204\u0103\2\u0eef\u0eee"+
		"\3\2\2\2\u0eef\u0ef0\3\2\2\2\u0ef0\u0ef3\3\2\2\2\u0ef1\u0ef3\5\u015e\u00b0"+
		"\2\u0ef2\u0eed\3\2\2\2\u0ef2\u0ef1\3\2\2\2\u0ef3\u0ef5\3\2\2\2\u0ef4\u0ef6"+
		"\5\u0206\u0104\2\u0ef5\u0ef4\3\2\2\2\u0ef5\u0ef6\3\2\2\2\u0ef6\u01df\3"+
		"\2\2\2\u0ef7\u0ef9\7\b\2\2\u0ef8\u0efa\5\u01e2\u00f2\2\u0ef9\u0ef8\3\2"+
		"\2\2\u0efa\u0efb\3\2\2\2\u0efb\u0ef9\3\2\2\2\u0efb\u0efc\3\2\2\2\u0efc"+
		"\u0eff\3\2\2\2\u0efd\u0eff\5\u01e4\u00f3\2\u0efe\u0ef7\3\2\2\2\u0efe\u0efd"+
		"\3\2\2\2\u0eff\u0f00\3\2\2\2\u0f00\u0f01\5\u015e\u00b0\2\u0f01\u01e1\3"+
		"\2\2\2\u0f02\u0f04\5\u01ea\u00f6\2\u0f03\u0f05\5\u01ec\u00f7\2\u0f04\u0f03"+
		"\3\2\2\2\u0f04\u0f05\3\2\2\2\u0f05\u0f07\3\2\2\2\u0f06\u0f08\5\u0206\u0104"+
		"\2\u0f07\u0f06\3\2\2\2\u0f07\u0f08\3\2\2\2\u0f08\u01e3\3\2\2\2\u0f09\u0f0b"+
		"\t\62\2\2\u0f0a\u0f09\3\2\2\2\u0f0a\u0f0b\3\2\2\2\u0f0b\u0f0d\3\2\2\2"+
		"\u0f0c\u0f0e\5\u01e6\u00f4\2\u0f0d\u0f0c\3\2\2\2\u0f0e\u0f0f\3\2\2\2\u0f0f"+
		"\u0f0d\3\2\2\2\u0f0f\u0f10\3\2\2\2\u0f10\u0f12\3\2\2\2\u0f11\u0f13\5\u01e8"+
		"\u00f5\2\u0f12\u0f11\3\2\2\2\u0f12\u0f13\3\2\2\2\u0f13\u01e5\3\2\2\2\u0f14"+
		"\u0f15\7\u01d6\2\2\u0f15\u0f16\5\u0216\u010c\2\u0f16\u0f18\7\u01a7\2\2"+
		"\u0f17\u0f19\5\u01e2\u00f2\2\u0f18\u0f17\3\2\2\2\u0f19\u0f1a\3\2\2\2\u0f1a"+
		"\u0f18\3\2\2\2\u0f1a\u0f1b\3\2\2\2\u0f1b\u01e7\3\2\2\2\u0f1c\u0f1e\7}"+
		"\2\2\u0f1d\u0f1f\5\u01e2\u00f2\2\u0f1e\u0f1d\3\2\2\2\u0f1f\u0f20\3\2\2"+
		"\2\u0f20\u0f1e\3\2\2\2\u0f20\u0f21\3\2\2\2\u0f21\u01e9\3\2\2\2\u0f22\u0f23"+
		"\7\u00cc\2\2\u0f23\u0f2f\5\u0202\u0102\2\u0f24\u0f25\7\u0221\2\2\u0f25"+
		"\u0f2a\5\u02cc\u0167\2\u0f26\u0f27\7\u0227\2\2\u0f27\u0f29\5\u02cc\u0167"+
		"\2\u0f28\u0f26\3\2\2\2\u0f29\u0f2c\3\2\2\2\u0f2a\u0f28\3\2\2\2\u0f2a\u0f2b"+
		"\3\2\2\2\u0f2b\u0f2d\3\2\2\2\u0f2c\u0f2a\3\2\2\2\u0f2d\u0f2e\7\u0222\2"+
		"\2\u0f2e\u0f30\3\2\2\2\u0f2f\u0f24\3\2\2\2\u0f2f\u0f30\3\2\2\2\u0f30\u01eb"+
		"\3\2\2\2\u0f31\u0f32\7\u01c9\2\2\u0f32\u0f34\7\u0221\2\2\u0f33\u0f35\5"+
		"\u0218\u010d\2\u0f34\u0f33\3\2\2\2\u0f34\u0f35\3\2\2\2\u0f35\u0f36\3\2"+
		"\2\2\u0f36\u0f37\7\u0222\2\2\u0f37\u01ed\3\2\2\2\u0f38\u0f39\7\u00f2\2"+
		"\2\u0f39\u0f3a\7\u00cc\2\2\u0f3a\u0f3c\5\u02ce\u0168\2\u0f3b\u0f3d\5\u028c"+
		"\u0147\2\u0f3c\u0f3b\3\2\2\2\u0f3c\u0f3d\3\2\2\2\u0f3d\u0f3e\3\2\2\2\u0f3e"+
		"\u0f3f\7\u01c7\2\2\u0f3f\u0f40\5\u01f8\u00fd\2\u0f40\u0f41\7\u0123\2\2"+
		"\u0f41\u0f42\7\u0221\2\2\u0f42\u0f43\5\u0216\u010c\2\u0f43\u0f4c\7\u0222"+
		"\2\2\u0f44\u0f46\5\u01f0\u00f9\2\u0f45\u0f47\5\u01f6\u00fc\2\u0f46\u0f45"+
		"\3\2\2\2\u0f46\u0f47\3\2\2\2\u0f47\u0f4d\3\2\2\2\u0f48\u0f4a\5\u01f6\u00fc"+
		"\2\u0f49\u0f4b\5\u01f0\u00f9\2\u0f4a\u0f49\3\2\2\2\u0f4a\u0f4b\3\2\2\2"+
		"\u0f4b\u0f4d\3\2\2\2\u0f4c\u0f44\3\2\2\2\u0f4c\u0f48\3\2\2\2\u0f4c\u0f4d"+
		"\3\2\2\2\u0f4d\u0f4f\3\2\2\2\u0f4e\u0f50\5\u0206\u0104\2\u0f4f\u0f4e\3"+
		"\2\2\2\u0f4f\u0f50\3\2\2\2\u0f50\u01ef\3\2\2\2\u0f51\u0f52\7\u01d6\2\2"+
		"\u0f52\u0f53\7\u00ee\2\2\u0f53\u0f54\7\u01a7\2\2\u0f54\u0f55\7\u01c3\2"+
		"\2\u0f55\u0f56\7\u0182\2\2\u0f56\u0f5b\5\u01f2\u00fa\2\u0f57\u0f58\7\u0227"+
		"\2\2\u0f58\u0f5a\5\u01f2\u00fa\2\u0f59\u0f57\3\2\2\2\u0f5a\u0f5d\3\2\2"+
		"\2\u0f5b\u0f59\3\2\2\2\u0f5b\u0f5c\3\2\2\2\u0f5c\u0f5f\3\2\2\2\u0f5d\u0f5b"+
		"\3\2\2\2\u0f5e\u0f60\5\u028e\u0148\2\u0f5f\u0f5e\3\2\2\2\u0f5f\u0f60\3"+
		"\2\2\2\u0f60\u0f62\3\2\2\2\u0f61\u0f63\5\u01f4\u00fb\2\u0f62\u0f61\3\2"+
		"\2\2\u0f62\u0f63\3\2\2\2\u0f63\u01f1\3\2\2\2\u0f64\u0f65\5\u02cc\u0167"+
		"\2\u0f65\u0f66\7\u0235\2\2\u0f66\u0f67\5\u021a\u010e\2\u0f67\u01f3\3\2"+
		"\2\2\u0f68\u0f69\7o\2\2\u0f69\u0f6a\5\u028e\u0148\2\u0f6a\u01f5\3\2\2"+
		"\2\u0f6b\u0f6c\7\u01d6\2\2\u0f6c\u0f6d\7\u0115\2\2\u0f6d\u0f6e\7\u00ee"+
		"\2\2\u0f6e\u0f6f\7\u01a7\2\2\u0f6f\u0f7b\7\u00c5\2\2\u0f70\u0f71\7\u0221"+
		"\2\2\u0f71\u0f76\5\u02cc\u0167\2\u0f72\u0f73\7\u0227\2\2\u0f73\u0f75\5"+
		"\u02cc\u0167\2\u0f74\u0f72\3\2\2\2\u0f75\u0f78\3\2\2\2\u0f76\u0f74\3\2"+
		"\2\2\u0f76\u0f77\3\2\2\2\u0f77\u0f79\3\2\2\2\u0f78\u0f76\3\2\2\2\u0f79"+
		"\u0f7a\7\u0222\2\2\u0f7a\u0f7c\3\2\2\2\u0f7b\u0f70\3\2\2\2\u0f7b\u0f7c"+
		"\3\2\2\2\u0f7c\u0f7d\3\2\2\2\u0f7d\u0f7e\7\u01c9\2\2\u0f7e\u0f80\7\u0221"+
		"\2\2\u0f7f\u0f81\5\u0218\u010d\2\u0f80\u0f7f\3\2\2\2\u0f80\u0f81\3\2\2"+
		"\2\u0f81\u0f82\3\2\2\2\u0f82\u0f84\7\u0222\2\2\u0f83\u0f85\5\u028e\u0148"+
		"\2\u0f84\u0f83\3\2\2\2\u0f84\u0f85\3\2\2\2\u0f85\u01f7\3\2\2\2\u0f86\u0f8c"+
		"\5\u02ce\u0168\2\u0f87\u0f88\7\u0221\2\2\u0f88\u0f89\5\u015e\u00b0\2\u0f89"+
		"\u0f8a\7\u0222\2\2\u0f8a\u0f8c\3\2\2\2\u0f8b\u0f86\3\2\2\2\u0f8b\u0f87"+
		"\3\2\2\2\u0f8c\u0f8e\3\2\2\2\u0f8d\u0f8f\5\u028c\u0147\2\u0f8e\u0f8d\3"+
		"\2\2\2\u0f8e\u0f8f\3\2\2\2\u0f8f\u01f9\3\2\2\2\u0f90\u0f91\7\u00e4\2\2"+
		"\u0f91\u0f92\7\u01a5\2\2\u0f92\u0f97\5\u01fe\u0100\2\u0f93\u0f94\7\u0227"+
		"\2\2\u0f94\u0f96\5\u01fe\u0100\2\u0f95\u0f93\3\2\2\2\u0f96\u0f99\3\2\2"+
		"\2\u0f97\u0f95\3\2\2\2\u0f97\u0f98\3\2\2\2\u0f98\u0f9a\3\2\2\2\u0f99\u0f97"+
		"\3\2\2\2\u0f9a\u0f9b\7\u00bf\2\2\u0f9b\u0f9c\5\u0200\u0101\2\u0f9c\u0f9e"+
		"\7\u00f9\2\2\u0f9d\u0f9f\5\u01fc\u00ff\2\u0f9e\u0f9d\3\2\2\2\u0f9e\u0f9f"+
		"\3\2\2\2\u0f9f\u01fb\3\2\2\2\u0fa0\u0fa1\7\u01d2\2\2\u0fa1\u0fa4\5\u021a"+
		"\u010e\2\u0fa2\u0fa4\7\u0116\2\2\u0fa3\u0fa0\3\2\2\2\u0fa3\u0fa2\3\2\2"+
		"\2\u0fa4\u01fd\3\2\2\2\u0fa5\u0fa7\5\u02ce\u0168\2\u0fa6\u0fa8\5\u0288"+
		"\u0145\2\u0fa7\u0fa6\3\2\2\2\u0fa7\u0fa8\3\2\2\2\u0fa8\u01ff\3\2\2\2\u0fa9"+
		"\u0faa\7\u016d\2\2\u0faa\u0fb6\7\u0185\2\2\u0fab\u0fac\7\u016d\2\2\u0fac"+
		"\u0fb6\7\u008d\2\2\u0fad\u0faf\7\u0185\2\2\u0fae\u0fb0\7\u01c3\2\2\u0faf"+
		"\u0fae\3\2\2\2\u0faf\u0fb0\3\2\2\2\u0fb0\u0fb6\3\2\2\2\u0fb1\u0fb2\7\u0185"+
		"\2\2\u0fb2\u0fb3\7\u016d\2\2\u0fb3\u0fb6\7\u008d\2\2\u0fb4\u0fb6\7\u008d"+
		"\2\2\u0fb5\u0fa9\3\2\2\2\u0fb5\u0fab\3\2\2\2\u0fb5\u0fad\3\2\2\2\u0fb5"+
		"\u0fb1\3\2\2\2\u0fb5\u0fb4\3\2\2\2\u0fb6\u0201\3\2\2\2\u0fb7\u0fbe\5\u020c"+
		"\u0107\2\u0fb8\u0fb9\7\u0122\2\2\u0fb9\u0fba\7\u0221\2\2\u0fba\u0fbb\5"+
		"\u020c\u0107\2\u0fbb\u0fbc\7\u0222\2\2\u0fbc\u0fbe\3\2\2\2\u0fbd\u0fb7"+
		"\3\2\2\2\u0fbd\u0fb8\3\2\2\2\u0fbe\u0fc0\3\2\2\2\u0fbf\u0fc1\5\u028c\u0147"+
		"\2\u0fc0\u0fbf\3\2\2\2\u0fc0\u0fc1\3\2\2\2\u0fc1\u0203\3\2\2\2\u0fc2\u0fc3"+
		"\t \2\2\u0fc3\u0fc4\5\u0218\u010d\2\u0fc4\u0fc5\5\u0290\u0149\2\u0fc5"+
		"\u0205\3\2\2\2\u0fc6\u0fc7\7\u00e6\2\2\u0fc7\u0fc9\7\u0086\2\2\u0fc8\u0fca"+
		"\5\u0208\u0105\2\u0fc9\u0fc8\3\2\2\2\u0fc9\u0fca\3\2\2\2\u0fca\u0fcc\3"+
		"\2\2\2\u0fcb\u0fcd\5\u021a\u010e\2\u0fcc\u0fcb\3\2\2\2\u0fcc\u0fcd\3\2"+
		"\2\2\u0fcd\u0fcf\3\2\2\2\u0fce\u0fd0\5\u020a\u0106\2\u0fcf\u0fce\3\2\2"+
		"\2\u0fcf\u0fd0\3\2\2\2\u0fd0\u0207\3\2\2\2\u0fd1\u0fd2\7\u00cc\2\2\u0fd2"+
		"\u0fd3\5\u02ce\u0168\2\u0fd3\u0209\3\2\2\2\u0fd4\u0fd5\7\u015c\2\2\u0fd5"+
		"\u0fd8\7\u00e0\2\2\u0fd6\u0fd9\7\u01bf\2\2\u0fd7\u0fd9\5\u021a\u010e\2"+
		"\u0fd8\u0fd6\3\2\2\2\u0fd8\u0fd7\3\2\2\2\u0fd9\u020b\3\2\2\2\u0fda\u0fe7"+
		"\5\u020e\u0108\2\u0fdb\u0fdc\7\u0221\2\2\u0fdc\u0fde\5\u015e\u00b0\2\u0fdd"+
		"\u0fdf\5\u0210\u0109\2\u0fde\u0fdd\3\2\2\2\u0fde\u0fdf\3\2\2\2\u0fdf\u0fe0"+
		"\3\2\2\2\u0fe0\u0fe1\7\u0222\2\2\u0fe1\u0fe7\3\2\2\2\u0fe2\u0fe4\5\u02ce"+
		"\u0168\2\u0fe3\u0fe5\5\u0212\u010a\2\u0fe4\u0fe3\3\2\2\2\u0fe4\u0fe5\3"+
		"\2\2\2\u0fe5\u0fe7\3\2\2\2\u0fe6\u0fda\3\2\2\2\u0fe6\u0fdb\3\2\2\2\u0fe6"+
		"\u0fe2\3\2\2\2\u0fe7\u020d\3\2\2\2\u0fe8\u0ff5\t\63\2\2\u0fe9\u0fea\7"+
		"\u0221\2\2\u0fea\u0feb\5\u0168\u00b5\2\u0feb\u0fec\7\u0222\2\2\u0fec\u0ff6"+
		"\3\2\2\2\u0fed\u0fee\7\u0221\2\2\u0fee\u0fef\5\u021a\u010e\2\u0fef\u0ff3"+
		"\7\u0222\2\2\u0ff0\u0ff1\7\u0221\2\2\u0ff1\u0ff2\7\u0225\2\2\u0ff2\u0ff4"+
		"\7\u0222\2\2\u0ff3\u0ff0\3\2\2\2\u0ff3\u0ff4\3\2\2\2\u0ff4\u0ff6\3\2\2"+
		"\2\u0ff5\u0fe9\3\2\2\2\u0ff5\u0fed\3\2\2\2\u0ff6\u020f\3\2\2\2\u0ff7\u1000"+
		"\7\u01da\2\2\u0ff8\u0ff9\7\u0154\2\2\u0ff9\u1001\7\u0122\2\2\u0ffa\u0ffb"+
		"\7\65\2\2\u0ffb\u0ffe\7\u0126\2\2\u0ffc\u0ffd\7J\2\2\u0ffd\u0fff\5\u02b0"+
		"\u0159\2\u0ffe\u0ffc\3\2\2\2\u0ffe\u0fff\3\2\2\2\u0fff\u1001\3\2\2\2\u1000"+
		"\u0ff8\3\2\2\2\u1000\u0ffa\3\2\2\2\u1001\u0211\3\2\2\2\u1002\u1004\7\u0170"+
		"\2\2\u1003\u1005\7#\2\2\u1004\u1003\3\2\2\2\u1004\u1005\3\2\2\2\u1005"+
		"\u1006\3\2\2\2\u1006\u1007\7\u0221\2\2\u1007\u100a\5\u021a\u010e\2\u1008"+
		"\u1009\7\u0227\2\2\u1009\u100b\5\u021a\u010e\2\u100a\u1008\3\2\2\2\u100a"+
		"\u100b\3\2\2\2\u100b\u100c\3\2\2\2\u100c\u100e\7\u0222\2\2\u100d\u100f"+
		"\5\u0214\u010b\2\u100e\u100d\3\2\2\2\u100e\u100f\3\2\2\2\u100f\u0213\3"+
		"\2\2\2\u1010\u1011\7\u0178\2\2\u1011\u1012\7\u0221\2\2\u1012\u1013\5\u021a"+
		"\u010e\2\u1013\u1014\7\u0222\2\2\u1014\u0215\3\2\2\2\u1015\u1016\5\u021a"+
		"\u010e\2\u1016\u0217\3\2\2\2\u1017\u101c\5\u021a\u010e\2\u1018\u1019\7"+
		"\u0227\2\2\u1019\u101b\5\u021a\u010e\2\u101a\u1018\3\2\2\2\u101b\u101e"+
		"\3\2\2\2\u101c\u101a\3\2\2\2\u101c\u101d\3\2\2\2\u101d\u0219\3\2\2\2\u101e"+
		"\u101c\3\2\2\2\u101f\u1022\5\u021c\u010f\2\u1020\u1022\5\u021e\u0110\2"+
		"\u1021\u101f\3\2\2\2\u1021\u1020\3\2\2\2\u1022\u021b\3\2\2\2\u1023\u1024"+
		"\7[\2\2\u1024\u1025\7\u0221\2\2\u1025\u1026\5\u0168\u00b5\2\u1026\u1027"+
		"\7\u0222\2\2\u1027\u021d\3\2\2\2\u1028\u1029\b\u0110\1\2\u1029\u104b\5"+
		"\u0220\u0111\2\u102a\u102c\7\u00ce\2\2\u102b\u102d\7\u0115\2\2\u102c\u102b"+
		"\3\2\2\2\u102c\u102d\3\2\2\2\u102d\u1047\3\2\2\2\u102e\u1048\7\u0117\2"+
		"\2\u102f\u1048\7\u00fe\2\2\u1030\u1048\7\u014a\2\2\u1031\u1048\7\u00be"+
		"\2\2\u1032\u1033\7\7\2\2\u1033\u1048\7\u0182\2\2\u1034\u1048\7\177\2\2"+
		"\u1035\u1037\7\u011e\2\2\u1036\u1038\7\u01ba\2\2\u1037\u1036\3\2\2\2\u1037"+
		"\u1038\3\2\2\2\u1038\u1039\3\2\2\2\u1039\u103b\7\u0221\2\2\u103a\u103c"+
		"\7\u0122\2\2\u103b\u103a\3\2\2\2\u103b\u103c\3\2\2\2\u103c\u103d\3\2\2"+
		"\2\u103d\u1042\5\u02e2\u0172\2\u103e\u103f\7\u0227\2\2\u103f\u1041\5\u02e2"+
		"\u0172\2\u1040\u103e\3\2\2\2\u1041\u1044\3\2\2\2\u1042\u1040\3\2\2\2\u1042"+
		"\u1043\3\2\2\2\u1043\u1045\3\2\2\2\u1044\u1042\3\2\2\2\u1045\u1046\7\u0222"+
		"\2\2\u1046\u1048\3\2\2\2\u1047\u102e\3\2\2\2\u1047\u102f\3\2\2\2\u1047"+
		"\u1030\3\2\2\2\u1047\u1031\3\2\2\2\u1047\u1032\3\2\2\2\u1047\u1034\3\2"+
		"\2\2\u1047\u1035\3\2\2\2\u1048\u104a\3\2\2\2\u1049\u102a\3\2\2\2\u104a"+
		"\u104d\3\2\2\2\u104b\u1049\3\2\2\2\u104b\u104c\3\2\2\2\u104c\u1051\3\2"+
		"\2\2\u104d\u104b\3\2\2\2\u104e\u104f\7\u0115\2\2\u104f\u1051\5\u021e\u0110"+
		"\5\u1050\u1028\3\2\2\2\u1050\u104e\3\2\2\2\u1051\u105a\3\2\2\2\u1052\u1053"+
		"\f\4\2\2\u1053\u1054\7\13\2\2\u1054\u1059\5\u021e\u0110\5\u1055\u1056"+
		"\f\3\2\2\u1056\u1057\7\u012a\2\2\u1057\u1059\5\u021e\u0110\4\u1058\u1052"+
		"\3\2\2\2\u1058\u1055\3\2\2\2\u1059\u105c\3\2\2\2\u105a\u1058\3\2\2\2\u105a"+
		"\u105b\3\2\2\2\u105b\u021f\3\2\2\2\u105c\u105a\3\2\2\2\u105d\u1063\5\u0222"+
		"\u0112\2\u105e\u1060\t\64\2\2\u105f\u1061\7\u011e\2\2\u1060\u105f\3\2"+
		"\2\2\u1060\u1061\3\2\2\2\u1061\u1062\3\2\2\2\u1062\u1064\5\u022c\u0117"+
		"\2\u1063\u105e\3\2\2\2\u1063\u1064\3\2\2\2\u1064\u0221\3\2\2\2\u1065\u1066"+
		"\b\u0112\1\2\u1066\u1067\5\u0224\u0113\2\u1067\u106e\3\2\2\2\u1068\u1069"+
		"\f\4\2\2\u1069\u106a\5\u0226\u0114\2\u106a\u106b\5\u0222\u0112\5\u106b"+
		"\u106d\3\2\2\2\u106c\u1068\3\2\2\2\u106d\u1070\3\2\2\2\u106e\u106c\3\2"+
		"\2\2\u106e\u106f\3\2\2\2\u106f\u0223\3\2\2\2\u1070\u106e\3\2\2\2\u1071"+
		"\u1081\5\u022c\u0117\2\u1072\u1074\7\u0115\2\2\u1073\u1072\3\2\2\2\u1073"+
		"\u1074\3\2\2\2\u1074\u107f\3\2\2\2\u1075\u1076\7\u00bf\2\2\u1076\u1080"+
		"\5\u0228\u0115\2\u1077\u1078\7\35\2\2\u1078\u1080\5\u022a\u0116\2\u1079"+
		"\u107a\t\65\2\2\u107a\u107d\5\u022c\u0117\2\u107b\u107c\7\u0087\2\2\u107c"+
		"\u107e\5\u022c\u0117\2\u107d\u107b\3\2\2\2\u107d\u107e\3\2\2\2\u107e\u1080"+
		"\3\2\2\2\u107f\u1075\3\2\2\2\u107f\u1077\3\2\2\2\u107f\u1079\3\2\2\2\u1080"+
		"\u1082\3\2\2\2\u1081\u1073\3\2\2\2\u1081\u1082\3\2\2\2\u1082\u0225\3\2"+
		"\2\2\u1083\u1092\7\u0235\2\2\u1084\u108c\7\u022c\2\2\u1085\u1086\7\u0231"+
		"\2\2\u1086\u108c\7\u0230\2\2\u1087\u1088\7\u022f\2\2\u1088\u108c\7\u0235"+
		"\2\2\u1089\u108a\7\u022d\2\2\u108a\u108c\7\u0235\2\2\u108b\u1084\3\2\2"+
		"\2\u108b\u1085\3\2\2\2\u108b\u1087\3\2\2\2\u108b\u1089\3\2\2\2\u108c\u1092"+
		"\3\2\2\2\u108d\u108f\t\66\2\2\u108e\u1090\7\u0235\2\2\u108f\u108e\3\2"+
		"\2\2\u108f\u1090\3\2\2\2\u1090\u1092\3\2\2\2\u1091\u1083\3\2\2\2\u1091"+
		"\u108b\3\2\2\2\u1091\u108d\3\2\2\2\u1092\u0227\3\2\2\2\u1093\u1094\7\u0221"+
		"\2\2\u1094\u1095\5\u0168\u00b5\2\u1095\u1096\7\u0222\2\2\u1096\u10a6\3"+
		"\2\2\2\u1097\u1098\7\u0221\2\2\u1098\u109d\5\u022c\u0117\2\u1099\u109a"+
		"\7\u0227\2\2\u109a\u109c\5\u022c\u0117\2\u109b\u1099\3\2\2\2\u109c\u109f"+
		"\3\2\2\2\u109d\u109b\3\2\2\2\u109d\u109e\3\2\2\2\u109e\u10a0\3\2\2\2\u109f"+
		"\u109d\3\2\2\2\u10a0\u10a1\7\u0222\2\2\u10a1\u10a6\3\2\2\2\u10a2\u10a6"+
		"\5\u02f2\u017a\2\u10a3\u10a6\5\u02ea\u0176\2\u10a4\u10a6\5\u02ec\u0177"+
		"\2\u10a5\u1093\3\2\2\2\u10a5\u1097\3\2\2\2\u10a5\u10a2\3\2\2\2\u10a5\u10a3"+
		"\3\2\2\2\u10a5\u10a4\3\2\2\2\u10a6\u0229\3\2\2\2\u10a7\u10a8\5\u022c\u0117"+
		"\2\u10a8\u10a9\7\13\2\2\u10a9\u10aa\5\u022c\u0117\2\u10aa\u022b\3\2\2"+
		"\2\u10ab\u10ac\b\u0117\1\2\u10ac\u10b5\5\u0230\u0119\2\u10ad\u10b2\7\22"+
		"\2\2\u10ae\u10b3\7\u00e2\2\2\u10af\u10b0\7\u01ad\2\2\u10b0\u10b1\7\u01ef"+
		"\2\2\u10b1\u10b3\5\u022c\u0117\2\u10b2\u10ae\3\2\2\2\u10b2\u10af\3\2\2"+
		"\2\u10b3\u10b6\3\2\2\2\u10b4\u10b6\5\u022e\u0118\2\u10b5\u10ad\3\2\2\2"+
		"\u10b5\u10b4\3\2\2\2\u10b5\u10b6\3\2\2\2\u10b6\u10c3\3\2\2\2\u10b7\u10b8"+
		"\f\5\2\2\u10b8\u10b9\t\67\2\2\u10b9\u10c2\5\u022c\u0117\6\u10ba\u10bb"+
		"\f\4\2\2\u10bb\u10bc\t8\2\2\u10bc\u10c2\5\u022c\u0117\5\u10bd\u10be\f"+
		"\3\2\2\u10be\u10bf\7\u0234\2\2\u10bf\u10c0\7\u0234\2\2\u10c0\u10c2\5\u022c"+
		"\u0117\4\u10c1\u10b7\3\2\2\2\u10c1\u10ba\3\2\2\2\u10c1\u10bd\3\2\2\2\u10c2"+
		"\u10c5\3\2\2\2\u10c3\u10c1\3\2\2\2\u10c3\u10c4\3\2\2\2\u10c4\u022d\3\2"+
		"\2\2\u10c5\u10c3\3\2\2\2\u10c6\u10cb\7a\2\2\u10c7\u10c8\7\u0221\2\2\u10c8"+
		"\u10c9\5\u022c\u0117\2\u10c9\u10ca\7\u0222\2\2\u10ca\u10cc\3\2\2\2\u10cb"+
		"\u10c7\3\2\2\2\u10cb\u10cc\3\2\2\2\u10cc\u10cd\3\2\2\2\u10cd\u10ce\7\u01b2"+
		"\2\2\u10ce\u10d3\7\u0177\2\2\u10cf\u10d0\7\u0221\2\2\u10d0\u10d1\5\u022c"+
		"\u0117\2\u10d1\u10d2\7\u0222\2\2\u10d2\u10d4\3\2\2\2\u10d3\u10cf\3\2\2"+
		"\2\u10d3\u10d4\3\2\2\2\u10d4\u10df\3\2\2\2\u10d5\u10da\7\u01ec\2\2\u10d6"+
		"\u10d7\7\u0221\2\2\u10d7\u10d8\5\u022c\u0117\2\u10d8\u10d9\7\u0222\2\2"+
		"\u10d9\u10db\3\2\2\2\u10da\u10d6\3\2\2\2\u10da\u10db\3\2\2\2\u10db\u10dc"+
		"\3\2\2\2\u10dc\u10dd\7\u01b2\2\2\u10dd\u10df\7\u00fb\2\2\u10de\u10c6\3"+
		"\2\2\2\u10de\u10d5\3\2\2\2\u10df\u022f\3\2\2\2\u10e0\u10e5\5\u0238\u011d"+
		"\2\u10e1\u10e2\7\u0236\2\2\u10e2\u10e3\5\u0232\u011a\2\u10e3\u10e4\7\u0237"+
		"\2\2\u10e4\u10e6\3\2\2\2\u10e5\u10e1\3\2\2\2\u10e5\u10e6\3\2\2\2\u10e6"+
		"\u0231\3\2\2\2\u10e7\u10ea\7\f\2\2\u10e8\u10ea\5\u021a\u010e\2\u10e9\u10e7"+
		"\3\2\2\2\u10e9\u10e8\3\2\2\2\u10ea\u10f2\3\2\2\2\u10eb\u10ee\7\u0227\2"+
		"\2\u10ec\u10ef\7\f\2\2\u10ed\u10ef\5\u021a\u010e\2\u10ee\u10ec\3\2\2\2"+
		"\u10ee\u10ed\3\2\2\2\u10ef\u10f1\3\2\2\2\u10f0\u10eb\3\2\2\2\u10f1\u10f4"+
		"\3\2\2\2\u10f2\u10f0\3\2\2\2\u10f2\u10f3\3\2\2\2\u10f3\u10ff\3\2\2\2\u10f4"+
		"\u10f2\3\2\2\2\u10f5\u10fa\5\u0234\u011b\2\u10f6\u10f7\7\u0227\2\2\u10f7"+
		"\u10f9\5\u0234\u011b\2\u10f8\u10f6\3\2\2\2\u10f9\u10fc\3\2\2\2\u10fa\u10f8"+
		"\3\2\2\2\u10fa\u10fb\3\2\2\2\u10fb\u10ff\3\2\2\2\u10fc\u10fa\3\2\2\2\u10fd"+
		"\u10ff\5\u0236\u011c\2\u10fe\u10e9\3\2\2\2\u10fe\u10f5\3\2\2\2\u10fe\u10fd"+
		"\3\2\2\2\u10ff\u0233\3\2\2\2\u1100\u1101\7\u00a2\2\2\u1101\u1113\5\u02cc"+
		"\u0167\2\u1102\u1103\7\u00bf\2\2\u1103\u1105\7\u0221\2\2\u1104\u1106\5"+
		"\u0218\u010d\2\u1105\u1104\3\2\2\2\u1105\u1106\3\2\2\2\u1106\u1107\3\2"+
		"\2\2\u1107\u1114\7\u0222\2\2\u1108\u1109\7\u00df\2\2\u1109\u110b\5\u021a"+
		"\u010e\2\u110a\u1108\3\2\2\2\u110a\u110b\3\2\2\2\u110b\u110c\3\2\2\2\u110c"+
		"\u110d\7\u00a5\2\2\u110d\u110e\5\u021a\u010e\2\u110e\u110f\7\u01b2\2\2"+
		"\u110f\u1110\5\u021a\u010e\2\u1110\u1111\t9\2\2\u1111\u1112\5\u021a\u010e"+
		"\2\u1112\u1114\3\2\2\2\u1113\u1102\3\2\2\2\u1113\u110a\3\2\2\2\u1114\u0235"+
		"\3\2\2\2\u1115\u1116\7\u00a2\2\2\u1116\u1117\7\u0221\2\2\u1117\u111c\5"+
		"\u02cc\u0167\2\u1118\u1119\7\u0227\2\2\u1119\u111b\5\u02cc\u0167\2\u111a"+
		"\u1118\3\2\2\2\u111b\u111e\3\2\2\2\u111c\u111a\3\2\2\2\u111c\u111d\3\2"+
		"\2\2\u111d\u111f\3\2\2\2\u111e\u111c\3\2\2\2\u111f\u1120\7\u0222\2\2\u1120"+
		"\u1121\7\u00bf\2\2\u1121\u1128\7\u0221\2\2\u1122\u1129\5\u0168\u00b5\2"+
		"\u1123\u1125\7\u0221\2\2\u1124\u1126\5\u0218\u010d\2\u1125\u1124\3\2\2"+
		"\2\u1125\u1126\3\2\2\2\u1126\u1127\3\2\2\2\u1127\u1129\7\u0222\2\2\u1128"+
		"\u1122\3\2\2\2\u1128\u1123\3\2\2\2\u1129\u112a\3\2\2\2\u112a\u112b\7\u0222"+
		"\2\2\u112b\u0237\3\2\2\2\u112c\u112d\t8\2\2\u112d\u113d\5\u0238\u011d"+
		"\2\u112e\u112f\7\u014d\2\2\u112f\u113d\5\u0238\u011d\2\u1130\u1131\7G"+
		"\2\2\u1131\u113d\5\u0238\u011d\2\u1132\u1133\7\u0106\2\2\u1133\u113d\5"+
		"\u0238\u011d\2\u1134\u1135\7v\2\2\u1135\u113d\5\u0238\u011d\2\u1136\u1137"+
		"\7\b\2\2\u1137\u113d\5\u0238\u011d\2\u1138\u113d\5\u023a\u011e\2\u1139"+
		"\u113d\5\u0248\u0125\2\u113a\u113d\5\u024c\u0127\2\u113b\u113d\5\u0246"+
		"\u0124\2\u113c\u112c\3\2\2\2\u113c\u112e\3\2\2\2\u113c\u1130\3\2\2\2\u113c"+
		"\u1132\3\2\2\2\u113c\u1134\3\2\2\2\u113c\u1136\3\2\2\2\u113c\u1138\3\2"+
		"\2\2\u113c\u1139\3\2\2\2\u113c\u113a\3\2\2\2\u113c\u113b\3\2\2\2\u113d"+
		"\u0239\3\2\2\2\u113e\u1141\5\u0240\u0121\2\u113f\u1141\5\u023c\u011f\2"+
		"\u1140\u113e\3\2\2\2\u1140\u113f\3\2\2\2\u1141\u023b\3\2\2\2\u1142\u1144"+
		"\5\u02b2\u015a\2\u1143\u1142\3\2\2\2\u1143\u1144\3\2\2\2\u1144\u1145\3"+
		"\2\2\2\u1145\u1146\7\60\2\2\u1146\u1148\5\u021a\u010e\2\u1147\u1149\5"+
		"\u023e\u0120\2\u1148\u1147\3\2\2\2\u1149\u114a\3\2\2\2\u114a\u1148\3\2"+
		"\2\2\u114a\u114b\3\2\2\2\u114b\u114d\3\2\2\2\u114c\u114e\5\u0244\u0123"+
		"\2\u114d\u114c\3\2\2\2\u114d\u114e\3\2\2\2\u114e\u114f\3\2\2\2\u114f\u1151"+
		"\7\u0083\2\2\u1150\u1152\7\60\2\2\u1151\u1150\3\2\2\2\u1151\u1152\3\2"+
		"\2\2\u1152\u1154\3\2\2\2\u1153\u1155\5\u02b2\u015a\2\u1154\u1153\3\2\2"+
		"\2\u1154\u1155\3\2\2\2\u1155\u023d\3\2\2\2\u1156\u1157\7\u01d6\2\2\u1157"+
		"\u1158\5\u021a\u010e\2\u1158\u115b\7\u01a7\2\2\u1159\u115c\5\u0104\u0083"+
		"\2\u115a\u115c\5\u021a\u010e\2\u115b\u1159\3\2\2\2\u115b\u115a\3\2\2\2"+
		"\u115c\u023f\3\2\2\2\u115d\u115f\5\u02b2\u015a\2\u115e\u115d\3\2\2\2\u115e"+
		"\u115f\3\2\2\2\u115f\u1160\3\2\2\2\u1160\u1162\7\60\2\2\u1161\u1163\5"+
		"\u0242\u0122\2\u1162\u1161\3\2\2\2\u1163\u1164\3\2\2\2\u1164\u1162\3\2"+
		"\2\2\u1164\u1165\3\2\2\2\u1165\u1167\3\2\2\2\u1166\u1168\5\u0244\u0123"+
		"\2\u1167\u1166\3\2\2\2\u1167\u1168\3\2\2\2\u1168\u1169\3\2\2\2\u1169\u116b"+
		"\7\u0083\2\2\u116a\u116c\7\60\2\2\u116b\u116a\3\2\2\2\u116b\u116c\3\2"+
		"\2\2\u116c\u116e\3\2\2\2\u116d\u116f\5\u02b2\u015a\2\u116e\u116d\3\2\2"+
		"\2\u116e\u116f\3\2\2\2\u116f\u0241\3\2\2\2\u1170\u1171\7\u01d6\2\2\u1171"+
		"\u1172\5\u021a\u010e\2\u1172\u1175\7\u01a7\2\2\u1173\u1176\5\u0104\u0083"+
		"\2\u1174\u1176\5\u021a\u010e\2\u1175\u1173\3\2\2\2\u1175\u1174\3\2\2\2"+
		"\u1176\u0243\3\2\2\2\u1177\u117a\7}\2\2\u1178\u117b\5\u0104\u0083\2\u1179"+
		"\u117b\5\u021a\u010e\2\u117a\u1178\3\2\2\2\u117a\u1179\3\2\2\2\u117b\u0245"+
		"\3\2\2\2\u117c\u117d\5\u02f0\u0179\2\u117d\u117e\5\u02fe\u0180\2\u117e"+
		"\u1190\3\2\2\2\u117f\u1190\5\u02ea\u0176\2\u1180\u1190\5\u02f2\u017a\2"+
		"\u1181\u1190\5\u02ec\u0177\2\u1182\u1183\7\u0221\2\2\u1183\u1184\5\u0168"+
		"\u00b5\2\u1184\u1188\7\u0222\2\2\u1185\u1187\5\u016c\u00b7\2\u1186\u1185"+
		"\3\2\2\2\u1187\u118a\3\2\2\2\u1188\u1186\3\2\2\2\u1188\u1189\3\2\2\2\u1189"+
		"\u1190\3\2\2\2\u118a\u1188\3\2\2\2\u118b\u118c\7\u0221\2\2\u118c\u118d"+
		"\5\u0218\u010d\2\u118d\u118e\7\u0222\2\2\u118e\u1190\3\2\2\2\u118f\u117c"+
		"\3\2\2\2\u118f\u117f\3\2\2\2\u118f\u1180\3\2\2\2\u118f\u1181\3\2\2\2\u118f"+
		"\u1182\3\2\2\2\u118f\u118b\3\2\2\2\u1190\u0247\3\2\2\2\u1191\u119a\t:"+
		"\2\2\u1192\u1193\7\u0221\2\2\u1193\u1194\5\u0168\u00b5\2\u1194\u1195\7"+
		"\u0222\2\2\u1195\u119b\3\2\2\2\u1196\u1197\7\u0221\2\2\u1197\u1198\5\u021a"+
		"\u010e\2\u1198\u1199\7\u0222\2\2\u1199\u119b\3\2\2\2\u119a\u1192\3\2\2"+
		"\2\u119a\u1196\3\2\2\2\u119b\u0249\3\2\2\2\u119c\u119d\7\u020c\2\2\u119d"+
		"\u119e\7\u0221\2\2\u119e\u119f\5\u021a\u010e\2\u119f\u11a0\7\u0227\2\2"+
		"\u11a0\u11a3\5\u021a\u010e\2\u11a1\u11a2\7\u0227\2\2\u11a2\u11a4\5\u021a"+
		"\u010e\2\u11a3\u11a1\3\2\2\2\u11a3\u11a4\3\2\2\2\u11a4\u11a5\3\2\2\2\u11a5"+
		"\u11a6\7\u0222\2\2\u11a6\u11e3\3\2\2\2\u11a7\u11a8\7\u020d\2\2\u11a8\u11ac"+
		"\7\u0221\2\2\u11a9\u11ad\5\u02f0\u0179\2\u11aa\u11ad\5\u024c\u0127\2\u11ab"+
		"\u11ad\5\u021a\u010e\2\u11ac\u11a9\3\2\2\2\u11ac\u11aa\3\2\2\2\u11ac\u11ab"+
		"\3\2\2\2\u11ad\u11b0\3\2\2\2\u11ae\u11af\7\u0227\2\2\u11af\u11b1\5\u02f8"+
		"\u017d\2\u11b0\u11ae\3\2\2\2\u11b0\u11b1\3\2\2\2\u11b1\u11b4\3\2\2\2\u11b2"+
		"\u11b3\7\u0227\2\2\u11b3\u11b5\5\u02f8\u017d\2\u11b4\u11b2\3\2\2\2\u11b4"+
		"\u11b5\3\2\2\2\u11b5\u11b6\3\2\2\2\u11b6\u11b7\7\u0222\2\2\u11b7\u11e3"+
		"\3\2\2\2\u11b8\u11b9\7\u0200\2\2\u11b9\u11ba\7\u0221\2\2\u11ba\u11bb\5"+
		"\u0218\u010d\2\u11bb\u11bc\7\u0222\2\2\u11bc\u11e3\3\2\2\2\u11bd\u11be"+
		"\7\66\2\2\u11be\u11bf\7\u0221\2\2\u11bf\u11c0\5\u022c\u0117\2\u11c0\u11c1"+
		"\7\u01c7\2\2\u11c1\u11c2\7\u0102\2\2\u11c2\u11c3\7\u0222\2\2\u11c3\u11e3"+
		"\3\2\2\2\u11c4\u11c5\7\u0207\2\2\u11c5\u11c6\7\u0221\2\2\u11c6\u11c7\5"+
		"\u021a\u010e\2\u11c7\u11c8\7\u0227\2\2\u11c8\u11c9\5\u021a\u010e\2\u11c9"+
		"\u11ca\7\u0222\2\2\u11ca\u11e3\3\2\2\2\u11cb\u11cc\7\u020e\2\2\u11cc\u11d4"+
		"\7\u0221\2\2\u11cd\u11cf\t;\2\2\u11ce\u11cd\3\2\2\2\u11ce\u11cf\3\2\2"+
		"\2\u11cf\u11d1\3\2\2\2\u11d0\u11d2\5\u02f8\u017d\2\u11d1\u11d0\3\2\2\2"+
		"\u11d1\u11d2\3\2\2\2\u11d2\u11d3\3\2\2\2\u11d3\u11d5\7\u00a5\2\2\u11d4"+
		"\u11ce\3\2\2\2\u11d4\u11d5\3\2\2\2\u11d5\u11d6\3\2\2\2\u11d6\u11d7\5\u022c"+
		"\u0117\2\u11d7\u11d8\7\u0222\2\2\u11d8\u11e3\3\2\2\2\u11d9\u11da\7\u0215"+
		"\2\2\u11da\u11db\7\u0221\2\2\u11db\u11de\5\u021a\u010e\2\u11dc\u11dd\7"+
		"\u0227\2\2\u11dd\u11df\5\u02f8\u017d\2\u11de\u11dc\3\2\2\2\u11de\u11df"+
		"\3\2\2\2\u11df\u11e0\3\2\2\2\u11e0\u11e1\7\u0222\2\2\u11e1\u11e3\3\2\2"+
		"\2\u11e2\u119c\3\2\2\2\u11e2\u11a7\3\2\2\2\u11e2\u11b8\3\2\2\2\u11e2\u11bd"+
		"\3\2\2\2\u11e2\u11c4\3\2\2\2\u11e2\u11cb\3\2\2\2\u11e2\u11d9\3\2\2\2\u11e3"+
		"\u024b\3\2\2\2\u11e4\u11e8\5\u024a\u0126\2\u11e5\u11e8\5\u024e\u0128\2"+
		"\u11e6\u11e8\5\u0252\u012a\2\u11e7\u11e4\3\2\2\2\u11e7\u11e5\3\2\2\2\u11e7"+
		"\u11e6\3\2\2\2\u11e8\u024d\3\2\2\2\u11e9\u11ec\5\u0250\u0129\2\u11ea\u11ed"+
		"\5\u0234\u011b\2\u11eb\u11ed\5\u0236\u011c\2\u11ec\u11ea\3\2\2\2\u11ec"+
		"\u11eb\3\2\2\2\u11ec\u11ed\3\2\2\2\u11ed\u024f\3\2\2\2\u11ee\u11ef\7\u020f"+
		"\2\2\u11ef\u11f1\7\u0221\2\2\u11f0\u11f2\t<\2\2\u11f1\u11f0\3\2\2\2\u11f1"+
		"\u11f2\3\2\2\2\u11f2\u11f3\3\2\2\2\u11f3\u11f4\5\u021a\u010e\2\u11f4\u11f5"+
		"\7\u0222\2\2\u11f5\u1229\3\2\2\2\u11f6\u11f7\7T\2\2\u11f7\u11ff\7\u0221"+
		"\2\2\u11f8\u1200\7\u0224\2\2\u11f9\u11fb\t&\2\2\u11fa\u11f9\3\2\2\2\u11fa"+
		"\u11fb\3\2\2\2\u11fb\u11fc\3\2\2\2\u11fc\u11fe\5\u022c\u0117\2\u11fd\u11fa"+
		"\3\2\2\2\u11fd\u11fe\3\2\2\2\u11fe\u1200\3\2\2\2\u11ff\u11f8\3\2\2\2\u11ff";
	private static final String _serializedATNSegment2 =
		"\u11fd\3\2\2\2\u1200\u1201\3\2\2\2\u1201\u1203\7\u0222\2\2\u1202\u1204"+
		"\5\u025a\u012e\2\u1203\u1202\3\2\2\2\u1203\u1204\3\2\2\2\u1204\u1229\3"+
		"\2\2\2\u1205\u1206\7\u020a\2\2\u1206\u1207\7\u0221\2\2\u1207\u120a\5\u021a"+
		"\u010e\2\u1208\u1209\7\u0227\2\2\u1209\u120b\7\u021b\2\2\u120a\u1208\3"+
		"\2\2\2\u120a\u120b\3\2\2\2\u120b\u120c\3\2\2\2\u120c\u120d\7\u0222\2\2"+
		"\u120d\u1229\3\2\2\2\u120e\u120f\7\u01fd\2\2\u120f\u1211\7\u0221\2\2\u1210"+
		"\u1212\t<\2\2\u1211\u1210\3\2\2\2\u1211\u1212\3\2\2\2\u1212\u1213\3\2"+
		"\2\2\u1213\u1214\5\u021a\u010e\2\u1214\u1215\7\u0222\2\2\u1215\u1229\3"+
		"\2\2\2\u1216\u1217\7\u0203\2\2\u1217\u1219\7\u0221\2\2\u1218\u121a\t<"+
		"\2\2\u1219\u1218\3\2\2\2\u1219\u121a\3\2\2\2\u121a\u121b\3\2\2\2\u121b"+
		"\u121c\5\u021a\u010e\2\u121c\u121d\7\u0222\2\2\u121d\u1229\3\2\2\2\u121e"+
		"\u121f\7\u0213\2\2\u121f\u1220\7\u0221\2\2\u1220\u1221\5\u0218\u010d\2"+
		"\u1221\u1222\7\u0222\2\2\u1222\u1229\3\2\2\2\u1223\u1224\7\u0214\2\2\u1224"+
		"\u1225\7\u0221\2\2\u1225\u1226\5\u0218\u010d\2\u1226\u1227\7\u0222\2\2"+
		"\u1227\u1229\3\2\2\2\u1228\u11ee\3\2\2\2\u1228\u11f6\3\2\2\2\u1228\u1205"+
		"\3\2\2\2\u1228\u120e\3\2\2\2\u1228\u1216\3\2\2\2\u1228\u121e\3\2\2\2\u1228"+
		"\u1223\3\2\2\2\u1229\u0251\3\2\2\2\u122a\u122b\5\u0254\u012b\2\u122b\u122d"+
		"\5\u02da\u016e\2\u122c\u122e\5\u025a\u012e\2\u122d\u122c\3\2\2\2\u122d"+
		"\u122e\3\2\2\2\u122e\u1366\3\2\2\2\u122f\u1230\5\u0300\u0181\2\u1230\u1232"+
		"\5\u02dc\u016f\2\u1231\u1233\5\u0262\u0132\2\u1232\u1231\3\2\2\2\u1232"+
		"\u1233\3\2\2\2\u1233\u1366\3\2\2\2\u1234\u1235\7T\2\2\u1235\u123b\7\u0221"+
		"\2\2\u1236\u123c\7\u0224\2\2\u1237\u1239\t&\2\2\u1238\u1237\3\2\2\2\u1238"+
		"\u1239\3\2\2\2\u1239\u123a\3\2\2\2\u123a\u123c\5\u022c\u0117\2\u123b\u1236"+
		"\3\2\2\2\u123b\u1238\3\2\2\2\u123c\u123d\3\2\2\2\u123d\u123f\7\u0222\2"+
		"\2\u123e\u1240\5\u025a\u012e\2\u123f\u123e\3\2\2\2\u123f\u1240\3\2\2\2"+
		"\u1240\u1366\3\2\2\2\u1241\u1242\t=\2\2\u1242\u1249\7\u0221\2\2\u1243"+
		"\u1244\7\u00fc\2\2\u1244\u1245\7\u0221\2\2\u1245\u1246\5\u0168\u00b5\2"+
		"\u1246\u1247\7\u0222\2\2\u1247\u124a\3\2\2\2\u1248\u124a\5\u022c\u0117"+
		"\2\u1249\u1243\3\2\2\2\u1249\u1248\3\2\2\2\u124a\u124b\3\2\2\2\u124b\u124c"+
		"\7\17\2\2\u124c\u124d\5\u02e2\u0172\2\u124d\u124e\7\u0222\2\2\u124e\u1366"+
		"\3\2\2\2\u124f\u1250\7;\2\2\u1250\u1251\7\u0221\2\2\u1251\u1257\5\u02f0"+
		"\u0179\2\u1252\u1255\7\u0227\2\2\u1253\u1256\5\u02f4\u017b\2\u1254\u1256"+
		"\5\u02f8\u017d\2\u1255\u1253\3\2\2\2\u1255\u1254\3\2\2\2\u1256\u1258\3"+
		"\2\2\2\u1257\u1252\3\2\2\2\u1257\u1258\3\2\2\2\u1258\u1259\3\2\2\2\u1259"+
		"\u125a\7\u0222\2\2\u125a\u1366\3\2\2\2\u125b\u125c\7<\2\2\u125c\u125e"+
		"\7\u0221\2\2\u125d\u125f\t>\2\2\u125e\u125d\3\2\2\2\u125e\u125f\3\2\2"+
		"\2\u125f\u1260\3\2\2\2\u1260\u1262\5\u022c\u0117\2\u1261\u1263\5\u0266"+
		"\u0134\2\u1262\u1261\3\2\2\2\u1262\u1263\3\2\2\2\u1263\u1264\3\2\2\2\u1264"+
		"\u1265\7\u0222\2\2\u1265\u1366\3\2\2\2\u1266\u1267\5\u0256\u012c\2\u1267"+
		"\u1269\5\u02d8\u016d\2\u1268\u126a\5\u0268\u0135\2\u1269\u1268\3\2\2\2"+
		"\u126a\u126b\3\2\2\2\u126b\u1269\3\2\2\2\u126b\u126c\3\2\2\2\u126c\u1366"+
		"\3\2\2\2\u126d\u126e\5\u02c4\u0163\2\u126e\u126f\t?\2\2\u126f\u1366\3"+
		"\2\2\2\u1270\u1271\7i\2\2\u1271\u1272\7\u0221\2\2\u1272\u1274\5\u022c"+
		"\u0117\2\u1273\u1275\t@\2\2\u1274\u1273\3\2\2\2\u1274\u1275\3\2\2\2\u1275"+
		"\u1276\3\2\2\2\u1276\u1277\7\u0222\2\2\u1277\u1366\3\2\2\2\u1278\u1279"+
		"\7\u0093\2\2\u1279\u127a\7\u0221\2\2\u127a\u127b\5\u0300\u0181\2\u127b"+
		"\u127c\7\u00a5\2\2\u127c\u127d\5\u022c\u0117\2\u127d\u127e\7\u0222\2\2"+
		"\u127e\u1366\3\2\2\2\u127f\u1280\tA\2\2\u1280\u1282\5\u02da\u016e\2\u1281"+
		"\u1283\5\u02de\u0170\2\u1282\u1281\3\2\2\2\u1282\u1283\3\2\2\2\u1283\u1284"+
		"\3\2\2\2\u1284\u1285\5\u025a\u012e\2\u1285\u1366\3\2\2\2\u1286\u1287\5"+
		"\u0258\u012d\2\u1287\u1288\7\u0221\2\2\u1288\u128a\5\u0218\u010d\2\u1289"+
		"\u128b\5\u026a\u0136\2\u128a\u1289\3\2\2\2\u128a\u128b\3\2\2\2\u128b\u128d"+
		"\3\2\2\2\u128c\u128e\5\u0262\u0132\2\u128d\u128c\3\2\2\2\u128d\u128e\3"+
		"\2\2\2\u128e\u128f\3\2\2\2\u128f\u1290\7\u0222\2\2\u1290\u1366\3\2\2\2"+
		"\u1291\u1292\7\u01b5\2\2\u1292\u1293\7\u0221\2\2\u1293\u1296\5\u021a\u010e"+
		"\2\u1294\u1295\7\u01c7\2\2\u1295\u1297\tB\2\2\u1296\u1294\3\2\2\2\u1296"+
		"\u1297\3\2\2\2\u1297\u129c\3\2\2\2\u1298\u1299\7\u0227\2\2\u1299\u129b"+
		"\5\u021a\u010e\2\u129a\u1298\3\2\2\2\u129b\u129e\3\2\2\2\u129c\u129a\3"+
		"\2\2\2\u129c\u129d\3\2\2\2\u129d\u129f\3\2\2\2\u129e\u129c\3\2\2\2\u129f"+
		"\u12a0\7\u0222\2\2\u12a0\u1366\3\2\2\2\u12a1\u12a2\7\u01b6\2\2\u12a2\u12a3"+
		"\7\u0221\2\2\u12a3\u12a4\5\u021a\u010e\2\u12a4\u12a6\7\17\2\2\u12a5\u12a7"+
		"\7\u015b\2\2\u12a6\u12a5\3\2\2\2\u12a6\u12a7\3\2\2\2\u12a7\u12a8\3\2\2"+
		"\2\u12a8\u12a9\5\u02e2\u0172\2\u12a9\u12aa\7\u0222\2\2\u12aa\u1366\3\2"+
		"\2\2\u12ab\u12ac\7\u020e\2\2\u12ac\u12b4\7\u0221\2\2\u12ad\u12af\t;\2"+
		"\2\u12ae\u12ad\3\2\2\2\u12ae\u12af\3\2\2\2\u12af\u12b1\3\2\2\2\u12b0\u12b2"+
		"\5\u02f8\u017d\2\u12b1\u12b0\3\2\2\2\u12b1\u12b2\3\2\2\2\u12b2\u12b3\3"+
		"\2\2\2\u12b3\u12b5\7\u00a5\2\2\u12b4\u12ae\3\2\2\2\u12b4\u12b5\3\2\2\2"+
		"\u12b5\u12b6\3\2\2\2\u12b6\u12b7\5\u022c\u0117\2\u12b7\u12b8\7\u0222\2"+
		"\2\u12b8\u1366\3\2\2\2\u12b9\u12ba\7\u01dd\2\2\u12ba\u12bb\7\u0221\2\2"+
		"\u12bb\u12bd\5\u021a\u010e\2\u12bc\u12be\5\u01ca\u00e6\2\u12bd\u12bc\3"+
		"\2\2\2\u12bd\u12be\3\2\2\2\u12be\u12bf\3\2\2\2\u12bf\u12c2\7\u0222\2\2"+
		"\u12c0\u12c1\7\u021a\2\2\u12c1\u12c3\5\u02ee\u0178\2\u12c2\u12c0\3\2\2"+
		"\2\u12c2\u12c3\3\2\2\2\u12c3\u1366\3\2\2\2\u12c4\u12c5\tC\2\2\u12c5\u12c6"+
		"\7\u0221\2\2\u12c6\u12cb\5\u0276\u013c\2\u12c7\u12c8\7\u0227\2\2\u12c8"+
		"\u12ca\5\u0276\u013c\2\u12c9\u12c7\3\2\2\2\u12ca\u12cd\3\2\2\2\u12cb\u12c9"+
		"\3\2\2\2\u12cb\u12cc\3\2\2\2\u12cc\u12ce\3\2\2\2\u12cd\u12cb\3\2\2\2\u12ce"+
		"\u12d1\7\u0222\2\2\u12cf\u12d0\7\u021a\2\2\u12d0\u12d2\5\u02ee\u0178\2"+
		"\u12d1\u12cf\3\2\2\2\u12d1\u12d2\3\2\2\2\u12d2\u1366\3\2\2\2\u12d3\u12d4"+
		"\7\u01e1\2\2\u12d4\u12d6\7\u0221\2\2\u12d5\u12d7\tD\2\2\u12d6\u12d5\3"+
		"\2\2\2\u12d6\u12d7\3\2\2\2\u12d7\u12d9\3\2\2\2\u12d8\u12da\tE\2\2\u12d9"+
		"\u12d8\3\2\2\2\u12d9\u12da\3\2\2\2\u12da\u12db\3\2\2\2\u12db\u12de\5\u021a"+
		"\u010e\2\u12dc\u12dd\7\u0227\2\2\u12dd\u12df\5\u026e\u0138\2\u12de\u12dc"+
		"\3\2\2\2\u12de\u12df\3\2\2\2\u12df\u12e7\3\2\2\2\u12e0\u12e1\7\u0227\2"+
		"\2\u12e1\u12e3\5\u021a\u010e\2\u12e2\u12e4\5\u028a\u0146\2\u12e3\u12e2"+
		"\3\2\2\2\u12e3\u12e4\3\2\2\2\u12e4\u12e6\3\2\2\2\u12e5\u12e0\3\2\2\2\u12e6"+
		"\u12e9\3\2\2\2\u12e7\u12e5\3\2\2\2\u12e7\u12e8\3\2\2\2\u12e8\u12ea\3\2"+
		"\2\2\u12e9\u12e7\3\2\2\2\u12ea\u12ed\7\u0222\2\2\u12eb\u12ec\7\u021a\2"+
		"\2\u12ec\u12ee\5\u02ee\u0178\2\u12ed\u12eb\3\2\2\2\u12ed\u12ee\3\2\2\2"+
		"\u12ee\u1366\3\2\2\2\u12ef\u12f0\7\u01e2\2\2\u12f0\u12f1\7\u0221\2\2\u12f1"+
		"\u12f3\5\u021a\u010e\2\u12f2\u12f4\5\u026c\u0137\2\u12f3\u12f2\3\2\2\2"+
		"\u12f3\u12f4\3\2\2\2\u12f4\u12f5\3\2\2\2\u12f5\u12f6\7\u0222\2\2\u12f6"+
		"\u1366\3\2\2\2\u12f7\u12f8\7\u01e5\2\2\u12f8\u12f9\7\u0221\2\2\u12f9\u12fa"+
		"\tF\2\2\u12fa\u12fc\5\u022c\u0117\2\u12fb\u12fd\7\u01d4\2\2\u12fc\u12fb"+
		"\3\2\2\2\u12fc\u12fd\3\2\2\2\u12fd\u12fe\3\2\2\2\u12fe\u1301\7\u0222\2"+
		"\2\u12ff\u1300\7\u021a\2\2\u1300\u1302\5\u02ee\u0178\2\u1301\u12ff\3\2"+
		"\2\2\u1301\u1302\3\2\2\2\u1302\u1366\3\2\2\2\u1303\u1304\7\u01e6\2\2\u1304"+
		"\u1309\7\u0221\2\2\u1305\u1306\7\u00fd\2\2\u1306\u130a\5\u02fa\u017e\2"+
		"\u1307\u1308\7\u0088\2\2\u1308\u130a\5\u022c\u0117\2\u1309\u1305\3\2\2"+
		"\2\u1309\u1307\3\2\2\2\u130a\u130d\3\2\2\2\u130b\u130c\7\u0227\2\2\u130c"+
		"\u130e\5\u022c\u0117\2\u130d\u130b\3\2\2\2\u130d\u130e\3\2\2\2\u130e\u130f"+
		"\3\2\2\2\u130f\u1312\7\u0222\2\2\u1310\u1311\7\u021a\2\2\u1311\u1313\5"+
		"\u02ee\u0178\2\u1312\u1310\3\2\2\2\u1312\u1313\3\2\2\2\u1313\u1366\3\2"+
		"\2\2\u1314\u1315\7\u01e7\2\2\u1315\u1316\7\u0221\2\2\u1316\u1318\5\u022c"+
		"\u0117\2\u1317\u1319\5\u026c\u0137\2\u1318\u1317\3\2\2\2\u1318\u1319\3"+
		"\2\2\2\u1319\u131a\3\2\2\2\u131a\u131b\7\u0164\2\2\u131b\u131f\7M\2\2"+
		"\u131c\u131d\7\u0117\2\2\u131d\u131e\7\u0123\2\2\u131e\u1320\7\177\2\2"+
		"\u131f\u131c\3\2\2\2\u131f\u1320\3\2\2\2\u1320\u1321\3\2\2\2\u1321\u1324"+
		"\7\u0222\2\2\u1322\u1323\7\u021a\2\2\u1323\u1325\5\u02ee\u0178\2\u1324"+
		"\u1322\3\2\2\2\u1324\u1325\3\2\2\2\u1325\u1366\3\2\2\2\u1326\u1327\7\u01e8"+
		"\2\2\u1327\u1328\7\u0221\2\2\u1328\u132b\5\u022c\u0117\2\u1329\u132a\7"+
		"\u0227\2\2\u132a\u132c\5\u0278\u013d\2\u132b\u1329\3\2\2\2\u132b\u132c"+
		"\3\2\2\2\u132c\u132f\3\2\2\2\u132d\u132e\7\u0227\2\2\u132e\u1330\5\u027a"+
		"\u013e\2\u132f\u132d\3\2\2\2\u132f\u1330\3\2\2\2\u1330\u1331\3\2\2\2\u1331"+
		"\u1334\7\u0222\2\2\u1332\u1333\7\u021a\2\2\u1333\u1335\5\u02ee\u0178\2"+
		"\u1334\u1332\3\2\2\2\u1334\u1335\3\2\2\2\u1335\u1366\3\2\2\2\u1336\u1337"+
		"\7\u01e9\2\2\u1337\u1338\7\u0221\2\2\u1338\u1339\tF\2\2\u1339\u133c\5"+
		"\u022c\u0117\2\u133a\u133b\7\17\2\2\u133b\u133d\5\u02e2\u0172\2\u133c"+
		"\u133a\3\2\2\2\u133c\u133d\3\2\2\2\u133d\u133f\3\2\2\2\u133e\u1340\5\u027c"+
		"\u013f\2\u133f\u133e\3\2\2\2\u133f\u1340\3\2\2\2\u1340\u1342\3\2\2\2\u1341"+
		"\u1343\5\u027e\u0140\2\u1342\u1341\3\2\2\2\u1342\u1343\3\2\2\2\u1343\u1345"+
		"\3\2\2\2\u1344\u1346\5\u0280\u0141\2\u1345\u1344\3\2\2\2\u1345\u1346\3"+
		"\2\2\2\u1346\u1349\3\2\2\2\u1347\u1348\tG\2\2\u1348\u134a\7l\2\2\u1349"+
		"\u1347\3\2\2\2\u1349\u134a\3\2\2\2\u134a\u134b\3\2\2\2\u134b\u134e\7\u0222"+
		"\2\2\u134c\u134d\7\u021a\2\2\u134d\u134f\5\u02ee\u0178\2\u134e\u134c\3"+
		"\2\2\2\u134e\u134f\3\2\2\2\u134f\u1366\3\2\2\2\u1350\u1351\7\u01ea\2\2"+
		"\u1351\u1353\7\u0221\2\2\u1352\u1354\5\u0270\u0139\2\u1353\u1352\3\2\2"+
		"\2\u1353\u1354\3\2\2\2\u1354\u1355\3\2\2\2\u1355\u1357\5\u022c\u0117\2"+
		"\u1356\u1358\5\u026c\u0137\2\u1357\u1356\3\2\2\2\u1357\u1358\3\2\2\2\u1358"+
		"\u135e\3\2\2\2\u1359\u135a\7>\2\2\u135a\u135b\5\u0272\u013a\2\u135b\u135c"+
		"\7\u0227\2\2\u135c\u135d\5\u0272\u013a\2\u135d\u135f\3\2\2\2\u135e\u1359"+
		"\3\2\2\2\u135e\u135f\3\2\2\2\u135f\u1360\3\2\2\2\u1360\u1363\7\u0222\2"+
		"\2\u1361\u1362\7\u021a\2\2\u1362\u1364\5\u02ee\u0178\2\u1363\u1361\3\2"+
		"\2\2\u1363\u1364\3\2\2\2\u1364\u1366\3\2\2\2\u1365\u122a\3\2\2\2\u1365"+
		"\u122f\3\2\2\2\u1365\u1234\3\2\2\2\u1365\u1241\3\2\2\2\u1365\u124f\3\2"+
		"\2\2\u1365\u125b\3\2\2\2\u1365\u1266\3\2\2\2\u1365\u126d\3\2\2\2\u1365"+
		"\u1270\3\2\2\2\u1365\u1278\3\2\2\2\u1365\u127f\3\2\2\2\u1365\u1286\3\2"+
		"\2\2\u1365\u1291\3\2\2\2\u1365\u12a1\3\2\2\2\u1365\u12ab\3\2\2\2\u1365"+
		"\u12b9\3\2\2\2\u1365\u12c4\3\2\2\2\u1365\u12d3\3\2\2\2\u1365\u12ef\3\2"+
		"\2\2\u1365\u12f7\3\2\2\2\u1365\u1303\3\2\2\2\u1365\u1314\3\2\2\2\u1365"+
		"\u1326\3\2\2\2\u1365\u1336\3\2\2\2\u1365\u1350\3\2\2\2\u1366\u0253\3\2"+
		"\2\2\u1367\u1368\tH\2\2\u1368\u0255\3\2\2\2\u1369\u136a\tI\2\2\u136a\u0257"+
		"\3\2\2\2\u136b\u136c\tJ\2\2\u136c\u0259\3\2\2\2\u136d\u136e\7\u012e\2"+
		"\2\u136e\u1370\7\u0221\2\2\u136f\u1371\5\u0186\u00c4\2\u1370\u136f\3\2"+
		"\2\2\u1370\u1371\3\2\2\2\u1371\u1376\3\2\2\2\u1372\u1374\5\u01ca\u00e6"+
		"\2\u1373\u1375\5\u025c\u012f\2\u1374\u1373\3\2\2\2\u1374\u1375\3\2\2\2"+
		"\u1375\u1377\3\2\2\2\u1376\u1372\3\2\2\2\u1376\u1377\3\2\2\2\u1377\u1378"+
		"\3\2\2\2\u1378\u1379\7\u0222\2\2\u1379\u025b\3\2\2\2\u137a\u1381\5\u025e"+
		"\u0130\2\u137b\u137c\7\35\2\2\u137c\u137d\5\u0260\u0131\2\u137d\u137e"+
		"\7\13\2\2\u137e\u137f\5\u0260\u0131\2\u137f\u1382\3\2\2\2\u1380\u1382"+
		"\5\u0260\u0131\2\u1381\u137b\3\2\2\2\u1381\u1380\3\2\2\2\u1382\u025d\3"+
		"\2\2\2\u1383\u1384\tK\2\2\u1384\u025f\3\2\2\2\u1385\u1386\7\u01bb\2\2"+
		"\u1386\u138d\7\u0148\2\2\u1387\u1388\7Y\2\2\u1388\u138d\7\u016d\2\2\u1389"+
		"\u138a\5\u022c\u0117\2\u138a\u138b\tL\2\2\u138b\u138d\3\2\2\2\u138c\u1385"+
		"\3\2\2\2\u138c\u1387\3\2\2\2\u138c\u1389\3\2\2\2\u138d\u0261\3\2\2\2\u138e"+
		"\u1398\7\u01c7\2\2\u138f\u1399\7\u0224\2\2\u1390\u1395\5\u0264\u0133\2"+
		"\u1391\u1392\7\u0227\2\2\u1392\u1394\5\u0264\u0133\2\u1393\u1391\3\2\2"+
		"\2\u1394\u1397\3\2\2\2\u1395\u1393\3\2\2\2\u1395\u1396\3\2\2\2\u1396\u1399"+
		"\3\2\2\2\u1397\u1395\3\2\2\2\u1398\u138f\3\2\2\2\u1398\u1390\3\2\2\2\u1399"+
		"\u0263\3\2\2\2\u139a\u139c\7\u00bf\2\2\u139b\u139d\7\u012d\2\2\u139c\u139b"+
		"\3\2\2\2\u139c\u139d\3\2\2\2\u139d\u13a0\3\2\2\2\u139e\u13a0\7\u012d\2"+
		"\2\u139f\u139a\3\2\2\2\u139f\u139e\3\2\2\2\u139f\u13a0\3\2\2\2\u13a0\u13a1"+
		"\3\2\2\2\u13a1\u13a3\5\u0174\u00bb\2\u13a2\u13a4\5\u028a\u0146\2\u13a3"+
		"\u13a2\3\2\2\2\u13a3\u13a4\3\2\2\2\u13a4\u0265\3\2\2\2\u13a5\u13a6\7\u0128"+
		"\2\2\u13a6\u13a7\7*\2\2\u13a7\u13a8\5\u022c\u0117\2\u13a8\u0267\3\2\2"+
		"\2\u13a9\u13aa\7\u01d9\2\2\u13aa\u13ab\7\u00ab\2\2\u13ab\u13ac\7\u0221"+
		"\2\2\u13ac\u13ad\5\u01ca\u00e6\2\u13ad\u13ae\7\u0222\2\2\u13ae\u13b1\3"+
		"\2\2\2\u13af\u13b1\5\u025a\u012e\2\u13b0\u13a9\3\2\2\2\u13b0\u13af\3\2"+
		"\2\2\u13b1\u0269\3\2\2\2\u13b2\u13c8\7S\2\2\u13b3\u13b5\7\u00f8\2\2\u13b4"+
		"\u13b6\7\26\2\2\u13b5\u13b4\3\2\2\2\u13b5\u13b6\3\2\2\2\u13b6\u13c9\3"+
		"\2\2\2\u13b7\u13b8\7\u0221\2\2\u13b8\u13bd\5\u0294\u014b\2\u13b9\u13ba"+
		"\7\u0227\2\2\u13ba\u13bc\5\u0294\u014b\2\u13bb\u13b9\3\2\2\2\u13bc\u13bf"+
		"\3\2\2\2\u13bd\u13bb\3\2\2\2\u13bd\u13be\3\2\2\2\u13be\u13c0\3\2\2\2\u13bf"+
		"\u13bd\3\2\2\2\u13c0\u13c1\7\u0222\2\2\u13c1\u13c2\7\u01c9\2\2\u13c2\u13c4"+
		"\7\u0221\2\2\u13c3\u13c5\5\u0218\u010d\2\u13c4\u13c3\3\2\2\2\u13c4\u13c5"+
		"\3\2\2\2\u13c5\u13c6\3\2\2\2\u13c6\u13c7\7\u0222\2\2\u13c7\u13c9\3\2\2"+
		"\2\u13c8\u13b3\3\2\2\2\u13c8\u13b7\3\2\2\2\u13c9\u026b\3\2\2\2\u13ca\u13cd"+
		"\7\u0135\2\2\u13cb\u13cc\7*\2\2\u13cc\u13ce\7\u01ca\2\2\u13cd\u13cb\3"+
		"\2\2\2\u13cd\u13ce\3\2\2\2\u13ce\u13cf\3\2\2\2\u13cf\u13d1\5\u021a\u010e"+
		"\2\u13d0\u13d2\5\u028a\u0146\2\u13d1\u13d0\3\2\2\2\u13d1\u13d2\3\2\2\2"+
		"\u13d2\u13d3\3\2\2\2\u13d3\u13d4\7\u0227\2\2\u13d4\u13d6\5\u021a\u010e"+
		"\2\u13d5\u13d7\5\u028a\u0146\2\u13d6\u13d5\3\2\2\2\u13d6\u13d7\3\2\2\2"+
		"\u13d7\u026d\3\2\2\2\u13d8\u13d9\7\u01de\2\2\u13d9\u13db\7\u0221\2\2\u13da"+
		"\u13dc\tD\2\2\u13db\u13da\3\2\2\2\u13db\u13dc\3\2\2\2\u13dc\u13de\3\2"+
		"\2\2\u13dd\u13df\tM\2\2\u13de\u13dd\3\2\2\2\u13de\u13df\3\2\2\2\u13df"+
		"\u13e0\3\2\2\2\u13e0\u13e5\5\u0276\u013c\2\u13e1\u13e2\7\u0227\2\2\u13e2"+
		"\u13e4\5\u0276\u013c\2\u13e3\u13e1\3\2\2\2\u13e4\u13e7\3\2\2\2\u13e5\u13e3"+
		"\3\2\2\2\u13e5\u13e6\3\2\2\2\u13e6\u13e8\3\2\2\2\u13e7\u13e5\3\2\2\2\u13e8"+
		"\u13e9\7\u0222\2\2\u13e9\u026f\3\2\2\2\u13ea\u13eb\7\u01e4\2\2\u13eb\u13ef"+
		"\7\u0221\2\2\u13ec\u13ed\5\u022c\u0117\2\u13ed\u13ee\5\u028a\u0146\2\u13ee"+
		"\u13f0\3\2\2\2\u13ef\u13ec\3\2\2\2\u13ef\u13f0\3\2\2\2\u13f0\u13f7\3\2"+
		"\2\2\u13f1\u13f2\7\u0227\2\2\u13f2\u13f3\5\u022c\u0117\2\u13f3\u13f4\5"+
		"\u028a\u0146\2\u13f4\u13f6\3\2\2\2\u13f5\u13f1\3\2\2\2\u13f6\u13f9\3\2"+
		"\2\2\u13f7\u13f5\3\2\2\2\u13f7\u13f8\3\2\2\2\u13f8\u13fb\3\2\2\2\u13f9"+
		"\u13f7\3\2\2\2\u13fa\u13fc\5\u0274\u013b\2\u13fb\u13fa\3\2\2\2\u13fb\u13fc"+
		"\3\2\2\2\u13fc\u13fd\3\2\2\2\u13fd\u13fe\7\u0222\2\2\u13fe\u0271\3\2\2"+
		"\2\u13ff\u140a\5\u0292\u014a\2\u1400\u1401\7\u00a2\2\2\u1401\u140b\7\u0129"+
		"\2\2\u1402\u1405\5\u02e2\u0172\2\u1403\u1404\7\u0136\2\2\u1404\u1406\5"+
		"\u022c\u0117\2\u1405\u1403\3\2\2\2\u1405\u1406\3\2\2\2\u1406\u1408\3\2"+
		"\2\2\u1407\u1409\5\u0274\u013b\2\u1408\u1407\3\2\2\2\u1408\u1409\3\2\2"+
		"\2\u1409\u140b\3\2\2\2\u140a\u1400\3\2\2\2\u140a\u1402\3\2\2\2\u140b\u0273"+
		"\3\2\2\2\u140c\u140d\7k\2\2\u140d\u140e\5\u022c\u0117\2\u140e\u0275\3"+
		"\2\2\2\u140f\u1416\5\u021a\u010e\2\u1410\u1414\7\17\2\2\u1411\u1415\5"+
		"\u02fc\u017f\2\u1412\u1413\7\u0088\2\2\u1413\u1415\5\u022c\u0117\2\u1414"+
		"\u1411\3\2\2\2\u1414\u1412\3\2\2\2\u1415\u1417\3\2\2\2\u1416\u1410\3\2"+
		"\2\2\u1416\u1417\3\2\2\2\u1417\u0277\3\2\2\2\u1418\u141c\7\u01d1\2\2\u1419"+
		"\u141a\7\u0112\2\2\u141a\u141d\7\u01ca\2\2\u141b\u141d\5\u021a\u010e\2"+
		"\u141c\u1419\3\2\2\2\u141c\u141b\3\2\2\2\u141d\u0279\3\2\2\2\u141e\u1424"+
		"\7\u0194\2\2\u141f\u1425\7\u01ed\2\2\u1420\u1422\7\u0112\2\2\u1421\u1423"+
		"\7\u01ca\2\2\u1422\u1421\3\2\2\2\u1422\u1423\3\2\2\2\u1423\u1425\3\2\2"+
		"\2\u1424\u141f\3\2\2\2\u1424\u1420\3\2\2\2\u1425\u027b\3\2\2\2\u1426\u1427"+
		"\7\u0081\2\2\u1427\u1428\5\u022c\u0117\2\u1428\u027d\3\2\2\2\u1429\u142a"+
		"\7\u01d1\2\2\u142a\u142b\5\u022c\u0117\2\u142b\u027f\3\2\2\2\u142c\u142d"+
		"\7\u0112\2\2\u142d\u1435\7\u00b9\2\2\u142e\u1432\7\u00b9\2\2\u142f\u1430"+
		"\7\u018c\2\2\u1430\u1431\7\u0235\2\2\u1431\u1433\5\u022c\u0117\2\u1432"+
		"\u142f\3\2\2\2\u1432\u1433\3\2\2\2\u1433\u1435\3\2\2\2\u1434\u142c\3\2"+
		"\2\2\u1434\u142e\3\2\2\2\u1435\u0281\3\2\2\2\u1436\u143f\7\u0228\2\2\u1437"+
		"\u143f\7\u0090\2\2\u1438\u143f\7\u023c\2\2\u1439\u143a\7\u0186\2\2\u143a"+
		"\u143f\tN\2\2\u143b\u143f\7\u023d\2\2\u143c\u143f\5\u0284\u0143\2\u143d"+
		"\u143f\5\u0286\u0144\2\u143e\u1436\3\2\2\2\u143e\u1437\3\2\2\2\u143e\u1438"+
		"\3\2\2\2\u143e\u1439\3\2\2\2\u143e\u143b\3\2\2\2\u143e\u143c\3\2\2\2\u143e"+
		"\u143d\3\2\2\2\u143f\u0283\3\2\2\2\u1440\u1441\7\u01d5\2\2\u1441\u1447"+
		"\tO\2\2\u1442\u1443\7\u0090\2\2\u1443\u1444\tP\2\2\u1444\u1448\tQ\2\2"+
		"\u1445\u1446\7O\2\2\u1446\u1448\tR\2\2\u1447\u1442\3\2\2\2\u1447\u1445"+
		"\3\2\2\2\u1448\u0285\3\2\2\2\u1449\u144a\7\u0182\2\2\u144a\u1450\5\u0300"+
		"\u0181\2\u144b\u1451\7\u021d\2\2\u144c\u1451\7\u0123\2\2\u144d\u1451\7"+
		"\u011d\2\2\u144e\u1451\5\u02f4\u017b\2\u144f\u1451\5\u0300\u0181\2\u1450"+
		"\u144b\3\2\2\2\u1450\u144c\3\2\2\2\u1450\u144d\3\2\2\2\u1450\u144e\3\2"+
		"\2\2\u1450\u144f\3\2\2\2\u1451\u0287\3\2\2\2\u1452\u1454\tS\2\2\u1453"+
		"\u1455\7\u00a2\2\2\u1454\u1453\3\2\2\2\u1454\u1455\3\2\2\2\u1455\u1456"+
		"\3\2\2\2\u1456\u1458\7\u0221\2\2\u1457\u1459\5\u0218\u010d\2\u1458\u1457"+
		"\3\2\2\2\u1458\u1459\3\2\2\2\u1459\u145a\3\2\2\2\u145a\u145b\7\u0222\2"+
		"\2\u145b\u0289\3\2\2\2\u145c\u145e\7\17\2\2\u145d\u145c\3\2\2\2\u145d"+
		"\u145e\3\2\2\2\u145e\u1461\3\2\2\2\u145f\u1462\5\u02fa\u017e\2\u1460\u1462"+
		"\5\u02f8\u017d\2\u1461\u145f\3\2\2\2\u1461\u1460\3\2\2\2\u1462\u1465\3"+
		"\2\2\2\u1463\u1465\7\17\2\2\u1464\u145d\3\2\2\2\u1464\u1463\3\2\2\2\u1465"+
		"\u028b\3\2\2\2\u1466\u1469\5\u02fa\u017e\2\u1467\u1469\5\u02f8\u017d\2"+
		"\u1468\u1466\3\2\2\2\u1468\u1467\3\2\2\2\u1469\u028d\3\2\2\2\u146a\u146f"+
		"\7\u01d7\2\2\u146b\u146c\7Y\2\2\u146c\u146d\7\u011e\2\2\u146d\u1470\5"+
		"\u02c4\u0163\2\u146e\u1470\5\u021a\u010e\2\u146f\u146b\3\2\2\2\u146f\u146e"+
		"\3\2\2\2\u1470\u028f\3\2\2\2\u1471\u1472\7)\2\2\u1472\u1474\7<\2\2\u1473"+
		"\u1471\3\2\2\2\u1473\u1474\3\2\2\2\u1474\u1475\3\2\2\2\u1475\u1476\7\u00cc"+
		"\2\2\u1476\u147b\5\u02c0\u0161\2\u1477\u1478\7\u0227\2\2\u1478\u147a\5"+
		"\u02c0\u0161\2\u1479\u1477\3\2\2\2\u147a\u147d\3\2\2\2\u147b\u1479\3\2"+
		"\2\2\u147b\u147c\3\2\2\2\u147c\u0291\3\2\2\2\u147d\u147b\3\2\2\2\u147e"+
		"\u1481\5\u02fa\u017e\2\u147f\u1481\5\u02f8\u017d\2\u1480\u147e\3\2\2\2"+
		"\u1480\u147f\3\2\2\2\u1481\u0293\3\2\2\2\u1482\u1483\5\u02fa\u017e\2\u1483"+
		"\u0295\3\2\2\2\u1484\u1485\5\u02fa\u017e\2\u1485\u0297\3\2\2\2\u1486\u1487"+
		"\5\u02fa\u017e\2\u1487\u0299\3\2\2\2\u1488\u1489\5\u02fa\u017e\2\u1489"+
		"\u029b\3\2\2\2\u148a\u148b\5\u02fa\u017e\2\u148b\u029d\3\2\2\2\u148c\u148d"+
		"\5\u02fa\u017e\2\u148d\u029f\3\2\2\2\u148e\u1493\5\u02fa\u017e\2\u148f"+
		"\u1490\7\u021a\2\2\u1490\u1492\5\u02fc\u017f\2\u1491\u148f\3\2\2\2\u1492"+
		"\u1495\3\2\2\2\u1493\u1491\3\2\2\2\u1493\u1494\3\2\2\2\u1494\u1498\3\2"+
		"\2\2\u1495\u1493\3\2\2\2\u1496\u1497\7\u0229\2\2\u1497\u1499\5\u02ca\u0166"+
		"\2\u1498\u1496\3\2\2\2\u1498\u1499\3\2\2\2\u1499\u02a1\3\2\2\2\u149a\u149b"+
		"\5\u02fa\u017e\2\u149b\u02a3\3\2\2\2\u149c\u149f\5\u02fa\u017e\2\u149d"+
		"\u149e\7\u021a\2\2\u149e\u14a0\5\u02fc\u017f\2\u149f\u149d\3\2\2\2\u149f"+
		"\u14a0\3\2\2\2\u14a0\u02a5\3\2\2\2\u14a1\u14a2\5\u02fa\u017e\2\u14a2\u02a7"+
		"\3\2\2\2\u14a3\u14a4\5\u02fa\u017e\2\u14a4\u02a9\3\2\2\2\u14a5\u14a6\5"+
		"\u02fa\u017e\2\u14a6\u02ab\3\2\2\2\u14a7\u14ac\5\u02fa\u017e\2\u14a8\u14a9"+
		"\7\u021a\2\2\u14a9\u14ab\5\u02fc\u017f\2\u14aa\u14a8\3\2\2\2\u14ab\u14ae"+
		"\3\2\2\2\u14ac\u14aa\3\2\2\2\u14ac\u14ad\3\2\2\2\u14ad\u02ad\3\2\2\2\u14ae"+
		"\u14ac\3\2\2\2\u14af\u14b0\5\u02fa\u017e\2\u14b0\u02af\3\2\2\2\u14b1\u14b6"+
		"\5\u02fa\u017e\2\u14b2\u14b3\7\u021a\2\2\u14b3\u14b5\5\u02fc\u017f\2\u14b4"+
		"\u14b2\3\2\2\2\u14b5\u14b8\3\2\2\2\u14b6\u14b4\3\2\2\2\u14b6\u14b7\3\2"+
		"\2\2\u14b7\u14bb\3\2\2\2\u14b8\u14b6\3\2\2\2\u14b9\u14ba\7\u0229\2\2\u14ba"+
		"\u14bc\5\u02ca\u0166\2\u14bb\u14b9\3\2\2\2\u14bb\u14bc\3\2\2\2\u14bc\u02b1"+
		"\3\2\2\2\u14bd\u14be\5\u02fc\u017f\2\u14be\u02b3\3\2\2\2\u14bf\u14c4\5"+
		"\u02fc\u017f\2\u14c0\u14c1\7\u021a\2\2\u14c1\u14c3\5\u02fc\u017f\2\u14c2"+
		"\u14c0\3\2\2\2\u14c3\u14c6\3\2\2\2\u14c4\u14c2\3\2\2\2\u14c4\u14c5\3\2"+
		"\2\2\u14c5\u02b5\3\2\2\2\u14c6\u14c4\3\2\2\2\u14c7\u14cc\5\u02fc\u017f"+
		"\2\u14c8\u14c9\7\u021a\2\2\u14c9\u14cb\5\u02fc\u017f\2\u14ca\u14c8\3\2"+
		"\2\2\u14cb\u14ce\3\2\2\2\u14cc\u14ca\3\2\2\2\u14cc\u14cd\3\2\2\2\u14cd"+
		"\u02b7\3\2\2\2\u14ce\u14cc\3\2\2\2\u14cf\u14d4\5\u02fa\u017e\2\u14d0\u14d1"+
		"\7\u021a\2\2\u14d1\u14d3\5\u02fc\u017f\2\u14d2\u14d0\3\2\2\2\u14d3\u14d6"+
		"\3\2\2\2\u14d4\u14d2\3\2\2\2\u14d4\u14d5\3\2\2\2\u14d5\u02b9\3\2\2\2\u14d6"+
		"\u14d4\3\2\2\2\u14d7\u14da\5\u02fa\u017e\2\u14d8\u14d9\7\u021a\2\2\u14d9"+
		"\u14db\5\u02fc\u017f\2\u14da\u14d8\3\2\2\2\u14da\u14db\3\2\2\2\u14db\u02bb"+
		"\3\2\2\2\u14dc\u14df\5\u02fa\u017e\2\u14dd\u14de\7\u021a\2\2\u14de\u14e0"+
		"\5\u02fc\u017f\2\u14df\u14dd\3\2\2\2\u14df\u14e0\3\2\2\2\u14e0\u02bd\3"+
		"\2\2\2\u14e1\u14e4\5\u02fa\u017e\2\u14e2\u14e3\7\u021a\2\2\u14e3\u14e5"+
		"\5\u02fc\u017f\2\u14e4\u14e2\3\2\2\2\u14e4\u14e5\3\2\2\2\u14e5\u02bf\3"+
		"\2\2\2\u14e6\u14e7\7\u0238\2\2\u14e7\u14e9\5\u02d0\u0169\2\u14e8\u14e6"+
		"\3\2\2\2\u14e8\u14e9\3\2\2\2\u14e9\u14ea\3\2\2\2\u14ea\u14ed\5\u02fc\u017f"+
		"\2\u14eb\u14ec\7\u021a\2\2\u14ec\u14ee\5\u02fc\u017f\2\u14ed\u14eb\3\2"+
		"\2\2\u14ed\u14ee\3\2\2\2\u14ee\u14f1\3\2\2\2\u14ef\u14f1\5\u02ea\u0176"+
		"\2\u14f0\u14e8\3\2\2\2\u14f0\u14ef\3\2\2\2\u14f1\u02c1\3\2\2\2\u14f2\u14f3"+
		"\5\u02fa\u017e\2\u14f3\u02c3\3\2\2\2\u14f4\u14f7\5\u02fa\u017e\2\u14f5"+
		"\u14f7\5\u02ea\u0176\2\u14f6\u14f4\3\2\2\2\u14f6\u14f5\3\2\2\2\u14f7\u02c5"+
		"\3\2\2\2\u14f8\u14fb\5\u02fa\u017e\2\u14f9\u14fb\5\u02ea\u0176\2\u14fa"+
		"\u14f8\3\2\2\2\u14fa\u14f9\3\2\2\2\u14fb\u02c7\3\2\2\2\u14fc\u14ff\5\u02fa"+
		"\u017e\2\u14fd\u14fe\7\u021a\2\2\u14fe\u1500\5\u02fc\u017f\2\u14ff\u14fd"+
		"\3\2\2\2\u14ff\u1500\3\2\2\2\u1500\u02c9\3\2\2\2\u1501\u1502\5\u02fa\u017e"+
		"\2\u1502\u02cb\3\2\2\2\u1503\u1508\5\u02fa\u017e\2\u1504\u1505\7\u021a"+
		"\2\2\u1505\u1507\5\u02fc\u017f\2\u1506\u1504\3\2\2\2\u1507\u150a\3\2\2"+
		"\2\u1508\u1506\3\2\2\2\u1508\u1509\3\2\2\2\u1509\u02cd\3\2\2\2\u150a\u1508"+
		"\3\2\2\2\u150b\u150e\5\u02fa\u017e\2\u150c\u150d\7\u021a\2\2\u150d\u150f"+
		"\5\u02fc\u017f\2\u150e\u150c\3\2\2\2\u150e\u150f\3\2\2\2\u150f\u1513\3"+
		"\2\2\2\u1510\u1511\7\u0229\2\2\u1511\u1514\5\u02ca\u0166\2\u1512\u1514"+
		"\5\u0288\u0145\2\u1513\u1510\3\2\2\2\u1513\u1512\3\2\2\2\u1513\u1514\3"+
		"\2\2\2\u1514\u02cf\3\2\2\2\u1515\u151a\5\u02fc\u017f\2\u1516\u1517\7\u021a"+
		"\2\2\u1517\u1519\5\u02fc\u017f\2\u1518\u1516\3\2\2\2\u1519\u151c\3\2\2"+
		"\2\u151a\u1518\3\2\2\2\u151a\u151b\3\2\2\2\u151b\u02d1\3\2\2\2\u151c\u151a"+
		"\3\2\2\2\u151d\u151e\5\u02fa\u017e\2\u151e\u02d3\3\2\2\2\u151f\u1520\5"+
		"\u02fc\u017f\2\u1520\u02d5\3\2\2\2\u1521\u1522\7\u00d3\2\2\u1522\u1523"+
		"\7\u0221\2\2\u1523\u1524\7\u01f7\2\2\u1524\u1525\t\61\2\2\u1525\u1526"+
		"\5\u01ca\u00e6\2\u1526\u1528\7\u0222\2\2\u1527\u1529\5\u025a\u012e\2\u1528"+
		"\u1527\3\2\2\2\u1528\u1529\3\2\2\2\u1529\u02d7\3\2\2\2\u152a\u152c\7\u0221"+
		"\2\2\u152b\u152d\5\u02e0\u0171\2\u152c\u152b\3\2\2\2\u152c\u152d\3\2\2"+
		"\2\u152d\u1532\3\2\2\2\u152e\u152f\7\u0227\2\2\u152f\u1531\5\u02e0\u0171"+
		"\2\u1530\u152e\3\2\2\2\u1531\u1534\3\2\2\2\u1532\u1530\3\2\2\2\u1532\u1533"+
		"\3\2\2\2\u1533\u1535\3\2\2\2\u1534\u1532\3\2\2\2\u1535\u1537\7\u0222\2"+
		"\2\u1536\u1538\5\u02d6\u016c\2\u1537\u1536\3\2\2\2\u1537\u1538\3\2\2\2"+
		"\u1538\u02d9\3\2\2\2\u1539\u153e\7\u0221\2\2\u153a\u153c\5\u02e0\u0171"+
		"\2\u153b\u153d\5\u02de\u0170\2\u153c\u153b\3\2\2\2\u153c\u153d\3\2\2\2"+
		"\u153d\u153f\3\2\2\2\u153e\u153a\3\2\2\2\u153e\u153f\3\2\2\2\u153f\u1547"+
		"\3\2\2\2\u1540\u1541\7\u0227\2\2\u1541\u1543\5\u02e0\u0171\2\u1542\u1544"+
		"\5\u02de\u0170\2\u1543\u1542\3\2\2\2\u1543\u1544\3\2\2\2\u1544\u1546\3"+
		"\2\2\2\u1545\u1540\3\2\2\2\u1546\u1549\3\2\2\2\u1547\u1545\3\2\2\2\u1547"+
		"\u1548\3\2\2\2\u1548\u154a\3\2\2\2\u1549\u1547\3\2\2\2\u154a\u154c\7\u0222"+
		"\2\2\u154b\u154d\5\u02d6\u016c\2\u154c\u154b\3\2\2\2\u154c\u154d\3\2\2"+
		"\2\u154d\u02db\3\2\2\2\u154e\u154f\7\u0221\2\2\u154f\u155c\5\u02cc\u0167"+
		"\2\u1550\u1553\7\u0227\2\2\u1551\u1554\5\u02f4\u017b\2\u1552\u1554\7\u0117"+
		"\2\2\u1553\u1551\3\2\2\2\u1553\u1552\3\2\2\2\u1554\u155a\3\2\2\2\u1555"+
		"\u1558\7\u0227\2\2\u1556\u1559\5\u02f4\u017b\2\u1557\u1559\7\u0117\2\2"+
		"\u1558\u1556\3\2\2\2\u1558\u1557\3\2\2\2\u1559\u155b\3\2\2\2\u155a\u1555"+
		"\3\2\2\2\u155a\u155b\3\2\2\2\u155b\u155d\3\2\2\2\u155c\u1550\3\2\2\2\u155c"+
		"\u155d\3\2\2\2\u155d\u155e\3\2\2\2\u155e\u1572\7\u01c7\2\2\u155f\u1560"+
		"\5\u02ce\u0168\2\u1560\u1561\7\u021a\2\2\u1561\u1562\7\u0224\2\2\u1562"+
		"\u1573\3\2\2\2\u1563\u1573\7\u0224\2\2\u1564\u1566\5\u021a\u010e\2\u1565"+
		"\u1567\5\u028a\u0146\2\u1566\u1565\3\2\2\2\u1566\u1567\3\2\2\2\u1567\u156f"+
		"\3\2\2\2\u1568\u1569\7\u0227\2\2\u1569\u156b\5\u021a\u010e\2\u156a\u156c"+
		"\5\u028a\u0146\2\u156b\u156a\3\2\2\2\u156b\u156c\3\2\2\2\u156c\u156e\3"+
		"\2\2\2\u156d\u1568\3\2\2\2\u156e\u1571\3\2\2\2\u156f\u156d\3\2\2\2\u156f"+
		"\u1570\3\2\2\2\u1570\u1573\3\2\2\2\u1571\u156f\3\2\2\2\u1572\u155f\3\2"+
		"\2\2\u1572\u1563\3\2\2\2\u1572\u1564\3\2\2\2\u1573\u1574\3\2\2\2\u1574"+
		"\u1576\7\u0222\2\2\u1575\u1577\5\u02d6\u016c\2\u1576\u1575\3\2\2\2\u1576"+
		"\u1577\3\2\2\2\u1577\u02dd\3\2\2\2\u1578\u1579\tT\2\2\u1579\u157a\7\u0118"+
		"\2\2\u157a\u02df\3\2\2\2\u157b\u157c\5\u02fa\u017e\2\u157c\u157d\7\u0235"+
		"\2\2\u157d\u157e\7\u0230\2\2\u157e\u1580\3\2\2\2\u157f\u157b\3\2\2\2\u157f"+
		"\u1580\3\2\2\2\u1580\u1581\3\2\2\2\u1581\u1582\5\u021a\u010e\2\u1582\u02e1"+
		"\3\2\2\2\u1583\u158c\5\u02e4\u0173\2\u1584\u1586\7\u015b\2\2\u1585\u1584"+
		"\3\2\2\2\u1585\u1586\3\2\2\2\u1586\u1587\3\2\2\2\u1587\u1589\5\u02b4\u015b"+
		"\2\u1588\u158a\tU\2\2\u1589\u1588\3\2\2\2\u1589\u158a\3\2\2\2\u158a\u158c"+
		"\3\2\2\2\u158b\u1583\3\2\2\2\u158b\u1585\3\2\2\2\u158c\u02e3\3\2\2\2\u158d"+
		"\u158f\5\u02e8\u0175\2\u158e\u1590\5\u02e6\u0174\2\u158f\u158e\3\2\2\2"+
		"\u158f\u1590\3\2\2\2\u1590\u159a\3\2\2\2\u1591\u1593\7\u01da\2\2\u1592"+
		"\u1594\7\u00e2\2\2\u1593\u1592\3\2\2\2\u1593\u1594\3\2\2\2\u1594\u1595"+
		"\3\2\2\2\u1595\u1596\7\u01ad\2\2\u1596\u159b\7\u01ef\2\2\u1597\u1598\7"+
		"\62\2\2\u1598\u1599\7\u0182\2\2\u1599\u159b\5\u02d0\u0169\2\u159a\u1591"+
		"\3\2\2\2\u159a\u1597\3\2\2\2\u159a\u159b\3\2\2\2\u159b\u15ad\3\2\2\2\u159c"+
		"\u159d\7\u00ca\2\2\u159d\u15a2\tV\2\2\u159e\u159f\7\u0221\2\2\u159f\u15a0"+
		"\5\u021a\u010e\2\u15a0\u15a1\7\u0222\2\2\u15a1\u15a3\3\2\2\2\u15a2\u159e"+
		"\3\2\2\2\u15a2\u15a3\3\2\2\2\u15a3\u15a4\3\2\2\2\u15a4\u15a5\7\u01b2\2"+
		"\2\u15a5\u15aa\tW\2\2\u15a6\u15a7\7\u0221\2\2\u15a7\u15a8\5\u021a\u010e"+
		"\2\u15a8\u15a9\7\u0222\2\2\u15a9\u15ab\3\2\2\2\u15aa\u15a6\3\2\2\2\u15aa"+
		"\u15ab\3\2\2\2\u15ab\u15ad\3\2\2\2\u15ac\u158d\3\2\2\2\u15ac\u159c\3\2"+
		"\2\2\u15ad\u02e5\3\2\2\2\u15ae\u15af\7\u0221\2\2\u15af\u15b2\5\u02f4\u017b"+
		"\2\u15b0\u15b1\7\u0227\2\2\u15b1\u15b3\5\u02f4\u017b\2\u15b2\u15b0\3\2"+
		"\2\2\u15b2\u15b3\3\2\2\2\u15b3\u15b5\3\2\2\2\u15b4\u15b6\tX\2\2\u15b5"+
		"\u15b4\3\2\2\2\u15b5\u15b6\3\2\2\2\u15b6\u15b7\3\2\2\2\u15b7\u15b8\7\u0222"+
		"\2\2\u15b8\u02e7\3\2\2\2\u15b9\u15f6\7!\2\2\u15ba\u15f6\7\u0144\2\2\u15bb"+
		"\u15f6\7\u00ff\2\2\u15bc\u15f6\7 \2\2\u15bd\u15f6\7\37\2\2\u15be\u15f6"+
		"\7\u0100\2\2\u15bf\u15f6\7\u0146\2\2\u15c0\u15f6\7\u0145\2\2\u15c1\u15f6"+
		"\7\u0189\2\2\u15c2\u15f6\7\u018a\2\2\u15c3\u15f6\7\u011b\2\2\u15c4\u15f6"+
		"\7f\2\2\u15c5\u15f6\7\u00c8\2\2\u15c6\u15f6\7\u00cb\2\2\u15c7\u15f6\7"+
		"\u011a\2\2\u15c8\u15f6\7\u018e\2\2\u15c9\u15f6\7\u0119\2\2\u15ca\u15f6"+
		"\7g\2\2\u15cb\u15cd\7x\2\2\u15cc\u15ce\7\u0149\2\2\u15cd\u15cc\3\2\2\2"+
		"\u15cd\u15ce\3\2\2\2\u15ce\u15f6\3\2\2\2\u15cf\u15f6\7\u009c\2\2\u15d0"+
		"\u15f6\7\u0155\2\2\u15d1\u15f6\7\u0103\2\2\u15d2\u15d4\7\u00e9\2\2\u15d3"+
		"\u15d5\7\u0153\2\2\u15d4\u15d3\3\2\2\2\u15d4\u15d5\3\2\2\2\u15d5\u15f6"+
		"\3\2\2\2\u15d6\u15f6\7\63\2\2\u15d7\u15f6\7\62\2\2\u15d8\u15f6\7\u01cb"+
		"\2\2\u15d9\u15f6\7\u01cc\2\2\u15da\u15f6\7\u019c\2\2\u15db\u15f6\7\u0153"+
		"\2\2\u15dc\u15f6\7%\2\2\u15dd\u15f6\7`\2\2\u15de\u15f6\7\u016c\2\2\u15df"+
		"\u15f6\7\u01c5\2\2\u15e0\u15f6\7\u01ec\2\2\u15e1\u15f6\7\u00fb\2\2\u15e2"+
		"\u15f6\7a\2\2\u15e3\u15f6\7\u00b2\2\2\u15e4\u15f6\7\u00f5\2\2\u15e5\u15f6"+
		"\7\u0177\2\2\u15e6\u15f6\7\u01af\2\2\u15e7\u15f6\7\u01b0\2\2\u15e8\u15f6"+
		"\7\u01b1\2\2\u15e9\u15f6\7\u01ae\2\2\u15ea\u15f6\7\u01aa\2\2\u15eb\u15f6"+
		"\7\u01ac\2\2\u15ec\u15f6\7\u01ab\2\2\u15ed\u15f6\7\u01a9\2\2\u15ee\u15f6"+
		"\7\u01ee\2\2\u15ef\u15f6\7z\2\2\u15f0\u15f6\7\36\2\2\u15f1\u15f6\7\"\2"+
		"\2\u15f2\u15f6\78\2\2\u15f3\u15f6\7\u0104\2\2\u15f4\u15f6\7\u00f7\2\2"+
		"\u15f5\u15b9\3\2\2\2\u15f5\u15ba\3\2\2\2\u15f5\u15bb\3\2\2\2\u15f5\u15bc"+
		"\3\2\2\2\u15f5\u15bd\3\2\2\2\u15f5\u15be\3\2\2\2\u15f5\u15bf\3\2\2\2\u15f5"+
		"\u15c0\3\2\2\2\u15f5\u15c1\3\2\2\2\u15f5\u15c2\3\2\2\2\u15f5\u15c3\3\2"+
		"\2\2\u15f5\u15c4\3\2\2\2\u15f5\u15c5\3\2\2\2\u15f5\u15c6\3\2\2\2\u15f5"+
		"\u15c7\3\2\2\2\u15f5\u15c8\3\2\2\2\u15f5\u15c9\3\2\2\2\u15f5\u15ca\3\2"+
		"\2\2\u15f5\u15cb\3\2\2\2\u15f5\u15cf\3\2\2\2\u15f5\u15d0\3\2\2\2\u15f5"+
		"\u15d1\3\2\2\2\u15f5\u15d2\3\2\2\2\u15f5\u15d6\3\2\2\2\u15f5\u15d7\3\2"+
		"\2\2\u15f5\u15d8\3\2\2\2\u15f5\u15d9\3\2\2\2\u15f5\u15da\3\2\2\2\u15f5"+
		"\u15db\3\2\2\2\u15f5\u15dc\3\2\2\2\u15f5\u15dd\3\2\2\2\u15f5\u15de\3\2"+
		"\2\2\u15f5\u15df\3\2\2\2\u15f5\u15e0\3\2\2\2\u15f5\u15e1\3\2\2\2\u15f5"+
		"\u15e2\3\2\2\2\u15f5\u15e3\3\2\2\2\u15f5\u15e4\3\2\2\2\u15f5\u15e5\3\2"+
		"\2\2\u15f5\u15e6\3\2\2\2\u15f5\u15e7\3\2\2\2\u15f5\u15e8\3\2\2\2\u15f5"+
		"\u15e9\3\2\2\2\u15f5\u15ea\3\2\2\2\u15f5\u15eb\3\2\2\2\u15f5\u15ec\3\2"+
		"\2\2\u15f5\u15ed\3\2\2\2\u15f5\u15ee\3\2\2\2\u15f5\u15ef\3\2\2\2\u15f5"+
		"\u15f0\3\2\2\2\u15f5\u15f1\3\2\2\2\u15f5\u15f2\3\2\2\2\u15f5\u15f3\3\2"+
		"\2\2\u15f5\u15f4\3\2\2\2\u15f6\u02e9\3\2\2\2\u15f7\u15fb\7\u022b\2\2\u15f8"+
		"\u15f9\7\u0232\2\2\u15f9\u15fb\7\u021b\2\2\u15fa\u15f7\3\2\2\2\u15fa\u15f8"+
		"\3\2\2\2\u15fb\u1604\3\2\2\2\u15fc\u15fe\7\u00bc\2\2\u15fd\u15fc\3\2\2"+
		"\2\u15fd\u15fe\3\2\2\2\u15fe\u1602\3\2\2\2\u15ff\u1603\7\u022b\2\2\u1600"+
		"\u1601\7\u0232\2\2\u1601\u1603\7\u021b\2\2\u1602\u15ff\3\2\2\2\u1602\u1600"+
		"\3\2\2\2\u1603\u1605\3\2\2\2\u1604\u15fd\3\2\2\2\u1604\u1605\3\2\2\2\u1605"+
		"\u160a\3\2\2\2\u1606\u1607\7\u021a\2\2\u1607\u1609\5\u02ee\u0178\2\u1608"+
		"\u1606\3\2\2\2\u1609\u160c\3\2\2\2\u160a\u1608\3\2\2\2\u160a\u160b\3\2"+
		"\2\2\u160b\u02eb\3\2\2\2\u160c\u160a\3\2\2\2\u160d\u1612\5\u02ee\u0178"+
		"\2\u160e\u160f\7\u021a\2\2\u160f\u1611\5\u02ee\u0178\2\u1610\u160e\3\2"+
		"\2\2\u1611\u1614\3\2\2\2\u1612\u1610\3\2\2\2\u1612\u1613\3\2\2\2\u1613"+
		"\u02ed\3\2\2\2\u1614\u1612\3\2\2\2\u1615\u1616\7\u0238\2\2\u1616\u1618"+
		"\5\u02d0\u0169\2\u1617\u1615\3\2\2\2\u1617\u1618\3\2\2\2\u1618\u1619\3"+
		"\2\2\2\u1619\u161e\5\u02fc\u017f\2\u161a\u161b\7\u021a\2\2\u161b\u161d"+
		"\5\u02fc\u017f\2\u161c\u161a\3\2\2\2\u161d\u1620\3\2\2\2\u161e\u161c\3"+
		"\2\2\2\u161e\u161f\3\2\2\2\u161f\u1623\3\2\2\2\u1620\u161e\3\2\2\2\u1621"+
		"\u1622\7\u0229\2\2\u1622\u1624\5\u02ca\u0166\2\u1623\u1621\3\2\2\2\u1623"+
		"\u1624\3\2\2\2\u1624\u1626\3\2\2\2\u1625\u1627\5\u02d8\u016d\2\u1626\u1625"+
		"\3\2\2\2\u1626\u1627\3\2\2\2\u1627\u02ef\3\2\2\2\u1628\u1629\7\u0238\2"+
		"\2\u1629\u162b\5\u02d0\u0169\2\u162a\u1628\3\2\2\2\u162a\u162b\3\2\2\2"+
		"\u162b\u162c\3\2\2\2\u162c\u1631\5\u02fc\u017f\2\u162d\u162e\7\u021a\2"+
		"\2\u162e\u1630\5\u02fc\u017f\2\u162f\u162d\3\2\2\2\u1630\u1633\3\2\2\2"+
		"\u1631\u162f\3\2\2\2\u1631\u1632\3\2\2\2\u1632\u02f1\3\2\2\2\u1633\u1631"+
		"\3\2\2\2\u1634\u1637\7\u01aa\2\2\u1635\u1638\5\u02f8\u017d\2\u1636\u1638"+
		"\5\u02ea\u0176\2\u1637\u1635\3\2\2\2\u1637\u1636\3\2\2\2\u1638\u163d\3"+
		"\2\2\2\u1639\u163a\7\22\2\2\u163a\u163b\7\u01ad\2\2\u163b\u163c\7\u01ef"+
		"\2\2\u163c\u163e\5\u02f8\u017d\2\u163d\u1639\3\2\2\2\u163d\u163e\3\2\2"+
		"\2\u163e\u1673\3\2\2\2\u163f\u1643\7\u00ca\2\2\u1640\u1644\5\u02f8\u017d"+
		"\2\u1641\u1644\5\u02ea\u0176\2\u1642\u1644\5\u02ee\u0178\2\u1643\u1640"+
		"\3\2\2\2\u1643\u1641\3\2\2\2\u1643\u1642\3\2\2\2\u1644\u1645\3\2\2\2\u1645"+
		"\u1653\tY\2\2\u1646\u1649\7\u0221\2\2\u1647\u164a\7\u021b\2\2\u1648\u164a"+
		"\5\u02ea\u0176\2\u1649\u1647\3\2\2\2\u1649\u1648\3\2\2\2\u164a\u1650\3"+
		"\2\2\2\u164b\u164e\7\u0227\2\2\u164c\u164f\7\u021b\2\2\u164d\u164f\5\u02ea"+
		"\u0176\2\u164e\u164c\3\2\2\2\u164e\u164d\3\2\2\2\u164f\u1651\3\2\2\2\u1650"+
		"\u164b\3\2\2\2\u1650\u1651\3\2\2\2\u1651\u1652\3\2\2\2\u1652\u1654\7\u0222"+
		"\2\2\u1653\u1646\3\2\2\2\u1653\u1654\3\2\2\2\u1654\u1664\3\2\2\2\u1655"+
		"\u1662\7\u01b2\2\2\u1656\u1663\7a\2\2\u1657\u1663\7\u00b2\2\2\u1658\u1663"+
		"\7\u00f5\2\2\u1659\u1660\7\u0177\2\2\u165a\u165d\7\u0221\2\2\u165b\u165e"+
		"\7\u021b\2\2\u165c\u165e\5\u02ea\u0176\2\u165d\u165b\3\2\2\2\u165d\u165c"+
		"\3\2\2\2\u165e\u165f\3\2\2\2\u165f\u1661\7\u0222\2\2\u1660\u165a\3\2\2"+
		"\2\u1660\u1661\3\2\2\2\u1661\u1663\3\2\2\2\u1662\u1656\3\2\2\2\u1662\u1657"+
		"\3\2\2\2\u1662\u1658\3\2\2\2\u1662\u1659\3\2\2\2\u1663\u1665\3\2\2\2\u1664"+
		"\u1655\3\2\2\2\u1664\u1665\3\2\2\2\u1665\u1673\3\2\2\2\u1666\u1673\5\u02f4"+
		"\u017b\2\u1667\u1668\7`\2\2\u1668\u1673\5\u02f8\u017d\2\u1669\u1673\5"+
		"\u02f8\u017d\2\u166a\u1673\7\u0117\2\2\u166b\u1673\7\u01b8\2\2\u166c\u1673"+
		"\7\u0095\2\2\u166d\u1673\7c\2\2\u166e\u1673\7\u0181\2\2\u166f\u1673\7"+
		"\u00f6\2\2\u1670\u1673\7\u00ef\2\2\u1671\u1673\7k\2\2\u1672\u1634\3\2"+
		"\2\2\u1672\u163f\3\2\2\2\u1672\u1666\3\2\2\2\u1672\u1667\3\2\2\2\u1672"+
		"\u1669\3\2\2\2\u1672\u166a\3\2\2\2\u1672\u166b\3\2\2\2\u1672\u166c\3\2"+
		"\2\2\u1672\u166d\3\2\2\2\u1672\u166e\3\2\2\2\u1672\u166f\3\2\2\2\u1672"+
		"\u1670\3\2\2\2\u1672\u1671\3\2\2\2\u1673\u02f3\3\2\2\2\u1674\u1675\tZ"+
		"\2\2\u1675\u02f5\3\2\2\2\u1676\u1677\7\u0226\2\2\u1677\u1678\5\u02f4\u017b"+
		"\2\u1678\u02f7\3\2\2\2\u1679\u167a\t[\2\2\u167a\u02f9\3\2\2\2\u167b\u167c"+
		"\7\u0238\2\2\u167c\u167e\5\u02d0\u0169\2\u167d\u167b\3\2\2\2\u167d\u167e"+
		"\3\2\2\2\u167e\u167f\3\2\2\2\u167f\u1680\5\u02fc\u017f\2\u1680\u02fb\3"+
		"\2\2\2\u1681\u1684\5\u0300\u0181\2\u1682\u1684\7\u021e\2\2\u1683\u1681"+
		"\3\2\2\2\u1683\u1682\3\2\2\2\u1684\u02fd\3\2\2\2\u1685\u1686\7\u0221\2"+
		"\2\u1686\u1687\7\u0225\2\2\u1687\u1688\7\u0222\2\2\u1688\u02ff\3\2\2\2"+
		"\u1689\u168a\t\\\2\2\u168a\u0301\3\2\2\2\u168b\u168c\t]\2\2\u168c\u0303"+
		"\3\2\2\2\u168d\u168e\t^\2\2\u168e\u0305\3\2\2\2\u02fe\u0308\u030b\u030f"+
		"\u0332\u033e\u0343\u0348\u034f\u0359\u035e\u0366\u0368\u036c\u0370\u0375"+
		"\u037a\u037f\u0385\u0393\u0398\u039b\u03a1\u03aa\u03b8\u03c0\u03c5\u03cf"+
		"\u03d2\u03d7\u03dc\u03e3\u03e9\u03ed\u03f3\u03f8\u03ff\u0406\u040d\u0414"+
		"\u0416\u0422\u042c\u0431\u043d\u0442\u0447\u044a\u0457\u0463\u0468\u046d"+
		"\u0479\u047e\u0486\u0488\u048c\u0490\u0495\u049a\u049f\u04ab\u04b0\u04b4"+
		"\u04b9\u04bf\u04c6\u04d0\u04d5\u04d8\u04dc\u04e1\u04e7\u04f9\u04fe\u0503"+
		"\u0505\u050c\u0513\u0516\u0519\u051c\u0527\u0533\u0537\u053a\u0543\u054b"+
		"\u0553\u0556\u055d\u0561\u0568\u056e\u0597\u05b3\u05ba\u05bf\u05ca\u05cd"+
		"\u05d8\u05e0\u05e4\u05f0\u05f3\u05f9\u05fc\u0601\u0606\u060a\u0614\u061e"+
		"\u0624\u062f\u0634\u0638\u0640\u0648\u064d\u0650\u0652\u0655\u065e\u0663"+
		"\u066a\u066d\u0670\u0674\u0677\u067f\u0684\u0689\u0690\u069a\u06aa\u06b0"+
		"\u06ba\u06c4\u06cb\u06d0\u06d6\u06e0\u06e5\u06ec\u06f1\u06f7\u06fa\u06fd"+
		"\u070e\u0713\u071c\u0721\u0727\u072a\u0731\u0734\u073b\u0740\u0744\u0749"+
		"\u074e\u0758\u075e\u0768\u076d\u0774\u077a\u077e\u0781\u0784\u0795\u079a"+
		"\u07a2\u07b0\u07b7\u07c7\u07d0\u07d2\u07e7\u07ef\u07fb\u0801\u0815\u0822"+
		"\u082a\u082f\u0837\u0839\u084e\u0855\u0857\u085a\u085e\u0861\u0869\u086b"+
		"\u086d\u0870\u0888\u0891\u0896\u089b\u08a1\u08a8\u08ad\u08af\u08bf\u08c4"+
		"\u08ca\u08d1\u08e7\u08ed\u08f7\u0901\u090a\u0917\u092b\u0934\u0939\u093d"+
		"\u0940\u094e\u0956\u095a\u095d\u096c\u0970\u0975\u0978\u0985\u0989\u0995"+
		"\u099a\u099e\u09a2\u09a8\u09ab\u09ae\u09c9\u09cf\u09d3\u09de\u09e5\u09e9"+
		"\u09ec\u09f2\u09fb\u0a03\u0a07\u0a0b\u0a13\u0a1c\u0a22\u0a24\u0a32\u0a47"+
		"\u0a4c\u0a50\u0a57\u0a5b\u0a5f\u0a63\u0a6f\u0a73\u0a81\u0a87\u0a8e\u0a93"+
		"\u0a9e\u0aa1\u0aa7\u0aa9\u0ab2\u0abc\u0ac1\u0ad0\u0ad4\u0ad7\u0adb\u0ae9"+
		"\u0aeb\u0aef\u0af7\u0afe\u0b03\u0b05\u0b0a\u0b0f\u0b17\u0b1e\u0b22\u0b25"+
		"\u0b31\u0b37\u0b40\u0b43\u0b4d\u0b58\u0b5b\u0b62\u0b65\u0b6c\u0b77\u0b7d"+
		"\u0b81\u0b8b\u0b8e\u0b94\u0b9f\u0ba1\u0ba3\u0ba6\u0baa\u0bad\u0bb1\u0bb5"+
		"\u0bba\u0bc7\u0bcb\u0bd3\u0bd6\u0bdb\u0bdd\u0be6\u0bf0\u0bf5\u0bfb\u0bff"+
		"\u0c02\u0c0a\u0c0d\u0c11\u0c15\u0c1a\u0c1d\u0c21\u0c25\u0c29\u0c35\u0c43"+
		"\u0c4b\u0c4f\u0c53\u0c59\u0c61\u0c64\u0c67\u0c6b\u0c6e\u0c71\u0c74\u0c78"+
		"\u0c84\u0c87\u0c8e\u0c95\u0c9a\u0ca0\u0ca4\u0ca9\u0cb0\u0cb6\u0cbd\u0cc0"+
		"\u0cc3\u0cc7\u0ccc\u0cd0\u0cd2\u0cdf\u0ce6\u0ced\u0cf1\u0cfb\u0cff\u0d07"+
		"\u0d13\u0d1d\u0d22\u0d2c\u0d34\u0d37\u0d3d\u0d42\u0d45\u0d4a\u0d54\u0d59"+
		"\u0d66\u0d72\u0d77\u0d81\u0d86\u0d88\u0d8d\u0d91\u0d97\u0d9b\u0da8\u0dac"+
		"\u0db6\u0db9\u0dbb\u0dc0\u0dc9\u0dd6\u0dde\u0de2\u0deb\u0def\u0df4\u0dff"+
		"\u0e01\u0e11\u0e16\u0e1c\u0e22\u0e34\u0e3b\u0e3e\u0e41\u0e49\u0e4c\u0e54"+
		"\u0e56\u0e5a\u0e5d\u0e62\u0e64\u0e68\u0e74\u0e7d\u0e85\u0e8a\u0e8e\u0e93"+
		"\u0e96\u0e9e\u0ea6\u0eac\u0eaf\u0eb2\u0eba\u0ec4\u0ed0\u0ed7\u0edb\u0edf"+
		"\u0ee2\u0ee5\u0eea\u0eef\u0ef2\u0ef5\u0efb\u0efe\u0f04\u0f07\u0f0a\u0f0f"+
		"\u0f12\u0f1a\u0f20\u0f2a\u0f2f\u0f34\u0f3c\u0f46\u0f4a\u0f4c\u0f4f\u0f5b"+
		"\u0f5f\u0f62\u0f76\u0f7b\u0f80\u0f84\u0f8b\u0f8e\u0f97\u0f9e\u0fa3\u0fa7"+
		"\u0faf\u0fb5\u0fbd\u0fc0\u0fc9\u0fcc\u0fcf\u0fd8\u0fde\u0fe4\u0fe6\u0ff3"+
		"\u0ff5\u0ffe\u1000\u1004\u100a\u100e\u101c\u1021\u102c\u1037\u103b\u1042"+
		"\u1047\u104b\u1050\u1058\u105a\u1060\u1063\u106e\u1073\u107d\u107f\u1081"+
		"\u108b\u108f\u1091\u109d\u10a5\u10b2\u10b5\u10c1\u10c3\u10cb\u10d3\u10da"+
		"\u10de\u10e5\u10e9\u10ee\u10f2\u10fa\u10fe\u1105\u110a\u1113\u111c\u1125"+
		"\u1128\u113c\u1140\u1143\u114a\u114d\u1151\u1154\u115b\u115e\u1164\u1167"+
		"\u116b\u116e\u1175\u117a\u1188\u118f\u119a\u11a3\u11ac\u11b0\u11b4\u11ce"+
		"\u11d1\u11d4\u11de\u11e2\u11e7\u11ec\u11f1\u11fa\u11fd\u11ff\u1203\u120a"+
		"\u1211\u1219\u1228\u122d\u1232\u1238\u123b\u123f\u1249\u1255\u1257\u125e"+
		"\u1262\u126b\u1274\u1282\u128a\u128d\u1296\u129c\u12a6\u12ae\u12b1\u12b4"+
		"\u12bd\u12c2\u12cb\u12d1\u12d6\u12d9\u12de\u12e3\u12e7\u12ed\u12f3\u12fc"+
		"\u1301\u1309\u130d\u1312\u1318\u131f\u1324\u132b\u132f\u1334\u133c\u133f"+
		"\u1342\u1345\u1349\u134e\u1353\u1357\u135e\u1363\u1365\u1370\u1374\u1376"+
		"\u1381\u138c\u1395\u1398\u139c\u139f\u13a3\u13b0\u13b5\u13bd\u13c4\u13c8"+
		"\u13cd\u13d1\u13d6\u13db\u13de\u13e5\u13ef\u13f7\u13fb\u1405\u1408\u140a"+
		"\u1414\u1416\u141c\u1422\u1424\u1432\u1434\u143e\u1447\u1450\u1454\u1458"+
		"\u145d\u1461\u1464\u1468\u146f\u1473\u147b\u1480\u1493\u1498\u149f\u14ac"+
		"\u14b6\u14bb\u14c4\u14cc\u14d4\u14da\u14df\u14e4\u14e8\u14ed\u14f0\u14f6"+
		"\u14fa\u14ff\u1508\u150e\u1513\u151a\u1528\u152c\u1532\u1537\u153c\u153e"+
		"\u1543\u1547\u154c\u1553\u1558\u155a\u155c\u1566\u156b\u156f\u1572\u1576"+
		"\u157f\u1585\u1589\u158b\u158f\u1593\u159a\u15a2\u15aa\u15ac\u15b2\u15b5"+
		"\u15cd\u15d4\u15f5\u15fa\u15fd\u1602\u1604\u160a\u1612\u1617\u161e\u1623"+
		"\u1626\u162a\u1631\u1637\u163d\u1643\u1649\u164e\u1650\u1653\u165d\u1660"+
		"\u1662\u1664\u1672\u167d\u1683";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}